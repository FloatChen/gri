\input texinfo @c -*-texinfo-*-
@c
@comment *** Start of HTML stuff ***
@comment # HTML support, via comments in texinfo:
@comment #
@comment #   `@c HTML some-stuff'
@comment #       Pass "some-stuff", or in other words all the text following
@comment #       the HTML token on the same line, directly to the output file.
@comment #
@comment #       For example, you might do one of the following:
@comment #
@comment # (1) Let user see gif image.
@comment #       @c HTML <A HREF="file.gif">Click to see plot</A> <P>
@comment # 
@comment # (2) Let user ftp to a location.
@comment #       @c HTML <A HREF="ftp:#location">the Gri FTP site.</A> <P>
@comment #
@comment # (3) Ignore some texinfo stuff.
@comment #       @c HTML <!--
@comment #       some texinfo lines
@comment #       @c HTML -->
@comment #
@comment # (4) Create new file, possibly named and titled.
@comment #       @c HTML <!-- newfile filename "other_words_for_title" "margin_note" -->
@comment # if it occurs on a line all by itself, causes 
@comment # this perlscript to chop files here.  The filename
@comment # will be as specified.  The other_words 
@comment # will be used as the title.  If neither the
@comment # filename nor the other_words are present, then
@comment # this script makes up filenames using numbers, e.g.,
@comment # gri1.html, gri2.html.  If the filename is ".",
@comment # then this same naming scheme is used, but the titles
@comment # are used.
@comment #
@comment # (5) Plant a comment to be stripped out as a latex command
@comment #     @c HTML <!-- latex: some-stuff -->
@comment *** End of HTML stuff ***
@c
@comment OVERRIDE some defaults in texinfo.tex
@iftex
@message{}
@message{gri.texi: overriding parskip, }
@global@parskip=3pt             @c space between paragraphs
@message{overriding baselineskip, }
@global@baselineskip=12pt       @c line spacing
@message{overriding lispnarrowing }
@c @global@lispnarrowing=0.2cm  @c left margin on examples
@global@widowpenalty=10000      @c Prevent widows
@global@clubpenalty=10000       @c Prevent orphans
@message{}
@end iftex
@comment %**start of header
@setfilename gri.info
@settitle Gri
@set GRI-VERSION 2.5.2
@set AUTHOR-EMAIL Dan.Kelley@@Dal.CA
@c %**end of header
@iftex
@finalout
@end iftex
@setchapternewpage odd
@titlepage
@title Gri

@comment Logo/begin
@image{./resources/logo}
@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 4cm
@comment OLD \special{psfile="./resources/logo.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-172
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@comment Logo/end


@subtitle A Program to Make Science Graphs
@subtitle Version @value{GRI-VERSION}
@subtitle 2000
@author Dan E. Kelley (@value{AUTHOR-EMAIL})
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1991-2000 Dan Kelley
@sp 2
@end titlepage

@dircategory Scientific Applications
@direntry
* GRI: (gri).  Scientific graphics language.
@end direntry

@node   Top, Introduction, (dir), (dir)
@comment node-name, next, previous, up
@top Gri
@c HTML <!--
This manual describes Gri version @value{GRI-VERSION}, (c) 1991-2000, 
Dan Kelley at email address 
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
@value{AUTHOR-EMAIL}
@c HTML </A>

Licensing follows the GNU Public License; @xref{License}.

Gri is an extensible plotting program designed for scientists.  It can
draw x-y plots, contour plots, and image plots, and has rudimentary
programming capabilities.  It is not mouse driven, nor gui-based; it is
a language.  Users regard it as an analogue to the latex document
formatting language: users gain considerable power, at the price of a
moderate learning curve.

The Gri web homepage is at
@url{http://www.phys.ocean.dal.ca/~kelley/gri}.


@c HTML -->

@c HTML <H1>Gri: a language for scientific graphics</H1>
@c HTML <map name="navigate_top">
@c HTML <area alt="navigate" shape="rect" coords="581,2,599,24" href="Introduction.html">
@c HTML </map>
@c HTML <map name="navigate_bottom">
@c HTML <area alt="navigate" shape="rect" coords="581,2,599,24" href="Introduction.html">
@c HTML </map>
@c HTML
@c HTML <A HREF="./resources/logo.gri">
@c HTML <IMG ALT="Gri Logo" SRC="./resources/logo.gif"></A>
@c HTML This describes Gri @value{GRI-VERSION}, (c) 1991-2000,
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley"> Dan Kelley.</A>  Gri is distributed with
@c HTML a <A HREF="License.html">license</A> that permits 
@c HTML sharing in an OpenSource way.
@c HTML <P>
@c HTML Gri is an extensible
@c HTML plotting language for producing scientific graphs, such as
@c HTML <A HREF="#X-yPlots">x-y plots</A>, 
@c HTML <A HREF="#ContourPlots">contour plots</A>, and
@c HTML <A HREF="#Images">image plots</A>.
@c HTML <P>
@c HTML <font size=+1><b>New users:</b></font>
@c HTML To see if Gri might be useful to you, spend a few minutes
@c HTML reading the
@c HTML <A HREF="#Introduction">introduction</A>, the
@c HTML <A HREF="#SimpleExample">simple example</A> tutorial, the
@c HTML <A HREF="./FAQ.html">FAQ</A> and the 
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/cookbook/index.html"> 
@c HTML cookbook.</A>

@c HTML It is also a good idea to check out the real-world
@c HTML <A HREF="#Examples">examples</A>.
@c HTML Then you should return here to scan the table of contents.  
@c HTML <P>
@c HTML <font size=+1><b>Experienced users:</b></font>
@c HTML <UL>
@c HTML <LI>To check the syntax of a command, consult
@c HTML the <A HREF="#Commands"> list
@c HTML of Gri commands</A>.  You should also
@c HTML check the list of <A HREF="#History">new features</A>
@c HTML occasionally.
@c HTML <LI>Become familiar with the
@c HTML <A HREF="ConceptIndex.html">index</A>.
@c brokenHTML <LI>You can also see a randomly selected
@c brokenHTML <A HREF="http://www.phys.ocean.dal.ca/cgi-bin/ocean/gri_hints">
@c brokenHTML Gri hint</A>.
@c HTML <LI>If you'd rather not navigate this web-site, you might like to go
@c HTML straight to the 
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">FTP site
@c HTML </A> to get the manual, in PostScript format, GNU texinfo
@c HTML format, or HTML format.
@c HTML </UL>
@c HTML <P>
@c HTML <i>Advanced gri users</i> might want to check out the descendent
@c HTML of the Gri language, called
@c HTML <a href="http://www.phys.ocean.dal.ca/~kelley/gre"> Gre.</a>
@c HTML <br>
@c HTML <H2>Table of contents</H2>

@menu
* Introduction::                What Gri is for
* Simple Example::              Introductory example
* Fancy Example::               More complicated example
* Invoking Gri::                Running/viewing/printing Gri
* Programming::                 How to program in the Gri language
* General Issues::              Miscellaneous aspects (read me)
* X-y Plots::                   Drawing x-y linegraphs/scattergraphs
* Contour Plots::               Drawing contour plots
* Images::                      Drawing black+white or color images
* Examples::                    Some real-world examples
* Handling Data::               Dealing with oddly-configured data
* Commands::                    COMPLETE list of Gri commands
* Extras::                      Extra programs provided with Gri
* Evolution::                   How Gri has changed over time
* Accessing::                   How to access/install Gri
* Bugs::                        List of bugs, and how to report more
* Overview of System Tools::    Useful tools in Unix and other OS
* Acknowledgments::             People who have helped me develop Gri
* License::                     The Gri license
* Discussion Group::            Gri email-based newsgroup
Indices
* Index of Commands::           Commands in Gri
* Index of Builtins::           Builtin variables
* Concept Index::               Detailed index
@end menu


@c HTML <!-- newfile Introduction.html "Gri: introduction" "Introduction" -->

@node   Introduction, Simple Example, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

@emph{Gri is a programming language for drawing science-style graphs}.
It is not mouse-driven, and it does not draw business-style graphs
(e.g. pie charts, three-dimensional graphs).  Gri has substantial power
in advanced applications.  It has been proven to be easy to learn; for
simple applications, the learning curve is less than an hour.  Many
users regard Gri as the plotting equivalent of the La@TeX{} document
preparation system.

@emph{Computers Gri works on} unix computers of many types, for example
linux, sunOS/solaris, HP, IBM, DEC alpha, and Macintosh machten.  It was
developed on a solaris platform and linux platforms, so these are best
tested.  It also works, after a fashion, on windows-style computers.
Running Gri is straightforward; just type its name @xref{Invoking Gri}.

@emph{Capabilities of Gri} are those scientists commonly want, since Gri
was written by a scientist.  It is not so useful for business people --
e.g., Gri draws xy graphs (@pxref{X-y Plots}), contour plots
(@pxref{Contour Plots}), and image plots 
(@pxref{Images}), but it will
not draw pie-charts unless you teach it how.  The list of capabilities
of Gri is similar to many packages, but unlike many of the other
packages, Gri gives you control over line widths, fonts, grayscales, etc
@xref{Fancy Example}, and it is a programming language of moderate
power.

@emph{The Gri drawing metaphor} is that of pen on paper.  The ink in the
pen is opaque.  An item drawn in white ink will erase a previously drawn
underlying object drawn in black ink.  For example, to draw a timeseries
curve in which the region between positive data values and the y=0 axis
is filled with black ink, you might use (@code{draw curve filled}) to
draw the timeseries with black ink (the default color), blackening the
area between the curve and the lower axis.  Then you could load white
ink into the pen (using the @code{set graylevel 1} or 
@code{set graylevel white} command) and white-out a box drawn between the zero
line and the lower axis.  Then you'd load black ink back into the pen
(@code{set graylevel 0}) and draw the curve again, so that the negative
part would appear again.

@emph{Input/output} in Gri may be interactive or non-interactive.  For
interactive use, type @code{gri} at the system commandline prompt.  For
non-interactive use, with Gri commands in a command-file called
@file{cmd.gri}, type @code{gri cmd.gri}.  

@emph{Gri output} is in the PostScript page description language.  The
output is therefore of high quality, device-independent, capable of
being inserted into popular text processors (e.g. LaTeX), and easily
displayed @xref{Viewing}.

@emph{Online help} is got with the Gri command @code{help} makes Gri
list the first words of all known commands, along with a hint for
getting further help.  To get more information, type @code{help}
followed by a command-name (e.g. @code{help read}).  There is also a
tiny bit of information stored online and categorized by topic.  Get
this by typing for example @code{help - strings} @xref{Online Help}.

@emph{Data analysis} in Gri is limited.  It has rudimentary data
analysis functions, such as regression, column manipulation, smoothing,
etc, but it is not intended as an integrated analysis/graphics package.

@emph{System calls} are an easy and important facet of Gri.  It is easy
to use operating system commands within Gri @xref{System},
@xref{Operating System}, 
@xref{Get Env}.  This
allows you to use familiar, powerful tools, and keeps Gri simple.
Particularly useful is the ability to read files through operating
system filters @xref{Open}.

@emph{Programming Gri} is quite straightforward, and users familiar with
other programming languages find it easy.  If Gri lacks a drawing
method, you can add it fairly easily, since Gri has programming elements
such as @code{if} statements @xref{If Statements}, @code{while} loops
@xref{While}, facilities for interacting with the user 
@xref{Query}, and mechanisms for storing numbers in "variables"
@xref{Variables},
and text strings in "synonyms" @pxref{Synonyms}.  The Gri syntax can
be augmented easily @xref{Adding New Commands}, and these
augmentations can be stored in a startup file @xref{Resource File},
creating personalized versions of Gri.

@cindex cookbook FTP site
@cindex FTP site, cookbook
@emph{Manuals:} Gri has an online texinfo manual, a PostScript manual, a
WWW manual, a
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/cookbook/cookbook.html"> 
cookbook 
@c HTML </A> 
@cindex Gri newsgroup
@cindex newsgroup
and several reference cards.  It also has a
mail-in newsgroup, which you can join by sending an email to
@c HTML <A HREF="mailto:majordomo@phys.ocean.dal.ca">
@code{majordomo@@phys.ocean.dal.ca}
@c HTML </A>
with contents @code{subscribe gri}.



@emph{Version Numbering Scheme}
@cindex gri version
@cindex version numbers

When you launch Gri interactively (without naming a commandfile, i.e. by
just typing @code{gri} at the unix prompt), you'll see something like

@example
gri - scientific graphic program (version @value{GRI-VERSION})
 GPL Copyright 2000 by Dan E. Kelley.

 Type `help' to view list of commands, or
 type `show license' to view license.  View
 /usr/doc/gri-@value{GRI-VERSION}/html/gri1.html or access `gri'
 INFO node for the online manual.
@end example

@noindent
The last line is a prompt.  You can type commands; type @code{quit} to
quit gri.

The first line gives the version number.  You can also get this by
running Gri with the command @code{gri -v}.  Version numbers have three
numbers separated by periods.  The first number increments for major
changes, the second for smaller changes, the third for still smaller
changes.  The second number also indicates whether a copy is a test
version or a (hopefully bug-free) release version.  Odd numbers in the
second place indicate test versions.  Thus, @code{2.1.0} and
versions normally goes through several changes as bugs are fixed or
features are experimented with.  But for release versions,
e.g. @code{2.2.x}, the last digit normally doesn't change much over
time, since the program is meant to be relatively stable and bug-free.



@c HTML <!-- newfile SimpleExample.html "Gri: simple example" "Simple example" -->

@node   Simple Example, Fancy Example, Introduction, Top
@comment  node-name,  next,  previous, up
@chapter Simple Gri Program and How to Run it
@cindex first-time usage
@cindex hint, first-time usage
@cindex beginners, simple example
@cindex drawing X-Y graphs
This chapter introduces Gri with a common example: a x-y graph.  The
example is discussed in detail later @xref{X-y Plots}.  The data files
and command files here and throughout the manual should be available to
you in a directory @file{.../gri/examples} on unix machines.




@section Gri Command file
@cindex drawing x-y plots

@cindex example 1, linegraph using data in a separate file

Here is a Gri command file to plot a linegraph of a set of (x,y) data,
stored as space-separated columns in a file called @file{example1.dat}:

@example
# Example 1 -- Linegraph of data in separate file
open example1.dat     # Open the data file
read columns x y      # Read (x,y) columns
draw curve            # Draw data curve
draw title "Example 1"# Title above plot
quit                  # End the plot
@end example

@noindent
The first line is a comment, as are all things following double slashes.
(An exception to this double-slash rule is made within strings contained
within the double-quote character @code{"}.  This allows @code{sed}
system commands to work as expected; @xref{System}.)

The other lines are Gri command lines; @pxref{X-y Plots} for more
explanation.


@section Data File
The data file @file{example1.dat} looks like:
@example
0.05 12.5  # first point
0.25 19    # second point
0.5  15    # third point
0.75 15    # ... you get the idea!
0.95 13
@end example

@noindent
Note that spaces (or tabs) separate numbers.  Any data line may have a
comment on it, just as any command line may.


@section Running The Command File
Type @file{gri example1.gri} at the system prompt.  Gri will create a
PostScript file called @file{example1.ps}.  For details on running Gri
@pxref{Invoking Gri}.



@section Output Graph
The output PostScript file is called @file{example1.ps}.

@c HTML It looks something like the miniature shown above.
@c HTML <A HREF="./examples/example1.gif">
@c HTML <IMG ALT="Example 1" SRC="./examples/example1-tiny.gif">
@c HTML </A>
@c HTML Click the plot to enlarge it.)
@c HTML <P>

@c HTML <!--
@ifinfo
Here is a very crude preview of the plot:
@example
                                  Example 1              
                 20 ************************************ 
                    *        *                         * 
                 18 *       * **                       * 
                    *      *    *                      * 
                    *      *     **                    * 
                 y6 *     *        **                  * 
                    *    *           ***********       * 
                    *   *                       **     * 
                 14 *   *                         **   * 
                    *  *                            ** * 
                 12  *********************************** 
                    0     .2     .4  x  .6     .8     1  
@end example
@end ifinfo
@cindex example 1, linegraph using data in a separate file
@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example1.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example1}

@c HTML -->

To view Gri output, use your favorite PostScript previewer;
@xref{Viewing}.

Note that in the above example, Gri automatically chose reasonable
scales for the axes, based on the range of the data.  The next chapter
illustrates that Gri also gives you control over such things.






@c HTML <!-- newfile FancyExample.html "Gri: fancy example" "Fancy example" -->

@node   Fancy Example, Invoking Gri, Simple Example, Top
@comment  node-name,  next,  previous,  up
@chapter Fancy Gri Plots
@cindex scales
@cindex axes, scales
@cindex font, selecting
Gri makes good choices for axis size, axis scaling, line widths, fonts,
etc, but of course you will often want to control these things.  Below
is a followup to the previous example, which names the x and the y axes.
@example
# Fancier version of Example 1
open example1.dat
read columns x y
set x name "Time, hours"
set y name "U, m/s"
draw curve
@end example
The difference is that the x and y axes are named with a @code{set}
command.  There are many @code{set} commands, and they are all pretty
simple, e.g. @code{set x size 15} makes the x-axis be 15 centimeters
long, instead of the default of 10 centimeters.  Indeed, you can control
anything you want in gri, e.g. graph size, line width, fonts, etc etc.
Speaking of fonts, the @code{$\alpha$} type of latex formatting of Greek
letters in a limited way.  Also, Gri handles iso-latin-1 encodings as
well as the U.S. style.


The example below illustrates a few more @code{set} commands.  This
example is intentionally complicated, being about a good example of the
level of complexity of many plots made by Gri.  Read the comments to see
what is being done, and consult the plot as you read the commandfile.
For more details on controlling these things, @pxref{Axes}.

@cindex multiple panels
@cindex example 3 (controlling scales, etc)



@c HTML <A HREF="./examples/example3.gif">
@c HTML <IMG ALT="Example 3" SRC="./examples/example3-tiny.gif"
@c HTML ALIGN=top> 
@c HTML </A>
@c HTML <A HREF="./examples/example3.gri">The command-file.</A> <P>

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example3.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example3}
@cindex example 3, controlling scales, etc



@c HTML <!--
@example
# Example 3 -- Controlling scales, etc
#
# Example of how to control axis scales, etc.  This example makes
# two panels, plotting the same data in different ways.
#
#
# ----- PANEL 1 ------------------------------------------------
#
# Set up the x axis.
#
# Make the x axis run from 0 to 1, with labelled tics each 0.25. 
set x axis 0   1   .25
# Make the x-axis be 5 cm long; in other words, make the plot 5 cm wide.
set x size 5
# Put 2 cm of space between the left edge of the plot and the left
# edge of the paper.
set x margin 2
# Give the x-axis the name "t" with subscript 0.
set x name "$t_0$"
#
# Set up the y axis.
#
# Make the y axis run from 10 to 20, with labelled tics at intervals
# of 5 and smaller, unlabelled, tics, at intervals of 1.  Other
# commands are similar to those for the x-axis.
set y axis 10 20 5 1
set y size 10
set y margin 2
set y name "F"
#
# Now, read our simple data set.
open example1.dat
read columns x y
close
#
# Draw a curve connecting these (x,y) data.  Note that the axes, as
# defined above, will be drawn automatically along with the curve.
draw curve 


#
# ----- PANEL 2 ------------------------------------------------
#
# OK, now for a more complicated version.  We'll keep the same data, but
# redraw it in a new panel, to the right of the first graph.  So, the
# first step is to increase the x margin.  The @{rpn@} command simply
# creates a number which is the sum of the old x margin (stored in 
# the variable ..xmargin..) and the old plot width (stored in
# the variable ..xsize..), plus an extra 1 cm
set x margin bigger @{rpn ..xsize.. ..xmargin.. + 1 +@}
# 
# Set the line thickness for the curve to 1 point (0.3 mm) and the
# axis line thickness to 0.2 points (0.1 mm).
set line width 1.0              # points
set line width axis 0.2         # points
# Set the tics to be 1.5 mm.
set tic size 0.15               # centimetres
# Draw axes and frame, with axes offset from frame.  Some
# people find this more attractive.
set axes style offset
draw axes 1
# Now draw the actual curve.
draw curve
# Superimpose dots (diameter 1.5 mm) at the data.
set symbol size 0.15
draw symbol bullet
#
# All done.
# Draw a title above the plot.
set font size 20
\label = "Example 3 -- scales, axes, etc"
draw label "\label" at          \
    @{rpn 8.5 2.54 * "\label" width - 2 /@} \
    @{rpn ..ytop.. yusertocm 2 +@}\
    cm
quit
@end example
@c HTML -->


@c HTML <!-- newfile InvokingGri.html "Gri: running" "Running Gri" -->

@node   Invoking Gri, Launching, Fancy Example, Top
@comment  node-name,  next,  previous,  up
@chapter Running Gri and Viewing and Printing Output
This chapter tells how to run Gri, and how to view and print Gri output. 

@menu
* Launching::                   Running Gri (short)
* Options On Command Line::     Various options
* Viewing::                     Viewing the PostScript output
* Printing::                    Printing the PostScript output
@end menu

@node   Launching, Options On Command Line, Invoking Gri, Invoking Gri
@comment  node-name,  next,  previous,  up
@section Launching Gri
@cindex running gri
@cindex interactive/noninteractive Usage

If you specify a commandfile when you launch Gri, you will be
using it noninteractively, and errors will cause Gri to exit.

@cindex interactive use, getting help
@cindex help, interactive use
Gri may be used interactively by launching it without naming a
commandfile.  When you strike carriage-return after a command, Gri will
interpret your command and do the appropriate thing.  Errors will give a
message but leave you in Gri.  Mostly, Gri is used interactively to get
help on commands.  For example, a user might type the following to learn
about drawing labels (the boldface string @b{gri:} is a prompt typed by
gri):
@example
gri
gri - scientific graphic program (version @value{GRI-VERSION})
 GPL Copyright 2000 by Dan E. Kelley.

 Type `help' to view list of commands, or
 type `show license' to view license.  View
 /usr/doc/gri-@value{GRI-VERSION}/html/gri1.html or access `gri'
 INFO node for the online manual.

@b{gri: } help             # get help in general
@b{gri: } help draw        # get help on draw commands
@b{gri: } help draw label  # focus on relevant command
@b{gri: } quit             # get out of Gri
@end example

@node	Options On Command Line, Viewing, Launching, Invoking Gri
@comment  node-name,  next,  previous,  up
@section Options on command line
@cindex commandline options
@cindex options on command line

Gri is normally used to draw things, but it may also be used to extract
the commands which were used to create a given postscript file, or
to repair a damaged postscript file.  These forms of usage
are explained below.


@itemize @bullet
@item
To make Gri plot things:
@example
gri [OPTIONS] [CmdFiles [PSFile] [Answers]]
@end example
@cindex @code{[]} syntax for optional words in commands
@cindex optional words in commands, @code{[]} syntax
@noindent
where the square brackets indicate that the enclosed items
are optional.  The @code{OPTIONS} item may consist of one 
or more of the following (explained below):
@example
[-directory pathname]
[-directory_default]
[-yes]
[-batch]
[-debug]
[-warn_offpage]
[-trace]
[-publication]
[-no_bounding_box]
[-no_startup_message]
[-chatty[N]]
[-no_cmd_in_ps]
[-s[uperuser][N]]
@end example
@noindent
and the optional @code{Answers} is a mechanism to provide
answers to any @code{query} commands that Gri is
instructed to do @xref{Query}.  @code{Answeres} must consist of 2 or more
words, separated by whitespace.  The first word must be the single
character @code{:}.  The following words are supplied individually as
answers to @code{query} commands, one word per @code{query} command.
To get whitespace within one of these words, use quotes around
it.  Extra words, beyond the requirements of @code{query} commands,
are ignored.  If there are too few words, then @code{query} reverts
to it's normal behaviour of requesting this input from the user
at the keyboard.
@cindex query, input from commandline 
@cindex command-line input to query
@cindex user interaction, redirecting input to query command
@item
To make Gri extract the commands that created a PostScript file:
@cindex recovering commands from a PostScript file
@cindex command-line option @code{-creator}
@cindex @code{-creator} command-line option
@example
`gri -creator PostScriptFile'
@end example
@noindent @emph{See also} @code{-no_cmd_in_ps}.
@item
To make Gri repair (make printable) a PostScript file created by a
Gri job that failed midway through:
@example
`gri -repair bad.ps good.ps'
@end example
@end itemize


@noindent
NOTES:
@itemize @bullet
@item
Typically Gri is run with a command-line like the following (in which
Gri is told to do the commands in the file @file{timeseries.gri} and put
the PostScript output in a file named @file{timeseries.ps}):
@example
gri timeseries.gri
@end example
@item
Gri returns an exit code of 0 if everything is OK.  Here is a unix
shellscript which uses Gri to create a PostScript file, and preview it
using the ghostview postscript viewing command.
@example
#!/usr/bin/sh
# Run gri, then plot in X window
case $# in
1)
  gri -yes `basename $1 .gri`.gri
  ghostview `basename $1 .gri`.ps
 ;;
*)
  echo "Proper usage: $0 cmdfile.gri"
  ;;
esac
@end example
@end itemize

@emph{Details of command-line options}
@cindex options on Gri command-line
@cindex command-line options

@itemize @bullet
@item  @code{-yes} or @code{-y}
@cindex @code{-yes} command-line option
@vindex @code{..use_default_for_query..}, simulate @code{-yes} commandline flag
@cindex interaction with user, @code{-y} command-line option
Bypasses all @code{query} commands, making Gri act as though the user
typed a carriage-return (thus giving the default) for each @code{query}.
@item  @code{-help} or @code{-h}
@cindex @code{-help} command-line option
Prints explanation of options.
@item  @code{-batch} or @code{-b}
@cindex batch processing
@cindex @code{-batch} command-line option
Stops Gri from printing out prompts and hints.
@item  @code{-no_bounding_box}
@cindex Postscript bounding box
@cindex bounding box
@cindex @code{-no_bounding_box} command-line option
Make the so-called ``bounding box'' in the PostScript file be the full
page.  The bounding box is used by some PostScript previewers to clip
the image to just the drawn parts of the page, and is used by the
@code{epsfbox} macro in @code{latex} to automatically determine the
geometry of the graph for inclusion in text.  Normally the bounding box
is calculated automatically, to enclose all the items drawn on the page.
But the box may also be set with the @code{set bounding box} command
@xref{Set Bounding Box}.
@item  @code{-no_startup_message}
@cindex startup message
@cindex @code{-no_startup_message} command-line option
Stops Gri from printing startup message.
@item  @code{-debug} or @code{-d}
@cindex @code{-debug} command-line option
@vindex @code{..debug..}, for debugging (by normal users)
Sets the built-in variable flag @code{..debug..} that you can use to
isolate blocks of code.
@item  @code{-warn_offpage}
@cindex @code{-warn_offpage} command-line option
Causes warnings to be issued for all items drawn far off a 8.5x11 inch
page.
@item  @code{-directory pathname} 
@cindex @code{-directory} command-line option
Specifies the directory where Gri looks for the startup file
@file{gri.cmd}.  (This file teaches Gri the standard commands; Gri will
report an error and die if it cannot find this file.)  If this switch is
not provided -- and it is normally not -- then Gri looks for
@code{gri.cmd} in a standard system directory (normally
@file{/usr/share/gri}) which was specified during the compilation of the
Gri program itself.
@item  @code{-directory_default} 
@cindex @code{-directory_default} command-line option
Reports directory where @file{gri.cmd} is expected to be found, either
in the default location or the one specified by @code{-directory}
commandline option.
@item  @code{-trace} or @code{-t}
@cindex @code{-trace} command-line option
@cindex tracing execution, command-line option
Makes Gri print out command lines as they are executed; this has the
same effect as the @code{set trace} command.
@item  @code{-publication} or @code{-p}
@cindex @code{-publication} command-line option
@cindex publication quality, command-line flag
Sets the built-in variable @code{..publication..} to 1.  You may use
this to distinguish between working plots and publication plots, as in
this example:
@example
if !..publication..
  draw time stamp
  draw title "working version of plot"
end if
@end example
@item  @code{-no_startup_message}
@cindex @code{-no_startup_message} command-line option
Prevent Gri from printing startup message.  It is not a good idea to use
this option in general.
@item  @code{-chatty[N]} or @code{-c[N]}
@cindex @code{-chatty} command-line option
Make Gri print out various informative messages.  The optional numerical
value -- inserted with NO space -- gives a level of chattiness.  A value
of 1, the default if the @code{-chatty} code is not supplied, tells Gri to
keep you informed of some important things, like the success in gridding
data for contouring.  Higher values make Gri tell you more:

Information printed at various chatty levels:
@itemize @bullet
@item @emph{0}
The bare minimum is printed.  Thus invoking Gri as @code{gri -c0}@dots{}
will make it as quiet as can be.
@item @emph{1 or higher} (the default)
The full filenames of the commandfiles are displayed at startup time.

@code{convert columns to grid} prints percentage of grid filled, as well
as a suite of diagnostics, if you've let it calculate the region of
influence automatically.  It also prints a warning of the time it
expects to take, before starting the calculation.

@code{convert grid to image} prints characteristics of image created,
including amount of image clipped.

@code{read grid data} reports number of data values it could not read
(since they were nonnumeric).

@code{draw symbol} reports number of data points not drawn because they
were missing or outside clip region (if one exists).
@item @emph{2 or higher}
@code{draw contour} prints value of contour being drawn.

@code{open "...|"} prints the command to be passed to the operating
system as well as the name of the temporary file being created; also
notifies user when the temporary file is destroyed.
@end itemize
@item  @code{-no_cmd_in_ps}
Prevent Gri from inserting the lines of the commandfile into the
PostScript file as comments.  (These comments can be used by the
@code{-creator} commandline option (see above), but they take up a little
bit of space and users might sometimes want to get rid of them.)
@item  @code{-superuser} or @code{-s}
@cindex @code{-superuser} command-line option
@vindex @code{..superuser..}, for debugging (by developers)
(This option is included here only for completeness.  It should only be
used by developers (who will alter the code to print debugging
information if @code{-superuser} is set in addition to @code{-debug}).
An optional value can be inserted (e.g. -s2) to set the debugging level
(retrievable by the function superuser()) to indicated integer value.
Specifying the @code{-superuser} command-line option sets the built-in
variable @code{..superuser..} to 1 or the specified value.)

For flag meanings, see @code{superuser} command @xref{Superuser}.
@item  @code{-version} or @code{-v}
@cindex @code{-version} command-line option
Display version information and exit successfully.
@item @code{CommandFile}
@cindex unix environment variable GRIINPUTS
@cindex GRIINPUTS unix environment variable
@cindex @code{CommandFile} command-line option
@cindex command files
@cindex files, Command-file
@cindex command-line, specifying command file
If a command file @code{CommandFile} is specified, then commands will
be read from that file instead of the keyboard.  If the @code{chatty}
level is 1 or larger, Gri prints the names of the commandfiles at
startup time.  It's conventional but not necessary that the filename
ends in @code{.gri}.  If the filename does end in @code{.gri}, you may
delete this suffix; Gri will assume it as implied. 

Gri looks for commandfiles in the local directory.  

@c OLD if they are not found there, the unix Gri will then search the directory
@c OLD @code{/usr/local/lib/gri} (this library directory is defined at compile
@c OLD time, in the @file{defaults.h} file).  This search path can be altered
@c OLD through the @code{GRIINPUTS} unix environment variable, which is a normal
@c OLD unix colon-separated directory list.  To force gri to look only in 
@c OLD the local directory, define @code{GRIINPUTS} as
@c OLD @example
@c OLD export GRIINPUTS="."
@c OLD @end example
@c OLD @noindent
@c OLD and to make Gri look first in your local directory @file{~/lib/gri},
@c OLD do this
@c OLD @example
@c OLD export GRIINPUTS=".:$HOME/lib/gri:/usr/local/lib/gri"
@c OLD @end example
@item @code{PostscriptFile}
@cindex command-line, specifying PostScript file
@cindex @code{PostScriptFile} command-line option
@cindex postScript file
@cindex files, PostScript-file
If a command file is specified, then an additional file,
@code{PostScriptfile}, can be specified as the file in which to store
the PostScript description of the plot.  If no PostScript filename is
given, Gri will make up a filename from the CommandFile name, by first
removing a trailing @code{".gri"} if it exists, and then appending
@code{".ps"}; thus @code{gri foo.gri} creates a PostScript file named
@code{foo.ps}.  If there are multiple commandfiles separated by commas,
Gri forms the name of the PostScript file based on the last commandfile;
thus @code{gri foo,bar} creates @file{bar.ps}.
@end itemize


@emph{NOTE}:  If you don't need to supply commandline options, you can
put the following line as the first line in your Gri program
@example
#!/usr/bin/gri
@end example
@noindent (or point to wherever Gri is located on your machine), and
@code{chmod +x} the file.  Then you can run Gri simply by naming the
file.  There is no particular advantage in this, except for saving the
typing of a few characters, but some folks like this.






@c HTML <!-- newfile Viewing.html "Gri: Viewing Gri output" "Running Gri" -->

@node   Viewing, Printing, Options On Command Line, Invoking Gri
@comment  node-name,  next,  previous,  up
@section Viewing Gri Output
@cindex viewing Gri output
@cindex output
@cindex previewing Gri plots
@cindex postscript previewer
@cindex ghostscript previewer
Gri does not draw directly on your screen.  Instead, it creates a
PostScript file, assuming that you know how to view or print such a
file.  If you don't have a PostScript previewer, you might want to get
the Free Software Foundation's @code{Ghostscript} (or ``@code{gs}'')
program, which works very well.

On a unix system, you may invoke both Gri and the previewer on the same
commandline, e.g., @code{gri foo.gri && gs foo.ps} (many users create a
shellscript that does this).

Gri PostScript output is standard, and can be viewed with standard
viewers such as @code{ghostview} or @code{gv}.



@node   Printing, Programming, Viewing, Invoking Gri
@comment  node-name,  next,  previous,  up
@section Printing Gri Output
@cindex printing, PostScript devices
@cindex postScript printing

Gri output files are in the PostScript page description language.

@itemize @bullet
@item @emph{Unix}
Use a command like @code{lpr file.ps}.
@end itemize



@c HTML <!-- newfile Programming.html "Gri: programming" "Programming Gri" -->

@node   Programming, Online Help, Printing, Top
@comment  node-name,  next,  previous,  up
@chapter Programming in the Gri Language
@cindex programming in Gri

The Gri programming language has @code{if} statements to control program
flow, and a @code{while} statement to repeat commands.  There are two
data types in Gri: ``variables'' (to store numbers) and ``synonyms'' (to
store character strings).  Gri recognizes commands by matching
statements against its list of known commands.  This list is extensible;
it is easy to add new commands as extensions to Gri.

@menu
* Online Help::                 Getting help from gri itself
* Command Lines::               Continued lines, multiple statements
* Variables::                   Variables (for storing numbers) 
* Synonyms::                    Synonyms (for storing character strings) 
* If Statements::               If statements
* Loops::                       Repeating command lines
* Mathematics::                 Doing mathematics on columns, grids etc
* rpn Mathematics::             Doing mathematics on variables 
* Text::                        Doing things with characters strings 
* Adding New Commands::         How to customize Gri by adding new commands
* Missing Values::              How to specify missing data
* Hints::                       Hints for good Gri programming
* Debugging::                   Debugging Gri programs
* Error Messages::              What to do about Gri error messages
@end menu



@node   Online Help, Command Lines, Programming, Programming
@comment  node-name,  next,  previous,  up
@section Online Help
@cindex help, online
@cindex online help
Type @code{help} to get a list of available commands and other topics of
interest. Here's how Gri responds
@example
Type `help' followed by a command-name:
 cd          close         convert       create
 debug       delete        differentiate draw
 expecting   filter        flip          get
 help        if            ignore        input
 insert      interpolate   list          ls
 mask        move          new           open
 pwd         query         quit          read
 regress     reorder       rescale       resize
 return      rewind        set           show
 skip        smooth        sprintf       state
 superuser   system        write
Or type `help -' followed by a topic in:
 example     extending     files         math
 strings     synonyms      variables     manual
@end example
Some commands have more words than shown.  You can type these additional
words to narrow the help down; otherwise Gri will give you help
on all commands that begin with the indicated words.  For example, try
@code{help set} and @code{help set x}.  When you ask for help on a
multi-word command, Gri tells you about all commands which begin
with the words you've typed.  Thus,
@example
help
help draw
help draw zero
help draw zero line
@end example
narrow in on the command @code{draw zero line}.  The response to the
most complete request is:
@example
`draw zero line [horizontally|vertically]'
  draw zero line
    Draw line y=0 if it's within axes
  draw zero line horizontally
    Draw line y=0 if it's within axes
  draw zero line vertically
    Draw line x=0 if it's within axes
@end example
The part enclosed in angled quotes is the syntactical description of the
command.  (NOTE: The square brackets indicate an optional word (in this
case) or words.  The vertical bar indicates that either the item on the
left or the item on the right may appear; it is a logical OR operator.
The only other special characters in syntax descriptions are the braces
@code{@{@}}, which are used to enclose multiple words which act as one
unit; they are used to clarify the choices presented to the OR
operator.)  Following the syntactical description are examples.  Each
example is indented 2 spaces, and a description of it (which always
starts with an upper-case character and ends with a period, to indicate
that it's an English description) follows that, indented by an
additional 2 spaces.

@node  Command Lines, Variables, Online Help, Programming
@comment  node-name,  next,  previous,  up
@section Command Lines

@cindex continued lines
@cindex commands extending over several lines

To extend a command across several lines, use a backslash @code{\\} at
the @emph{very} end of all lines but the last:
@example
draw line from \
  10 20 \
  to \
  10 30
@end example



@c HTML <!-- newfile Variables.html "Gri: variables" "Programming Gri" -->

@node   Variables, About Variables, Command Lines, Programming
@comment  node-name,  next,  previous,  up
@section Variables
@cindex numbers, stored in variables
@cindex variables
@cindex programming, variables

@menu
* About Variables::             What variables are used for, and how
* User Variables::              Defining your own variables
* Built-in Variables::          Variables pre-defined by Gri
@end menu

@node   About Variables, User Variables, Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection About variables
Variables store numbers.  As it reads your program, Gri replaces any
substitutes variable values anyplace a variable appears where a number
normally would.  For example, in the code below @code{.number.} is a
variable storing the value 10, so the two @code{read} statements have
the same effect:
@example
.number. = 10
read columns .number. x y
read columns 10 x y
@end example

Variable names begin and end with a single period (example:
@code{.num.}).  (Gri uses this odd notation to distinguish variable
names from ``normal'' words, which is necessary because Gri does not
have a limited list of keywords as other languages do.  Thus, the C
programming language is happy to let you use a variable name like
@code{latitude}, since it is not a keyword, but Gri is not, since it
might like to use that word itself in a new command.)

You should not use names beginning and ending with double periods,
because Gri uses names like that to store built-in variables for its own
use (e.g., @code{..xsize..} saves the width of the plot).

To store a number into a variable, use a command like
@example
.time. = 10
@end example
or
@example
.time. = @{rpn 10 sin@}
@end example
Storage is automatically set aside when you assign into a nonexistent
variable; no ``declaration'' statements are required as in the C
language.

The Gri command, @code{new} @xref{New}, allows you to have several
``versions'' of a variable.  This is useful for local storage in new
commands, inside @code{if} statements, etc, since it lets you use
temporary variables without worrying about overwriting values outside
the local block of code.  The syntax is @code{new .variable. = value}
(where, as usual, @code{value} may be an rpn expression 
@xref{rpn Mathematics}.  Here is an example:
@example
`foo bar'
@{
  new .a.         # Get storage
  .a. = 10        # Store a local value
  show "Locally, .a.=" .a. " (expect 10)"
  delete .a.      # Delete this local one
@}
.a. = 1
show "Global version has .a.=" .a. " (expect 1)"
foo bar
@end example

To see if a given named variable (or synonym) exists, use the RPN
operator @code{defined} @xref{rpn Mathematics}.


@node   User Variables, Built-in Variables, About Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection User variables
@cindex variables, defined by user
@cindex user-defined variables
You can get Gri to read values for variables from your file.  Here's how
to read a number from a header line and then read that many lines of
columnar data:
@example
open file.dat
read .num.
read columns .num. x y
@end example

You can define variables within the Gri program:
@example
.num. = 10
read columns .num. x y
@end example

@cindex interaction with user, @code{query} command
You can get variables interactively from the user, using the
@code{query} command.  (If the user types carriage-return, or if the
command-line flag @code{-y} was specified when invoking Gri, the value
100 will be assigned to @code{.num.}.)
example, 
@example
query .num. "Number of rows to read?" (100)
read columns .num. x y
@end example

Gri allows you to use a previous value of the variable in the default
string, as in this example:
@example
.start. = 8                             # default
.stop. = 2                              # default
query .start. "Start time? " (.start.)
query .stop.  "Stop time?  " (.stop.)
@end example

Variables can be manipulated using reverse polish notation (RPN)
mathematical operations @pxref{rpn Mathematics}.

Variables are often useful in @code{if} statements.  Here are some
examples:
@example
read .num_pts.
if .num_pts.
  show "There are some data"
  read columns .num_pts. x y
else
  show "There are no data"
end if
# ...
read .latitude.
if @{rpn .latitude. 10 <@}
  read .num.
  read .num. x y
  draw curve
else
  show "Skipping data North of 10deg N"
  read .num.
  skip .num.
end if  
@end example


@node   Built-in Variables, Synonyms, User Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection Built-in variables
@cindex variables, built-in
@cindex built-in variables
Built-in variables @pxref{Index of Builtins} have names which begin and
end with @emph{two} periods.  For example, @code{..xsize..} is the width
of the x-axis in centimetres.  You may use these variables as you wish
(example: @code{..xsize.. = 4} is an alternative to 
@code{set x size 4}), but you must be aware that these are not ``free''
variables for you to use for arbitrary purposes.  You can find out what
the built-in variables are by the command @code{show variables}.

There are two types of variables
@itemize @bullet
@item
@emph{Startup} variables, which are created by Gri at startup time.
These variables can be relied upon to exist (barring changes in Gri
itself), unless you @code{delete} them.
@item
@emph{Spontaneous} variables (which are created by certain Gri commands,
and only exist if these commands have been executed).  For example, the
@code{regress} command defines @code{..coeff0..} (the intercept of the
fitted line), @code{..coeff1..} (the slope of the fitted line),
@code{..R2..} (the correlation coefficient).
@end itemize

To see the values of the built-in variables (along with the user
variables), use @code{show variables}.  Here are some useful builtin
variables: 
@emph{Meanings of the built-in variables}

@itemize @bullet
@item @code{..arrowsize..}
@cindex arrows, setting size of heads using @code{..arrowsize..}
@cindex size of arrows, setting size using @code{..arrowsize..}
@vindex @code{..arrowsize..}, size of arrows
Stores either a positive number representing the halfwidth of arrowheads
measured in centimetres, or a negative number giving the negative of the
ratio of arrowhead halfwidth to arrow length.   (@pxref{Set Arrow Size}).
@item @code{..batch..}
@cindex batch processing
@vindex @code{..batch..}, flag used for batch mode
Flag used for batch mode.
@item @code{..debug..}
@vindex @code{..debug..}, flag used for debugging
@cindex debug command-line option
@cindex debugging, using @code{..debug..}
Equal to 1 if the @code{-debug} command-line flag was set.  Flag used
for debugging (@pxref{Options On Command Line}).  The @code{..debug..}
built-in variable is useful in isolating code to use only in test runs.
For example, you might use
@example
if ..debug..
  show "Following are the column data"
  show columns 
end if
@end example
When you run the program with command-line @code{gri -debug file.gri}
the code in the @code{if} block will print out the columnar data, but
when you run it with @code{gri file.gri} these lines are not done.  
@item @code{..eof..}
@vindex @code{..eof..}, flag indicating end-of-file
Flag indicating whether an end-of-file was encountered on the last
@code{read columns}.
@item @code{..words_in_dataline..}
@vindex @code{..words_in_dataline..}
@cindex reading data, checks
@cindex data files, words in lines
Number of words on last dataline.  This is useful in constructs like
@example
open tmp.dat
.num. = 0
while 1
  read .a. .b.
  if !..words_in_dataline..
    show "Got empty line or EOF, so break loop"
    break
  end if
  show "a=" .a. "b=" .b.
  show "; words in line=" ..words_in_dataline..
  .num. += 1
end while
show "Got " .num. "data lines."
@end example
@item @code{..fontsize..}
@cindex font, size
@vindex @code{..fontsize..}, size of letters
Size of letters, measured in points; there are 72.27 points in an inch
and 28.45 points in a centimetre.  The mathematical operators
@code{pttocm} and @code{cmtopt}, which do conversion between points and
centimetres, are often useful in labelling data curves 
(@pxref{rpn Mathematics}).
@item @code{..graylevel..}
@cindex gray level
@vindex @code{..graylevel..}, graylevel (0=black)
Graylevel to use in drawing lines, text, etc.  Black ink is 0; white
paper is 1.  @emph{See also} @code{..red..} etc.
@item @code{..image_height..}
@vindex @code{..image_height..}, height of image
Height of image, or 0 if no image defined yet.
@item @code{..image_width..}
@vindex @code{..image_width..}, width of image
Width of image, or 0 if no image defined yet.
@item @code{..length_dash..}
@vindex @code{..length_dash..}, length/cm of dashes
Length/cm of dashes in dashed lines.
@item @code{..length_blank..}
@vindex @code{..length_blank..}, length/cm of blanks
Length/cm of blanks in dashed lines.
@item @code{..linewidth..}
@vindex @code{..linewidth..}, width of lines
Width of lines for data curves @xref{Set Line Width}.
@item @code{..linewidthaxis..}
@vindex @code{..linewidthaxis..}, width of lines on axis
Width of lines on axes @xref{Set Line Width}.
@item @code{..linewidthsymbol..}
@vindex @code{..linewidthsymbol..}, width of lines in symbols
Width of lines in symbols @xref{Set Line Width}.
@item @code{..missingvalue..}
@vindex @code{..missingvalue..}, missing value code
Missing value code, also stored in the synonym @code{\.missingvalue.};
@xref{Set Missing Value}.
@item @code{..num_col_data..}
@vindex @code{..num_col_data..}, number column data
Number of column data that exist.  You might want to use this after
@code{read columns} to see if a data file actually had any data in it,
or use it in accessing individual elements of columns 
(@pxref{rpn Mathematics}).
@item @code{..publication..}
@cindex publication quality plots, built-in variable @code{..publication..}
@vindex @code{..publication..}, flag for final copy of plot
Flag for final copy of plot.  The command-line option @code{-p} sets the
value of @code{..publication..} to 1.  A typical, and highly
recommended, code fragment is
@example
if !..publication..
  draw time stamp
end if
@end example
@item @code{..red..}, @code{..green..}, @code{..blue..}
@vindex @code{..blue..}
Description of present color.  The values are between 0 and 1, with
(0,0,0) being black and (1,1,1) being white.  If color is gray, all
these will be equal.  You may assign to these, but it will @emph{not}
change the color.
@item @code{..symbolsize..}
@cindex symbol size, stored in @code{..symbolsize..}
@vindex @code{..symbolsize..}, size of symbols
Size of symbols in centimetres.
@item @code{..superuser..}
@vindex @code{..superuser..}, was -superuser flag set?
Equal to 0 if the flag was not set, or equal to the flag if it was.
@item @code{..tic_direction..}
@vindex @code{..tic_direction..}, direction of axis tics
Direction of axis tics, 1 for inside or 0 for outside.
@item @code{..tic_size..}
@vindex @code{..tic_size..}, size/cm of axis tics
Size of axis tics in centimetres.
@item @code{..trace..}
@vindex @code{..trace..}, for tracing program execution
Equal to 1 if the @code{-trace} command-line flag was set.  Used for
tracing program execution.
@item @code{..xleft..}
@vindex @code{..xleft..}, x value at left of plot
x value at left of plot.
@item @code{..xmargin..}
@cindex margins
@vindex @code{..xmargin..}, left margin
Left margin, in centimetres.
@item @code{..xright..}
@vindex @code{..xright..}, x value at right of plot
x value at right of plot.
@item @code{..xsize..}
@cindex length of axes
@cindex axes, length of
@vindex @code{..xsize..}, x-axis length
x-axis length in centimetres.
@item @code{..ybottom..}
@vindex @code{..ybottom..}, y value at bottom of plot
y value at bottom of plot.
@item @code{..ymargin..}
@vindex @code{..ymargin..}, bottom margin
Bottom margin in centimetres.
@item @code{..ysize..}
@vindex @code{..ysize..}, y-axis length
y-axis length in centimetres.
@item @code{..ytop..}
@vindex @code{..ytop..}, y value at top of plot
y value at top of plot
@item @code{..exit_status..}
@vindex @code{..exit_status..}, exit status from @code{system} call
The exit status from the most recent @code{system} call (or 0 if no
system calls have been done yet).
@end itemize





You may use any of these built-in variables anywhere.  For example,
here's how to stack 3 graphs vertically on the page:
@example
.offset. = @{rpn ..ysize.. 3 + @}
open file1
read columns x y
close
draw axes
draw curve 

..ymargin.. += .offset.
open file2
read columns x y
draw axes 
draw curve 
close

..ymargin.. += .offset.  
open file3 
read columns x y 
draw axes 
draw curve 
close
@end example

@cindex mathematics, rpn notation, example
The first line needs a bit of explanation. It's a reverse-polish
expression.  The format is @code{@{} followed by @code{rpn} followed by
an expression followed by @code{@}}.  Within the expression, spaces must
separate operands.  This makes @code{.offset.} equal to the height of
y-axis plus 3 cm, so plots are separated by 3 cm.  To learn more about
@code{@{rpn ... @}} @pxref{rpn Mathematics}.

Another possibly unfamiliar thing is the code @code{+=}.  It means take
the thing on the left hand side, and add to it the thing on the right
hand side.  (In this case, it's used to increase the y margin by the
value of @code{.offset.}.)


@c HTML <!-- newfile Synonyms.html "Gri: synonyms" "Programming Gri" -->

@node   Synonyms, About Synonyms, Built-in Variables, Programming
@comment  node-name,  next,  previous,  up
@section Synonyms
@cindex character variables (synonyms)
@cindex synonyms, for storing character strings
@cindex programming, synonyms
@cindex synonyms, naming convention
Synonyms are used by Gri to store character strings.  Gri denotes
synonyms with words beginning with backslash (e.g., @code{\syn}),
following the @TeX{} convention.  You may use any name you like for
synonyms, but it's a bad idea to use names that begin and end with
period (since that's what Gri uses for it's own synonyms), or synonyms
with names like @code{\n}, @code{\t}, etc, since you might want to use
such items in system calls (where they may be intended to mean NEWLINE
and TAB).

There are two types of synonyms: @emph{user synonyms} which are defined
by the user and @emph{Builtin synonyms} which are pre-defined by Gri.

@menu
* About Synonyms::              What synonyms are used for, and how
* User Synonyms::               Defining your own synonyms
* Built-in Synonyms::           Built-in synonyms pre-defined by Gri
@end menu

@node   About Synonyms, Synonym Names, Synonyms, Synonyms
@comment  node-name,  next,  previous,  up
@subsection About synonyms
@cindex hint, preventing mangling of system commands and synonyms
@cindex system commands and synonyms, preventing mangling 
@cindex backslash
@cindex math-mode and user synymns
@cindex synonyms 
@cindex @code{\, backslash (@emph{see also} Synonyms)}
@cindex netCDF files, reading attritubtes into synonyms
@cindex colon in synonym names
@cindex synonym names

@menu
* Synonym Names::
* Dot Naming Convention For Builtin Synonyms::
* Displaying Synonyms::
* Accessing Individual Words Within Synonyms::
* Testing For Existence Of Synonyms::
* Using Synonyms In If Statements::
@end menu

@node   Synonym Names, Dot Naming Convention For Builtin Synonyms, About Synonyms, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Synonym names
@cindex synonyms, naming convention
Synonym names begin with a backslash (e.g., @code{\filename}).  Names
normally end with a space or a punctuation character (e.g. @code{,}).
It is also possible to use punctuation characters (but not blanks or
tabs) in synonym names, provided that the second character in the name
is an opening brace and the last character is a closing brace,
@code{\@{foo.bar@} = "Foo bar"}).  This is used particularly for files
in the netCDF format, for reading variable attributes, which by netCDF
convention use a colon (@code{:}) to separate variable name and
attribute name @xref{Read Synonym or Variable}.

For more information on netCDF format, see
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html}
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@c HTML here </a>.

Synonyms may be freely embedded in strings (a common example is
@code{draw title "Data from file `\datafile'"}.  They may also appear
anywhere in commands (e.g., @code{open \filename}).  The exception to
this rule is that Gri ignores your synonyms within math mode, in order
to prevent clashes (e.g. you might define @code{\alpha} as a synonym
storing the value @code{"foo bar"}, but Gri will ignore this within
math-mode, so that @code{$\alpha$} will still mean the Greek letter
alpha).

To get a backslash in a string without Gri thinking it is part of a
synonym, use two backslashes (e.g., 
@code{show "The backslash character \\ is used for synonyms."}).  This
may sometimes be required in 
@code{system} commands (@pxref{System}), to prevent Gri from converting
substrings like @code{\n} (which many system commands use to represent
the newline character).  For example, the command 
@code{system perl -e 'print "foo\nbar";'} will be mangled if Gri has
already been told that
@code{\nbar} is a synonym.  (There will be no problem if @code{\nbar} is
not an existing synonym, since Gri will then just leave it in place.)
To be sure that no mangling can occur, replace each backslash with two
backslashes.  This tells Gri not to try to substitute a synonym at that
location.  In the example below, the first system call prints
@code{fooled you!} on one line line, because Gri substituted for what it
thought was a synonym called @code{\nbar}; the second (correctly) prints
@code{foo} on one line and @code{bar} on the next.
@example
\nbar = "led you!"
system perl -e 'print "foo\nbar\n";'
system perl -e 'print "foo\\nbar\\n";'
@end example

@node   Dot Naming Convention For Builtin Synonyms, Displaying Synonyms, Synonym Names, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Dot naming convention for builtin synonyms
@cindex builtin synonyms
@cindex synonyms, builtin
@cindex synonyms, dots in names
Built-in synonyms have special names, as builtin variables do: the first
and last character is a period.  Thus, @code{\.time.} is a synonym for
the date.  @emph{Do not} use names like this for your own synonyms, or
you may confuse Gri.

@node   Displaying Synonyms, Accessing Individual Words Within Synonyms, Dot Naming Convention For Builtin Synonyms, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Displaying synonyms
@cindex displaying synonyms
@cindex synonyms, displaying
To display a particular synonym, do @code{show "\name"}.  To display all
known synonyms, do @code{show synonyms}.  

@node   Accessing Individual Words Within Synonyms, Testing For Existence Of Synonyms, Displaying Synonyms, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Accessing individual words within synonyms
@cindex strings, accessing individual words within
@cindex words in synonyms, accessing individually
@cindex synonyms, accessing individual words of
@cindex @code{[]} syntax for selecting words in synonyms
Individual words of synonyms may be accessed by prefixing the synonym
name with the index number of the word (starting at 0) enclosed in
square brackets.  If the number is negative or exceeds the number of
words less 1, then the first or last word is retrieved.  If no number
appears in the brackets, the result is the number of words in a synonym.

@example
\syn = "This has 4 words"
show "\[0]syn   ... gives 'This'"
show "\[1]syn   ... gives 'has'"
show "\[]syn    ... gives '4', i.e. number of words"
@end example

@node   Testing For Existence Of Synonyms, Using Synonyms In If Statements, Accessing Individual Words Within Synonyms, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Testing for existence of synonyms
@cindex testing for existence of synonyms
@cindex existence of synonyms, testing for
@cindex synonyms, testing for existence of
To see if a given named synonym (or variable) exists, use the RPN
operator @code{defined} @xref{rpn Mathematics}.

@node   Using Synonyms In If Statements, User Synonyms, Testing For Existence Of Synonyms, About Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Using synonyms in @code{if} statements
@cindex @code{if} statements, using synonyms in
@cindex using synonyms in @code{if} statements
Here are some examples of using strings in @code{if} statements.  Note
that synonyms must be enclosed in quotes if they are to be compared with
strings.

@cindex interaction with user, @code{query} command
@example
query \item "Item to plot?" ("S")
if @{"\item" == "S"@}
  show "Plotting S"
  # ...
else if @{"\item" == "T"@}
  show "Plotting T"
  # ...
else
  show "Don't know what to plot"
  quit
end if
@end example

Here the strings are compared with the @code{==} operator.  Inequality
is tested with @code{!=}.  One can do string comparisons in @code{rpn}
expressions, e.g @code{if @{rpn "\item" "S"==@}} (for more information,
@xref{rpn Mathematics}.)



@node   User Synonyms, Built-in Synonyms, Using Synonyms In If Statements, Synonyms
@comment  node-name,  next,  previous,  up
@subsection User synonyms
@cindex character variables (synonyms)
@cindex synonyms, extracting individual words from
@cindex synonyms, assigning values to
@cindex synonyms, constructing using the operating system
@cindex user-defined synonyms
@cindex synonyms, for storing output from system commands
@cindex operating system commands, assigned to synonyms
@cindex system commands, assigned to synonyms
@cindex operating system, example of using to construct filenames
@cindex system commands, example of using to construct filenames
@cindex filenames, constructing using the operating system

@subsubsection Simple Assignment
@example
\filename = "columns.dat"
open \filename
@end example

@subsubsection System Output Stored Into Synonyms
@example
# Show the date.
\date = system date
show "Time is \date"

# Show the command file name, then use the system
# to construct a filename with the same beginning
# but ".dat" as the ending instead of ".gri".
show "The commandfile name is \.command_file."
\fn = system echo `basename \.command_file. .gri`.dat
show "A filename constructed from this is \fn"
@end example
This example uses the Unix system commands @code{echo} and
@code{basename} to  construct a filename ending in @file{.dat}, from the
command file name (stored in the builtin string @code{\.command_file.}),
assuming that the command file name ends in @file{.gri}.

NOTE: As usual, if the system command contains the Gri comment
designator (the string @code{#}), protect it with double-quotes;
@xref{System}.


@subsubsection Assignment by Extraction of Words from Strings:
This is an adjunct to the @code{[]} syntax for synonyms.
@example
\sentence = "This sentence has five words"
\first_word = word 0 of "\sentence"
\last_word = word 4 of "This sentence has five words"
@end example
@noindent
Note: this is often used together with @code{read \synonym}, to allow
the Gri program to access individual words in a data file.


@subsubsection Interactively User-supplied Strings

You can ask the user for the contents of strings:
@example
query \filename "What's the data file?" ("file.dat")
@end example
@cindex interaction with user, @code{query} command
@noindent
The prompt @code{What's the name of the data file?} is typed to the
terminal, and whatever string the user types is inserted into the
synonym @code{\filename}. If the user types nothing, but simply presses
carriage return, the (optional) default string (which must be enclosed
in parentheses as shown) is put into @code{\filename}. Note that the
default is ignored if it is not written properly: it must be enclosed in
double quotes enclosed in braces, with no intervening spaces.


@subsubsection Reading Synonyms From a File
You can read the contents of synonyms from a file:
@example
open \directory_file
read \file_name
close
open \file_name
read columns x y
@end example
@noindent
Note that the @emph{entire} line is read into the synonym; if you need
individual words, see the item above about extracting words.



@node   Built-in Synonyms, Local Synonyms, User Synonyms, Synonyms
@comment  node-name,  next,  previous,  up
@subsection Built-in synonyms
@cindex strings, stored in synonyms
@cindex character strings, stored in synonyms
There are two types of built-in synonyms: local and global.
@menu
* Local Synonyms::              Synonyms local to a new Gri command
* Global Synonyms::             Synonyms shared between Gri commands
@end menu

@node   Local Synonyms, Global Synonyms, Built-in Synonyms, Built-in Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Local synonyms
@cindex synonyms, local
@cindex local synonyms
@vindex @code{\.proper_usage.}
@vindex @code{\.words.}
@vindex @code{\.word0.}
@vindex @code{\.word1.}
@cindex built-in synonyms, local
@cindex local built-in synonyms
@cindex command lines, parsing in new Gri commands
@cindex programming, parsing command lines
@cindex programming, using local built-in synonyms
Local synonyms are created by Gri upon entry to a Gri command.  You use
them to parse the command line that was used in calling the new command,
to look for options, gather filenames, etc.  Local synonyms are known
only from within the local Gri command.  They are not listed by
@code{show synonyms}, but they can be used freely in commands like
@code{show "Number of words is \.words."}.

@itemize @bullet
@item
Within any new Gri command, the number of words in the line that called
the command is available in @code{\.words.}.
@item
The first word in the calling line is @code{\.word0.}, the second
@code{\.word1.}, etc.  (Note that this is the C convention, @emph{not} the
FORTRAN convention.  If @code{\.words.} is 2, then @code{\.word0.} and
@code{\.word1.} are defined, but @code{\.word2.}, which FORTRAN programmers
expect, will not be defined.)
@item
Within any new Gri command, the proper calling usage is available in
@code{\.proper_usage.}.  This is useful in tests of syntax 
(@pxref{New Commands}):
@example
`draw depths from \file'
Draw depth data stored in indicated file.  If the 
filename contains periods or slashes, you'll
have to enclose it in double quotes, as
in the second example:
  draw depths from file upper_cove
  draw depths from file ../old_data/upper_cove
@{
  if @{rpn \.words. 4 !=@}
    show "FATAL ERROR in `\.proper_usage.':"
    show "  Need 4 or 5 words; got \.words. words."
    quit
  end if
  # Right number of words, so continue onward...
@}
@end example
@end itemize
These synonyms help you scan for optional words in commands.  Suppose
you have defined a new command @code{New Thing [option]}.  If you call
it with @code{New Thing}, then (within @code{New Thing}) @code{\.words.}
will be @code{"2"}, @code{\.word1.} will be @code{"New"} and @code{\.word2.}
will be @code{"Thing"}.  On the other hand, if you call it with
@code{New Thing 22.3} then @code{\.words.} will be @code{"3},
@code{\.word1.} will be @code{"New"}, @code{\.word2.} will be
@code{"Thing"}, and @code{\.word3.} will be @code{"22.3"}.

@emph{EXAMPLE}  Here is a new command to label lines drawn by 
@code{draw curve}: 
@example
`Draw Label For Last Curve "label"'
Draw a label for the last curve drawn, using
..lastx.. and ..lasty.. built-in variables.
@{
  .draw_label_for_last_curve_graylevel. = ..graylevel..
  set graylevel 0
  draw label "\.word5." at \
      @{rpn ..lastx.. xusertocm 0.1 + xcmtouser@} \
      @{rpn ..lasty.. yusertocm \
          ..fontsize.. pttocm 2 / -
          ycmtouser@}
  set graylevel .draw_label_for_last_curve_graylevel.
  delete .draw_label_for_last_curve_graylevel.
@}
open file.dat
read columns x y
draw curve
\label = "Illustration"
Draw Label For Last Curve "\label"
@end example
@noindent
(Note that Gri has a built-in command 
@code{draw label for last curve "\label"} written much as above, so
there is no need for you to enter 
this new command into your @file{.grirc} file.  But you might want to
check @file{gri.cmd} to see how a full
command does checking of the calling syntax
@xref{Options On Command Line}.

@node   Global Synonyms, If Statements, Local Synonyms, Built-in Synonyms
@comment  node-name,  next,  previous,  up
@subsubsection Global synonyms
@cindex synonyms, global
@cindex global synonyms
@cindex built-in synonyms, global
@cindex global built-in synonyms
@cindex synonyms, built-in, list of
@cindex return value, @code{\.return_value.}
@vindex @code{\.return_value.}, Return value
@vindex @code{\.ps_file.}, PostScript file name
@vindex @code{\.readfrom_file.}, data file name
@vindex @code{\.command_file.}, command-file name
@vindex @code{\.missingvalue.}, command-file name
@vindex @code{\.home.}, home directory
@vindex @code{\.system.}, operating system name
@vindex @code{\.user.}, user's login name
@vindex @code{\.time.}, time and date
@cindex directory, stored in synonym @code{\.wd.}
@cindex working directory, stored in synonym @code{\.wd.}
@cindex @code{\.wd.} synonym, storing working directory
@vindex @code{\.wd.}, working directory
@vindex @code{\.version.}, version of Gri
@vindex @code{\.pid.}, process ID of job
Within mathematics mode (portions of strings enclosed within
dollar-signs), Gri stores the definitions of many Greek letters and
mathematical symbols as math-mode synonyms; @xref{Mathematical Text}.

Global synonyms are shared amoung commands.  To see the built-in global
synonyms (@pxref{Index of Builtins})
use @code{show synonyms}:

@example
gri: Synonyms...
\.missingvalue.="10000000000000000000000.000000"
\.return_value.=""
\.awk.="gawk"
\.version.="2.2.6"
\.pid.="13644"
\.wd.="/autofs/users/dek/kelley/src/gri/src"
\.time.="Thu Jan 14 15:30:51 AST 1999"
\.user.="kelley"
\.host.="Kelley"
\.system.="unix"
\.home.="/users/dek/kelley"
\.lib_dir.="/users/dek/kelley/src/gri/src"
\.command_file.="stdin"
\.readfrom_file.="stdin"
\.ps_file.="gri-??.ps"
@end example
@cindex time
@cindex date
@cindex @code{\.return_value.}, general
The meanings of these things will be obvious to unix users; for example
@code{\.pid.} is the process ID of the job (often used in names for
temporary files), and @code{\.wd.} is the working directory (often used
in @code{draw title} commands to indicate in which directory the gri job
was run.  Some commands set @code{\.return_value.} to non-blank; the
meaning of the return value varies from command to command.

@c HTML <!-- newfile IfStatements.html "Gri: if statements" "Programming Gri" -->

@node   If Statements, Loops, Global Synonyms, Programming
@comment  node-name,  next,  previous,  up
@section If Statements
@cindex programming, if statements
@cindex if statements
Gri has @code{if} statements to make your programs more flexible.
Here's an example:
@cindex interaction with user, @code{query} command
@example
query \thick "Use thick lines? (0 or 1)" ("0")
if \thick
  set line width 2
else
  set line width 0.5
end if
@end example
@noindent
If you answer 1 to the question, the line thickness will be set at 2
points.  If you answer 0 then a thin line will be used.  If you press
carriage return a thin line will be used.

The item following the @code{if} can be 
@itemize @bullet
@item
a number (1 means true; anything else means false)
@item
a variable (1 means true; anything else means false). Example:
@example
if .plot_contours.
  draw contour
end if
@end example
@item
a synonym which expands to a number (1 means true; anything else means
false). Example:
@example
\plot_contours = "1"
if \plot_contours
  draw contour
end if
@end example
(Don't worry about the fact that synonyms are strings; Gri
expands the string value before interpreting the @code{if} statement.)
@item
an expression of the form @code{@{string1 == string2 @}}.  The symbol
@code{==} is an operator which tests for string equality.  This expands
to @code{1} if the strings are equal, or @code{0} otherwise.  The
strings may be either synonyms or string constants.  If the string
constant contains only one word, then it's not necessary to enclose it
in quotes, but it is clearer to do so.  Examples:
@cindex labels, on axes
@example
if @{"\variable" == "Salinity"@}
  set x name "Salinity"
else 
  set x name "Unknown"
end if
@end example
@item
a rpn (reverse polish notation) expression 
(@pxref{rpn Mathematics}.):
@example
if @{rpn .time. 100 <@}
  # ie, (100 < time), not (time < 100)
  show "Time > 100"
else if @{rpn .time. 100 >@}
  show "Time < 100"
else if @{rpn "\item" "later" ==@}
  show "Time ... later babe"
else
  show "Time is equal to 100"
end if
if @{rpn .time. 10 * 100 ==@}
  show "Time is equal to 10"
else
  show "Time is not equal to 10"
end if
@end example
@end itemize

There is no need to put the else part in if you don't need it. You
can do
@example
set line width 0.5
if \use_thick_lines
  set line width 2
end if
@end example

if you wish.

If you want just the else part, you can do
@example
if ! \use_thick_lines
  set line width 0.5
end if
@end example

(The exclamation point denotes logical negation: @code{! true} equals
@code{false}.)

If statements may be nested many levels deep.  You may also have
@code{else if} blocks, as in:
@example
if @{"\variable" == "S"@}
  set x name "Salinity"
  set x axis 32 33 0.5 .1
else if @{"\variable" == "T"@}
  set x name "Temperature"
  set x axis 15 20 1 0.5
else
  set x name "Unknown"
end if
@end example


@c HTML <!-- newfile Loops.html "Gri: Loops" "Programming Gri" -->
@node   Loops, Mathematics, If Statements, Programming
@comment  node-name,  next,  previous,  up
@section Loops
Gri provides only one type of loop; @xref{While}.


@c HTML <!-- newfile Mathematics.html "Gri: Mathematics" "Programming Gri" -->

@node   Mathematics, rpn Mathematics, Loops, Programming
@comment  node-name,  next,  previous,  up
@section Mathematics
Gri lets you do some simple mathematical manipulations on your
column and grid data.

@cindex column mathematics
@cindex mathematics, on columns
@cindex powers, of columns or variables
@cindex exponentiation
@cindex logarithms
The column operators are @code{=}, @code{+=}, @code{-=}, @code{*=},
@code{/=}, @code{^=} (exponentiation) and @code{_=} (logarithm).  There
must be spaces before and after the operators, but no space between the
2 letters of the operators. The operations may be applied not only to
@code{x} and @code{y} as shown, but also so @code{z} (used to hold data
to be contoured or written as symbols), and @code{u} and @code{v} (used
to store vector fields).

The axis scales are @emph{not} changed by mathematical operations on the
columns, regardless of whether the scales were set manually or by Gri
command) @xref{Autoscaling}.

Elements of columns are available by the @code{@@} reverse polish
operator (@pxref{rpn Mathematics}).

Examples:
@itemize @bullet
@item
To multiply all the x data by 10, use @code{x *= 10}; to add 5 to each
y-value, use @code{y += 5}.
@item
To set all the y data to 10, do @code{y = 10}.  (This will only work if
you've already read column data.)
@end itemize

@subsection Grid data
@cindex grid data mathematical operations
@cindex mathematics, on grid data
Various commands let you alter grid data as used in contouring
(@pxref{Contour Plots}).  Possible commands are as follows.
@example
grid data = number
grid data += number
grid data -= number
grid data *= number
grid data /= number
grid data ^= number # take data to power 'number'
grid data _= number # take log base 'number'
@end example
@example
grid x = number
grid x += number
... others as in `grid data'
@end example
@example
grid y = number
grid y += number
... others as in `grid data'
@end example


@subsubsection Image data
@cindex image mathematical operations
@cindex mathematics, on images
Various commands let you alter image data (@pxref{Images}.).
Possible commands are as follows.
@example
image += number
image -= number
image *= number
image /= number
image ^= number # power
image _= number # logarithm
@end example

@subsubsection Image grayscale/colorscale
@cindex colorscale modification
@cindex grayscale modification
@cindex image grayscale/colorscale modification
@cindex mathematics, on image grayscale/colorscale
Various commands let you alter image data (@pxref{Images}.).
Possible commands are as follows.
@example
image grayscale += number
image grayscale  -= number
image grayscale  *= number
image grayscale  /= number
image grayscale  ^= number # power
image grayscale  _= number # logarithm
image colorscale += number
image colorscale  -= number
image colorscale  *= number
image colorscale  /= number
image colorscale  ^= number # power
image colorscale  _= number # logarithm
@end example

@subsubsection Variables
@cindex scalar operations
@cindex mathematics, on variables
Possible commands are:
@example
.variable. = number
.variable. += number
.variable. -= number
.variable. *= number
.variable. /= number
.variable. ^= number # power
.variable. _= number # logarithm
@end example


@c HTML <!-- newfile ReversePolishMath.html "Gri: Reverse Polish Mathematics" "Programming Gri" -->

@node   rpn Mathematics, Stack Operators, Mathematics, Programming
@comment  node-name,  next,  previous,  up
@section Built-in rpn Calculator
@cindex examples of @code{rpn} mathematics
@cindex @code{rpn} mathematics, examples
@cindex mathematics, @code{rpn} notation, description
Gri can do simple mathematics on numbers.  The syntax is reverse-polish
notation (@code{rpn}), which is used in some calculators.  Most users
can learn rpn in a few minutes, so don't worry if you don't know RPN
yet.

@emph{syntax} rpn expressions can be used anywhere Gri expects a number.
RPN expressions start with a opening curly brace (@code{@{}) which is
immediately followed by the word @code{rpn}.  rpn expressions end with a
closing curly brace (@code{@}}).  Instead of @code{set x size 10} you
could write @code{set x size @{rpn 20 2 /@}}, where the expression
@code{@{rpn 20 2 /@}} tells Gri to insert the number 20 onto a stack,
then insert the number 2 above it on the stack, and then divide the top
two items on the stack.  The following are equivalent:
@example
set x size @{rpn 20 2 /@}           # 10 = 20/2
set x size @{rpn 30 2 / 5 -@}       # 10 = (30/2-5)
set x size @{rpn pi 3.1415 / 10 *@} # 10 = 10*pi/pi
@end example

RPN operations can be divided roughly into the following groups.

@menu
* Stack Operators::             Operate on the rpn stack
* Rpn Function::                Define a new rpn operator
* rpn Constants::               Pi, e, etc
* Existence of Item::           Does a file/variable/synonym exist?
* Binary Operators::            Act on top two items on stack
* Unary Operators::             Act on top item on stack
* Manipulation of Columns etc:: Act on data columns
* rpn Examples::                A few examples
@end menu

@node   Stack Operators, Rpn Function, rpn Mathematics, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection Stack Operators
@cindex @code{pop} rpn stack operator
@cindex rpn stack operator @code{pop}
@cindex @code{dup} rpn stack operator
@cindex rpn stack operator @code{dup}
@cindex @code{exch} rpn stack operator
@cindex rpn stack operator @code{exch}
@cindex @code{roll_left} rpn stack operator
@cindex rpn stack operator @code{roll_left}
@cindex @code{roll_right} rpn stack operator
@cindex rpn stack operator @code{roll_right}
@cindex @code{pstack} rpn stack operator
@cindex rpn stack operator @code{pstack}

Stack operators manipulate or display the stack.  @code{pop} removes the
top item from the stack, @code{dup} duplicates the top item on the
stack, @code{exch} reorders the top two items on the stack,
@code{pstack} prints the items on the stack (without changing the
stack), @code{roll_right} rolls the items to the right and
@code{roll_left} rolls the items to the left, e.g.
@example
# following yields [4 1 2 3] on the stack
@{rpn 1 2 3 4 roll_right pstack@}
@end example

@node   Rpn Function, rpn Constants, Stack Operators, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection Rpn function Operators
@code{rpnfunction} operators are user-defined operators.  The parser
replaces any such operator with the user-defined rpn expression.  The
@code{rpnfunction} operators are both general and powerful.  An
@code{rpnfunction} may be composed of any legal primitive rpn constructs
or even other legal @code{rpnfunction} constructs.  For details,
@xref{Rpnfunction}.


@node   rpn Constants, Existence of Item, Rpn Function, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection rpn constants

@cindex @file{gri.cmd} file, rpnfunctions within
@cindex constants known to @code{rpn}
Gri knows the values @code{pi} = 3.141@dots{},
@code{e} = 2.718@dots{}.  These are defined near the end of the startup
file @file{gri.cmd} as @code{rpnfunction} commands @xref{Rpnfunction}.
To add more builtin constants, follow the same @code{rpnfunction}
procedure.


@node   Existence of Item, Binary Operators, rpn Constants, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection Testing for Existence of Files, Variables, and Synonym
@cindex existence of a given variable, testing
@cindex existence of a given synonym, testing
@cindex testing for existence of a given variable
@cindex testing for existence of a given synonym
@cindex variables, checking for existence of
@cindex synonyms, checking for existence of
@cindex @code{defined} rpn operator 
The @code{defined} operator checks whether synonyms
or variables are defined, e.g.
@example
.var_exists. = @{rpn ".var." defined@}
.syn_exists. = @{rpn "\\syn" defined@}
@end example
@noindent Note the double-backslash used in the synonym case, which is
required to prevent Gri from substituting the synonym value into the string.

@cindex operating system, checking file status
@cindex files, testing for existence of
@cindex existence of a data file, testing for
@cindex testing for existence of a data file
To test for the existence of files, use the operating system, e.g.,
testing for existence of unix file called @file{A}:
@example
.file_exists. = @{rpn \
    "test -r A && echo 1 || echo 0" system
    "1" ==@}
@end example
Another way to do this is
@example
\file_exists = "\$(test -r A && echo 1 || echo 0)"
@end example



@node   Binary Operators, Unary Operators, Existence of Item, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection Binary Operators

@cindex binary operators in rpn expressions
@cindex logical operators in rpn expressions
@cindex comparison operators in rpn expressions
@cindex @code{<} comparison operator in rpn expressions
@cindex @code{>} comparison operator in rpn expressions
@cindex @code{==} comparison operator in rpn expressions
@cindex @code{+} and other mathematical operators in rpn expressions
@cindex mathematical operators in rpn expressions
@cindex conversion between user and page units
@cindex page units, converting to user units
@cindex user units, converting to page units
@cindex larger of two numbers, rpn operator @code{sup} 
@cindex smaller of two numbers, rpn operator @code{inf}
@cindex rpn operator @code{sup} 
@cindex rpn operator @code{inf}
@cindex @code{sup} rpn operator
@cindex @code{inf} rpn operator

Binary operators act on the top two items on the stack.  With most
binary operators, the result is to replace these two items with a single
new item.  For example, @code{@{rpn 1 2 /@}} yields 0.5.

@cindex @code{xyusertocm} rpn operator
@cindex @code{xycmtouser} rpn operator
Some binary operators replace the top two items with two new items.
Examples are the pairwise conversion operators @code{xyusertocm} and
@code{xycmtouser}.

List of binary operators:
@cindex @code{+} rpn operator
@cindex rpn operator @code{+}
@code{+},
@cindex @code{-} rpn operator
@cindex rpn operator @code{-}
@code{-},
@cindex @code{*} rpn operator
@cindex rpn operator @code{*}
@code{*},
@cindex @code{/} rpn operator
@cindex rpn operator @code{/}
@code{/},
@cindex @code{<} rpn operator
@cindex rpn operator @code{<}
@code{<} (e.g., @code{1 2 <} yields 0 since 2 is not less than 1),
@cindex @code{<=} rpn operator
@cindex rpn operator @code{<=}
@code{<=},
@cindex @code{>} rpn operator
@cindex rpn operator @code{>}
@code{>}, (e.g., @code{0 10 >} yields 1 since 10 is greater than 0),
@cindex @code{>=} rpn operator
@cindex rpn operator @code{>=}
@code{>=},
@cindex @code{==} rpn operator
@cindex rpn operator @code{==}
@code{==},
@cindex @code{&} rpn operator
@cindex rpn operator @code{&}
@code{&},
@cindex @code{|} rpn operator
@cindex rpn operator @code{|}
@code{|},
@cindex @code{power} rpn operator
@cindex rpn operator @code{power}
@code{power} (e.g., @code{2 3 power} yields 8),
@cindex @code{exch} rpn operator
@cindex rpn operator @code{exch}
@code{exch} (exchange two items on top of stack),
@cindex @code{strcat} rpn operator
@cindex rpn operator @code{strcat}
@code{strcat} (add top string to end of string before it, then delete top string),
@cindex @code{=} rpn operator
@cindex rpn operator @code{=}
@code{=} (assign string value to synonym or numerical value to variable; see example below),
@cindex @code{sup} rpn operator
@cindex rpn operator @code{sup}
@code{sup} picks the larger of two values on stack,
@cindex @code{inf} rpn operator
@cindex rpn operator @code{inf}
@code{inf} picks the smaller of two values on the stack,
@cindex @code{remainder} rpn operator
@cindex rpn operator @code{remainder}
@code{remainder} yields the remainder from division of two values on the
stack, using the C-language subroutine @code{fmod}, which is similar to
@code{mod} in fortran.  See the manuals on these functions, and the
examples below, for details on sign of the result compared to the two
input numbers.

Notes:
@itemize @bullet
@item
@cindex string comparison
@cindex comparing strings
@cindex rpn, string manipulation
@cindex string manipulation in RPN
String comparison operators are done with the operators @code{==}
and @code{!=}, as in the example below (@pxref{About Synonyms}).
@example
if @{rpn "\item" "S" ==@}
    show "The item is 'S'"
end if
@end example
@item
@cindex synonyms, assigning inside rpn statements
@cindex variables, assigning inside rpn statements
@cindex rpn statements, assigning to synonyms and variables within
Assignment to variables and synonyms:
@example
# Variable assignment.  Note that the '=' operator
# removes the last two items from the stack, so
# this whole line translates to a blank line,
# which gri then ignores.
@{rpn 2 pi * ".two_pi." =@}

# String assignment; note double quote needed,
# so Gri won't try to substitute for an
# existing synonym.
@{rpn "Hi there" "\\politeness" =@}
@end example
@end itemize


@node   Unary Operators, Manipulation of Columns etc, Binary Operators, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection Unary Operators

@cindex random numbers, generating in RPN expressions
First, an operation that does not require even a single item on the
stack: random number generation.  Random numbers are given by
@code{rand}.


@cindex mathematical operations
Unary operators replace the last item on the stack with another item.
For example, the @code{sin} operator takes the sine of the number on the
top of the stack; e.g., @code{@{rpn 45 sin@}} yields sin of 45 degrees.

@cindex rpn, system calls
@cindex rpn, conversion of string to number
@cindex system calls in rpn expressions
@cindex string, conversion to number in rpn expressions
@cindex conversion, string to number, in rpn expressions
@cindex checking for missing value in rpn expressions
@cindex missing value, checking for in rpn  expressions

List of unary operators:

@cindex @code{ismissing} rpn operator
@cindex rpn operator @code{ismissing}
@code{ismissing} (=1 if value is current missing value, 0 otherwise),
@cindex @code{abs} rpn operator
@cindex rpn operator @code{abs}
@code{abs},
@cindex @code{atof} rpn operator
@cindex rpn operator @code{atof}
@code{atof} (converts string to number),
@cindex @code{!} rpn operator
@cindex rpn operator @code{!}
@code{!},
@cindex @code{acosh} rpn operator
@cindex rpn operator @code{acosh}
@code{acosh},
@cindex @code{asinh} rpn operator
@cindex rpn operator @code{asinh}
@code{asinh},
@cindex @code{atanh} rpn operator
@cindex rpn operator @code{atanh}
@code{atanh},
@cindex @code{acos} rpn operator
@cindex rpn operator @code{acos}
@code{acos},
@cindex @code{asin} rpn operator
@cindex rpn operator @code{asin}
@code{asin},
@cindex @code{atan} rpn operator
@cindex rpn operator @code{atan}
@code{atan},
@cindex @code{sin} rpn operator
@cindex rpn operator @code{sin}
@code{sin},
@cindex @code{cos} rpn operator
@cindex rpn operator @code{cos}
@code{cos},
@cindex @code{tan} rpn operator
@cindex rpn operator @code{tan}
@code{tan},
@cindex @code{cosh} rpn operator
@cindex rpn operator @code{cosh}
@code{cosh},
@cindex @code{sinh} rpn operator
@cindex rpn operator @code{sinh}
@code{sinh},
@cindex @code{tanh} rpn operator
@cindex rpn operator @code{tanh}
@code{tanh},
@cindex @code{sqrt} rpn operator
@cindex rpn operator @code{sqrt}
@code{sqrt},
@cindex @code{system} rpn operator
@cindex rpn operator @code{system}
@code{system} (replaces string with output when that string is fed to the operating system),
@cindex @code{log} rpn operator
@cindex rpn operator @code{log}
@code{log},
@cindex @code{ln} rpn operator
@cindex rpn operator @code{ln}
@code{ln},
@cindex @code{exp} rpn operator
@cindex rpn operator @code{exp}
@code{exp},
@cindex @code{exp10} rpn operator
@cindex rpn operator @code{exp10}
@code{exp10},
@cindex @code{ceil} rpn operator
@cindex rpn operator @code{ceil}
@code{ceil},
@cindex @code{floor} rpn operator
@cindex rpn operator @code{floor}
@code{floor},
@cindex @code{cmtopt} rpn operator
@cindex rpn operator @code{cmtopt}
@code{cmtopt},
@cindex @code{pttocm} rpn operator
@cindex rpn operator @code{pttocm}
@code{pttocm},
@cindex @code{xusertocm} rpn operator
@cindex rpn operator @code{xusertocm}
@code{xusertocm},
@cindex @code{yusertocm} rpn operator
@cindex rpn operator @code{yusertocm}
@code{yusertocm},
@cindex @code{xcmtouser} rpn operator
@cindex rpn operator @code{xcmtouser}
@code{xcmtouser},
@cindex @code{ycmtouser} rpn operator
@cindex rpn operator @code{ycmtouser}
@code{ycmtouser},
@cindex @code{width} rpn operator
@cindex rpn operator @code{width}
@code{width} (e.g., @code{"hi" width} yields the width of this string in cm),
@cindex @code{ascent} rpn operator
@cindex rpn operator @code{ascent}
@code{ascent} (e.g., @code{"hi" ascent} yields the ascent above the baseline in cm),
@cindex @code{directory_exists} rpn operator
@cindex file permissions, testing with @code{file_exists} and @code{directory_exists}
@cindex rpn operator @code{directory_exists}
@code{directory_exists} (e.g., @code{"/usr/bin" directory_exists} is 1
if the directory exists and is readable and executable.  ('Executable'
in unix parlance means that a user could @code{cd} into the directory.)
@cindex @code{file_exists} rpn operator
@cindex rpn operator @code{file_exists}
@code{file_exists} (e.g., @code{"~/.grirc" file_exists} is 1 if the file
exists and is readable.
@cindex @code{descent} rpn operator
@cindex rpn operator @code{descent}
@code{descent} (e.g.,m @code{"hi" descent} yields the descent below the baseline in cm),
@cindex @code{pop} rpn operator
@cindex rpn operator @code{pop}
@code{pop} (removes top item from stack),
@cindex @code{dup} rpn operator
@cindex rpn operator @code{dup}
@code{dup} (duplicates top item on stack).


@node   Manipulation of Columns etc, rpn Examples, Unary Operators, rpn Mathematics
@comment  node-name,  next,  previous,  up

@subsection Manipulation of Columns etc

@subsubsection Columns
@cindex column data, accessing individual values and stats
@cindex standard deviation, column data
@vindex @code{..num_col_data..}, number column data



Individual data in the @code{x}, @code{y}, @code{z}, @code{u}, @code{v}
and @code{weight} columns can be accessed with the @code{@@} operator.
The first point has index 0.  Examples:
@example
show "first x is " @{rpn x 0 @@ @}
show "last  x is " @{rpn x ..num_col_data.. 1 - @@ @}
show "and here are all the data:"
.i. = 0
while @{rpn .i. ..num_col_data.. >@}
    show @{rpn x .i. @@ @}
    .i. += 1
end while
@end example


@cindex maximum, column data
@cindex minimum, column data
@cindex column data: minimum, maximum, mean
The mean value is available from the @code{mean} operator (e.g.,
@code{.xmean. = @{rpn x mean @}}, while the standard deviation is given
by @code{stddev} and the minimal and maximal values are given by
@code{min} and @code{max}.

@cindex @code{area} rpn operator
@cindex rpn operator @code{area}
@cindex area under curve
The area under the curve y=y(x) is found by @code{@{rpn y x area @}},
defined by
@ifinfo
@code{0.5 * sum ( (y[i] + y[i-1]) * (x[i] - x[i-1]) )}
for @code{i} ranging from 1 to @code{..num_col_data..}-1.
@end ifinfo
@tex
${1}\over{2} \left( \sum_1^{n-1} (y_i + y_{i-1}) (x_i - x_{i-1}) \right)$
for data with $i$ ranging $0$--$..num\_col\_data..-1$
@end tex

@subsubsection Grid
@cindex grid data, accessing individual values and stats
@cindex maximum, grid data
@cindex minimum, grid data
@cindex grid data: minimum, maximum, mean

Grid data can be accessed with e.g. @code{@{rpn grid min @} },
@code{@{rpn grid max @} }, and @code{@{rpn grid mean @} }.

@cindex rpn operator @code{interpolate}
@cindex grid, interpolating to given (x,y) value
@cindex  interpolating grid to given (x,y) value
The value of the grid at a given @code{(.x.,.y.)} coordinate may be
found by by e.g. @code{@{rpn grid .x. .y. interpolate@}}.  The
interpolation scheme is the same as that used in converting grids to
images.


@node   rpn Examples, Text, Manipulation of Columns etc, rpn Mathematics
@comment  node-name,  next,  previous,  up
@subsection rpn Examples

Here are some reverse-polish expressions and the corresponding algebraic
interpretations:

@itemize @bullet
@item @code{@{rpn 1 2 + 10 / @}}
= (1+2)/10       
@item @code{@{rpn .a. .b. + .c. + .d. / @}}
= (.a.+.b.+.c.)/.d.
@item @code{@{rpn e 2 / @}}
= e/2 (Gri knows values of ``e'' and ``pi'')
@item @code{@{rpn 23 sin 100 * 12 cos + @}}
= cos(12) + 100sin(23)
@item @code{@{rpn 5 2 power @}}
= 25
@item @code{@{rpn 2 log exp @}}
= exp(log 2)
@item @code{@{rpn 2 ln exp10 @}}
= 10^ln2
@item @code{@{rpn 1.7 floor @}}
= 1 (rounds down to nearest integer.  Note that the floor of -1.7 is -2)
@item @code{@{rpn 10.1 2 remainder @}}
= 0.1 (remainder of 10.1 after division by 2; see C function @code{remainder(x,y)})
@item @code{@{rpn -10.1 2 remainder @}}
= -0.1
@item @code{@{rpn -10.1 -2 remainder @}}
= -0.1
@item @code{@{rpn .num. 10 > @}}
= 1 if 10 exceeds .num., or 0 otherwise
@end itemize

@noindent
NOTES:
@itemize @bullet
@cindex trigonometric operations in rpn math
@cindex mathematics, trigonometric operations
@item
The units of @code{sin}, @code{cos}, etc, are degrees, not radians.  
@item
@cindex page units
@cindex user units
@cindex mapping page location units to user units
@cindex transforming page location units to user units
@cindex scales, accessing
@cindex mathematics, rpn notation, example
The scales of the plot are accessible to @code{rpn}.  For example, with
the command
@example
draw label "hi" at 10 20
@end example
@noindent you draw the indicated string at the indicated location in
user coordinates.  To put it 0.15 centimetres to the right of this
location and 0.1 centimetres lower, you could do as follows:
@example
draw label "\label" at \
    @{rpn .x. xusertocm 0.15 + xcmtouser@} \
    @{rpn .y. yusertocm 0.10 - ycmtouser@}
@end example
(Note that the x and y scales have individual translations from "user"
to "cm" coordinates.)
@item
Some conversion factors are built into @code{rpn}; @code{cmtopt}
converts from centimetres to points (by dividing by 28.45; the
conversion factor to inches is 72.27) while @code{pttocm} converts from
points to centimetres.  For example, here is how to label a data curve
with a label placed near the last y-value of the data set:
@cindex drawing labels for data curves
@cindex labels, on data curves
@example
draw curve
.y. = @{rpn ..lasty.. yusertocm 0.5 - ycmtouser@}
draw label "Smoothed" at ..lastx.. .y.
@end example
@end itemize


@c HTML <!-- newfile Text.html "Gri: Text in Gri" "Programming Gri" -->

@node   Text, Embedded Synonyms, rpn Examples, Programming
@comment  node-name,  next,  previous,  up
@section Text Strings

Any text can be drawn in any size; Gri does not limit font size to a
list, e.g. 10 point, 12 points, etc.  Several fonts are available in
Gri, e.g. Times, Helvetica, etc.; these are all standard PostScript
fonts.  Support for some non-English languages (e.g. French) is also
provided.  And, finally, Gri supports inclusion of simple mathematical
expressions (Greek letters, superscripts, etc.) in text, using a
LaTeX-style syntax.

@menu
* Embedded Synonyms::           Embedding synonyms in text strings
* Mathematical Text::           Mathematical symbols and Greek letters
* Non-English Text::            French, etc.
* Adjustment Of Character Position:: thinspaces
@end menu


@node   Embedded Synonyms, Mathematical Text, Text, Text
@comment  node-name,  next,  previous,  up
@subsection Embedding synonyms in quoted text strings
@cindex synonyms, embedding in quoted text strings
@cindex text strings, embedding synonyms within
@emph{Outside} math strings, you can embed your synonyms at will.  For
example, you can include the name of a data file in the title of your
plot as follows
@cindex interaction with user, @code{query} command
@example
query \filename "File to read from?" ("data.file")
open \filename
read columns x y
draw curve
draw title "data from \filename"
@end example
Within math strings (ie, between matched dollar-signs), these synonyms
are disabled, and only the mathematical symbols and Greek letters work.


@node   Mathematical Text, Non-English Text, Embedded Synonyms, Text
@comment  node-name,  next,  previous,  up
@subsection Mathematical text

@subsubsection Subscripts
@cindex subscripts
@cindex text, subscripts
As in @TeX{} and La@TeX{}, you must be in math-mode to use subscripts;
in other words, you must enclose the string or substring in
dollar-signs.  For single-character subscripts, insert an underline
prior to the character to be subscripted:
@example
draw title "$a_2$"
@end example
@noindent
For multiple-character subscripts, insert braces before and after the
item to be subscripted:
@example
draw title "$a_@{22@}$"
@end example

@subsubsection Superscripts
@cindex superscripts
@cindex text, superscripts
As in @TeX{} and La@TeX{}, you must be in math-mode to use superscripts;
in other words, you must enclose the string or substring in
dollar-signs.  For single-character superscripts, insert a carat prior
to the character to be superscripted:
@example
draw title "$a^2$"
@end example
@noindent
For multiple-character superscripts, insert braces before and after the
item to be superscripted:
@example
draw title "$a^@{22@}$"
@end example

@subsubsection Mathematical symbols
@cindex mathematical Symbols
@cindex greek Letters
@cindex text, mathematical symbols
@cindex text, Greek letters
As in @TeX{} and LaTeX, you indicate mathematical symbols and Greek
letters with backslash sequences.  The following LaTeX symbols are
defined in math mode in Gri (cf tables in Lamport's section 3):

@ifinfo
@example
\Delta \Downarrow \Gamma \Im \Lambda \Leftarrow
\Leftrightarrow \Omega \Pi \Phi \Psi \Re
\Rightarrow \Sigma \Theta \Uparrow \Upsilon \Xi
\alpha \approx \ast \beta \bullet \chi \circ
\cong \delta \div \downarrow \epsilon \equiv
\eta \exists \forall \gamma \geq \gg \in \infty
\iota \kappa \lambda \langle \leftarrow
\leftrightarrow \leq \ll \mu \nabla \neq \nu
\omega \partial \phi \pi \pm \prod \propto \psi
\rangle \rho \rightarrow \sigma \sim \subset
\subseteq \sum \supset \supseteq \surd \sqrt
\tau \theta \times \uparrow \upsilon \varpi
\wedge \xi \zeta \vartheta \varsigma \varphi
\aleph \oplus \otimes \wp \prime \emptyset
\angle \neg \clubsuit \diamondsuit \spadesuit
\cdot \lfloor \lceil \rceil \rfloor
@end example
@end ifinfo

@tex
({\tt $\backslash$Delta}, $\Delta$),
({\tt $\backslash$Downarrow}, $\Downarrow$),
({\tt $\backslash$Gamma}, $\Gamma$),
({\tt $\backslash$Im}, $\Im$),
({\tt $\backslash$Lambda}, $\Lambda$),
({\tt $\backslash$Leftarrow}, $\Leftarrow$),
({\tt $\backslash$Leftrightarrow}, $\Leftrightarrow$),
({\tt $\backslash$Omega}, $\Omega$),
({\tt $\backslash$Pi}, $\Phi$),
({\tt $\backslash$Pi}, $\Pi$),
({\tt $\backslash$Psi}, $\Psi$),
({\tt $\backslash$Re}, $\Re$),
({\tt $\backslash$Rightarrow}, $\Rightarrow$),
({\tt $\backslash$Sigma}, $\Sigma$),
({\tt $\backslash$Theta}, $\Theta$),
({\tt $\backslash$Uparrow}, $\Uparrow$),
({\tt $\backslash$Upsilon}, $\Upsilon$),
({\tt $\backslash$Xi}, $\Xi$),
({\tt $\backslash$alpha}, $\alpha$),
({\tt $\backslash$approx}, $\approx$),
({\tt $\backslash$ast}, $\ast$),
({\tt $\backslash$beta}, $\beta$),
({\tt $\backslash$bullet}, $\bullet$),
({\tt $\backslash$chi}, $\chi$),
({\tt $\backslash$circ}, $\circ$),
({\tt $\backslash$cong}, $\cong$),
({\tt $\backslash$delta}, $\delta$),
({\tt $\backslash$div}, $\div$),
({\tt $\backslash$downarrow}, $\downarrow$),
({\tt $\backslash$epsilon}, $\epsilon$),
({\tt $\backslash$equiv}, $\equiv$),
({\tt $\backslash$eta}, $\eta$),
({\tt $\backslash$exists}, $\exists$),
({\tt $\backslash$forall}, $\forall$),
({\tt $\backslash$gamma}, $\gamma$),
({\tt $\backslash$geq}, $\geq$),
({\tt $\backslash$gg}, $\gg$),
({\tt $\backslash$in}, $\in$),
({\tt $\backslash$int}, $\int$),
({\tt $\backslash$infty}, $\infty$),
({\tt $\backslash$iota}, $\iota$),
({\tt $\backslash$kappa}, $\kappa$),
({\tt $\backslash$lambda}, $\lambda$),
({\tt $\backslash$langle}, $\langle$),
({\tt $\backslash$leftarrow}, $\leftarrow$),
({\tt $\backslash$leftrightarrow}, $\leftrightarrow$),
({\tt $\backslash$leq}, $\leq$),
({\tt $\backslash$ll}, $\ll$),
({\tt $\backslash$mu}, $\mu$),
({\tt $\backslash$nabla}, $\nabla$),
({\tt $\backslash$neq}, $\neq$),
({\tt $\backslash$nu}, $\nu$),
({\tt $\backslash$omega}, $\omega$),
({\tt $\backslash$partial}, $\partial$),
({\tt $\backslash$pi}, $\phi$),
({\tt $\backslash$pi}, $\pi$),
({\tt $\backslash$pm}, $\pm$),
({\tt $\backslash$prod}, $\prod$),
({\tt $\backslash$propto}, $\propto$),
({\tt $\backslash$psi}, $\psi$),
({\tt $\backslash$rangle}, $\rangle$),
({\tt $\backslash$rho}, $\rho$),
({\tt $\backslash$rightarrow}, $\rightarrow$),
({\tt $\backslash$sigma}, $\sigma$),
({\tt $\backslash$sim}, $\sim$),
({\tt $\backslash$subset}, $\subset$),
({\tt $\backslash$subseteq}, $\subseteq$),
({\tt $\backslash$sum}, $\sum$),
({\tt $\backslash$supset}, $\supset$),
({\tt $\backslash$supseteq}, $\supseteq$),
({\tt $\backslash$surd}, $\surd$),
({\tt $\backslash$sqrt}, $\surd$),
({\tt $\backslash$tau}, $\tau$),
({\tt $\backslash$theta}, $\theta$),
({\tt $\backslash$times}, $\times$),
({\tt $\backslash$uparrow}, $\uparrow$),
({\tt $\backslash$upsilon}, $\upsilon$),
({\tt $\backslash$varpi}, $\varpi$),
({\tt $\backslash$wedge}, $\wedge$),
({\tt $\backslash$xi}, $\xi$),
({\tt $\backslash$zeta}, $\zeta$),
({\tt $\backslash$vartheta}, $\vartheta$),
({\tt $\backslash$varsigma}, $\varsigma$),
({\tt $\backslash$varphi}, $\varphi$),
({\tt $\backslash$aleph}, $\aleph$),
({\tt $\backslash$oplus}, $\oplus$),
({\tt $\backslash$otimes}, $\otimes$),
({\tt $\backslash$wp}, $\wp$),
({\tt $\backslash$prime}, $\prime$),
({\tt $\backslash$emptyset}, $\emptyset$),
({\tt $\backslash$angle}, $\angle$),
({\tt $\backslash$neg}, $\neg$),
({\tt $\backslash$clubsuit}, $\clubsuit$),
({\tt $\backslash$diamondsuit}, $\diamondsuit$),
({\tt $\backslash$spadesuit}, $\spadesuit$)
({\tt $\backslash$cdot}, $\cdot$)
({\tt $\backslash$lfloor}, $\lfloor$)
({\tt $\backslash$lceil}, $\lceil$)
({\tt $\backslash$rceil}, $\rceil$)
({\tt $\backslash$rfloor}, $\rfloor$)
@end tex

@c HTML <A HREF="./resources/math_symbols.gif">Click here</A> to see the 
@c HTML symbols and their names.

@noindent
For example, you might use these as follows:
@example
draw title "$\alpha$ = thermal expansion coefficient"
@end example

Sometimes you'll want a mathematical symbol to be adjacent to a normal
text string, with no space between.  You can do this by enclosing in
braces, as in LaTeX.

@cindex text, inserting forward/backward space
@cindex space in text
@cindex  superscripts and subscripts: how to align using @code{\!}
@cindex aligning superscripts and subscripts with @code{\!}

@TeX{} and La@TeX{} handle combinations of superscripts and subscripts
very cleanly, putting one above the other.  Presently, Gri does not do
this; for example @code{set x name "$A_1^2$"} will have the 2 appearing
to the right of the 1 instead of above it.  Proper positioning will be
added to a later version of Gri, but in the meantime you can achieve the
desired effect with the @TeX{} ``negative thinspace'' psuedo-character
in math-mode.  Using this feature will not hurt you when the new Gri
becomes available.  The symbol for a negative thinspace is @code{\!} in
math-mode.  It has no meaning in nonmath mode.  A thinspace is 1/6 of an
``em-space'' (a @TeX{} term, normally equal to the width of the
character ``M'' in the current font).  In most fonts, numbers are half
the width of the letter ``M'', so that 3 negative thinspaces will move
leftward over a single number.  Thus, if the example above becomes
@code{set x name "$A_1\!\!\!^2"}, the 2 will be positioned above the 1.
(Equivalently, you could write @code{set x name "$A^2\!\!_1$"}.)
Depending on the actual characters you have in the super/subscripts, you
might need more or less thinspaces; some experimentation might be
required.  Also, note that the symbol @code{\,} in math mode is a
positive thinspace (which moves the next character a little bit to the
right).  Thus, you can add a little extra spaces between characters by
doing something like @code{set x name "A$\,$B"}.

To get a hat over a single character, do something like the following
(which draws a hat over the character "h"):
@cindex hat, drawing hat on top of character
@example
draw label "h$@{\!\!\!^@{^\wedge@}@}$" at 10 12 cm
@end example

@cindex overbar, drawing line on top of character
@cindex latex overline command, emulating
@cindex overline, emulating latex command
To get an overbar on a rho, do this:
@example
draw label "$\rho\!\!\!\!^-$" at 3 3 cm
@end example



@node   Non-English Text, Adjustment Of Character Position, Mathematical Text, Text
@comment  node-name,  next,  previous,  up
@subsection Non-English characters

@cindex text, ISO characters
@cindex accented characters in text
@cindex non-English language text
@cindex French accents in text
Gri supports both English and other European-derived languages.  In
particular, it permits text with accents on letters.  (It does not
support other Oriental and other languages at this time.)  Gri uses the
ISO-Latin-1 font-encodings by default, although the so-called `standard'
font-encoding may also be selected with the @code{Set Font Encoding}
command @xref{Set Font Encoding}.  For more on font encodings see any
book on PostScript fonts ... although the bottom line is that if you are
using accented characters in your work, then you probably already know
about encodings, and if you don't use accents then you needn't learn
about this topic except for the pleasure of learning about other
languages.

The method of handling accented characters is very simple.  If you can
type it, Gri can draw it!  It's up to you to determine how to enter the
accents.  Most text editors permit this.  Since many users will prefer
the Emacs editor, a few words about that are in order.

Consider the task of inserting French text, with the Emacs
text-editor. There are several ways of doing this (and you may wish to
consult your emacs info manual).  A method that works in emacs-19 up to
current emacs-20 versions uses the emacs @file{iso-transl.el} package by
putting the following in your @file{~/.emacs} file:
@example
(require 'iso-transl)
(iso-transl-set-language "French")
(standard-display-european t)
@end example
Loading this package defines three ways of entering the non-ASCII
printable characters with codes above 127: the prefix @key{C-x 8}, or
the @key{Alt} key, or a dead accent key.  For example, you can enter
uppercase A-umlaut as @key{C-x 8 " A} or @key{Alt-" A} (if you have an
Alt key) or @key{umlaut A} (if you have an umlaut/diaeresis key).

A more recently introduced method is to enter the mode which allows
quick insertion of iso-latin-1 characters. Do the Emacs command 
@key{M-x iso-accents-mode} (either manually, or in a hook that's done
automatically). Now, suppose the x-axis is to represent temperature. All
you'd have to do is type in the command
@example
set x name "Temp'erature"
@end example
As you type, the quote mark will dissappear, and reappear as an accent
on the @code{e}.  And then, Gri will recognize this accented @code{e},
and it will draw the accent on the axis label.


@node   Adjustment Of Character Position, Adding New Commands, Non-English Text, Text
@comment  node-name,  next,  previous,  up
@subsection Adjustment Of Character Position
@cindex text, thin-spaces within
@cindex thin-space in text
Micro-positioning is available within math-mode, via the
symbols @code{\!} (which means go left one thin-space) and @code{\,}
(which means go right on thin-space).  (A thin-space is 1/6 the width of
the letter ``M'').

@c HTML <!-- newfile NewCommands1.html "Gri: Adding new commands" "Programming Gri" -->


@node   Adding New Commands, Parsing, Adjustment Of Character Position, Programming
@comment  node-name,  next,  previous,  up
@section Adding new commands to Gri
@cindex commands, how to add new ones to Gri
@cindex new commands, how to add to Gri
@cindex adding new commands to Gri
@cindex extending Gri by adding new commands
Gri can be extended easily.  Primitive commands (e.g. @code{set x name})
can be supplemented with so-called "new commands."  New commands are a
little like subroutines other programming languages.  For example, you
might find that you often draw filled curves with a particular graylevel
(say 0.5), and then return the graylevel to the previous value.  This
requires you to do the following each time:
@example
new .old_graylevel.
.old_graylevel. = ..graylevel..
set graylevel 0.5
draw curve filled to 0 y
set graylevel .old_graylevel.
delete .old_graylevel.
@end example

@noindent
This gets a bit tedious, and it would obviously be nicer to just say
something like
@example
Draw my kinda curve
@end example

To make this shortcut, you'd tell Gri about the existence of a new
command called @code{Draw my kinda curve}, and tell it that the new
command can be accomplished by the longer code fragment written above.

Once you've learned how to make new commands, you are likely to use them
a lot.  The following explains how you add new commands.  For advice on
programming style, etc, @pxref{Resource File}.

@menu
* Parsing::                     How Gri parses commands
* Simple New Command::          Simple example of adding new command
* Complicated New Command::     More complicated example
@end menu

@node   Parsing, Simple New Command, Adding New Commands, Adding New Commands
@comment  node-name,  next,  previous,  up
@subsection How Gri parses commands
@cindex new commands, how they are parsed
Whenever Gri reads a command line, it compares it with its list of
commands.  This list is searched in this order: (1) the universal
@file{gri.cmd} file @xref{Options On Command Line}, (2) your resource
file @pxref{Resource File}, if it exists, and then (3) your command
file itself.  Gri stops searching when it finds a Gri command that
matches the command line.  "Matching" means that the command line is
identical in all words in a Gri command, scanning from the left, until
it encounters a word containing
@itemize @bullet
@item
A quote (e.g. @code{"string"})
@item
A synonym name (e.g. @code{\file})
@item
A variable name (e.g. @code{.number.})
@item
An opening square bracket (e.g. @code{[option]})
@item
An opening brace (e.g.  @code{@{a|b@}})
@item
An choice between two items (e.g.  @code{first|second})
@end itemize

When Gri finds a command that matches your command line, it assumes that
this is the intended command, and searches no further.  This means that
you must be careful not to have your command hidden by other commands.
For example, if your resource file contained these lines, Gri would
@emph{never} execute the second new command, because calls to it match
the first command.  To avoid this, you may either reverse the order of
the definitions, so that Gri will find the proper routine, or rename one
of the routines.
@example
`Draw foo'
Draw a foo.
@{
  show "drawing a foo"
@}
`Draw foo bar'
Draw a foo bar.
@{
  show "drawing a foo bar"
@}
@end example

Gri searches the @file{gri.cmd} file first, so any new command that you
create that clash with built-in commands will be ignored by Gri
@xref{Options On Command Line}.  Gri will warn you of this, and proceed,
ignoring your newer definition.  To get around this, use capital letters
to begin the words of your new command.  By convention, Gri never uses
capital letters in this way, so a clash is impossible (except with any
similar command you might have defined previously, such as in your
@file{~/.grirc} file).

@node   Simple New Command, Complicated New Command, Parsing, Adding New Commands
@comment node-name,  next,  previous,  up
@subsection Simple example of creating new command
@cindex new commands, simple example
To make a new command called @code{Show The Time} insert the following
into your @file{~/.grirc} resource file or into your command-file
somewhere near the top, or at least before you use the command.
@example
`Show The Time'
New command to show the time of day.
@{
  show "\.time."
@}
@end example
@noindent
EXPLANATION:
@itemize @bullet
@item 
The name of the new command is enclosed in angled single-quote marks.
The words of the new command should begin with upper-case letters to
prevent a name clash with a present or future built-in Gri command.
@emph{Formatting convention:} Make sure that the entire definition
string, from the opening angled quote to the ending angled quote,
appears on one line.  Otherwise Gri will give an error like
@example
ERROR: Can't extract syntax for new command
@end example
@item
Following the name line, you may optionally insert any number of lines
which will become the @code{help} information for the new command.  See
the file @file{gri.cmd} for the recommended stylistic conventions in
writing help information @xref{Options On Command Line}.
@item
Following the help lines, if they exist, the body of the new command is
given, sandwiched between a starting line containing an opening brace
(@code{@{}) as the @emph{only} nonwhite character, and an ending line
containing a closing brace (@code{@}}) as the only nonwhite character.
Any valid Gri commands may be used in the body of the new command.  It
is acceptable to use other new commands in the body. Recursion is also
allowed -- a new command is allowed to call itself (although there is a
limit on nesting, of perhaps a thousand or so; this varies with the
version of Gri).  @emph{Formatting convention:} It is usual, but not
necessary, to use an indentation level of 2 spaces in the body of the
new command.
@end itemize
@noindent
The new command is invoked by @code{Show The Time}.  Help for the
command is found by @code{help Show The Time} or @code{help Show}.


@node   Complicated New Command, Hints, Simple New Command, Adding New Commands
@comment node-name,  next,  previous,  up
@subsection Complicated example of creating new command
@cindex extending Gri by adding new commands, complicated example
@cindex adding new commands, complicated example
@cindex new commands, complicated example
The following example from the global @file{gri.cmd} file illustrates
how to parse/check the commandline (@pxref{Local Synonyms}), which is a
good practice in any code you expect to re-use.  The first @code{if}
statement checks that the word @code{at} is in the right place (this
would not have been checked by the syntax matcher, the word having
followed a string).  The presence of the keyword @code{cm} is checked
for, and user units or cm units are used accordingly.  Local variables
are created (@code{new}) and then destroyed (@code{delete}) so that
this new command cannot affect outside code.

@example
`draw label whiteunder "\string" at .ll_x. .ll_y. [cm]'
Draw label for plot, located with lower-left corner
at indicated (x,y) position (specified in user
units or in cm on the page).  Whiteout is used
to clean up the area under the label.  BUGS:
Cannot handle angled text; doesn't check for
super/subscripts.
@{
    if @{rpn "\.word4." "at" !=@}
      show "ERROR 5th word must be `at', not `\.word4.'"
      show traceback
      quit
    end if 
    new .x. .y. .oldgray. .space.
    if @{rpn \.words. 7 ==@}
      .x. = @{rpn \.word5. xusertocm@}
      .y. = @{rpn \.word6. yusertocm@}
    else if @{rpn \.words. 8 ==@}
      if @{rpn "\.word7." "cm" !=@}
        show "ERROR: Require 7th word to be `cm'"
        show traceback
        quit
      end if
      .x. = \.word5.
      .y. = \.word6.
    else
      show "ERROR: Require 7 or 8 words, not \.words."
      show traceback
      quit
    end if
    # Coordinates now in cm.  Next, white out a box
    # under the text (and .space. centimetres
    # beyond text), then draw label.
    .space. = 0.1               # Space of 1mm
    .oldgray. = ..graylevel..
    set graylevel white
    draw box filled                            \
      @{rpn .x. .space. -@}                    \
      @{rpn .y. .space. -@}                    \
      @{rpn .x. "\.word3." width + .space. +@} \
      @{rpn .y. "M" ascent + .space. + @} cm
    set graylevel .oldgray.
    draw label "\.word3." at .x. .y. cm
    delete .x. .y. .oldgray. .space.
@}
@end example


@c HTML <!-- newfile Hints.html "Gri: Hints for Gri programming" "Programming Gri" -->

@node   Hints, Debugging, Complicated New Command, Programming
@comment  node-name,  next,  previous,  up
@section Hints for Gri Programming
@cindex hints

Here are some hints for good Gri programs:

@itemize @bullet
@item
Whenever working with grids (for contouring) or images, make use of the
@code{show grid} or @code{show image} commands.  They will give you
useful information about the statistics (min/max/histogram) of the items. 
@item
Use the operating system, not Gri, to manipulate your data.  For
example, if you have a file whose first column is x times 100, and third
is the arcsin of y, you could do:
@example
open "gawk '@{print $1/100, sin($3)@}' |"
read columns x y
@end example

If you have x and y in a non-decimal geographical format
(e.g. hour.minute-second format), use the operating system to convert
for you @xref{Open}.
@item
Use the @code{pstack} operator liberally in your rpn expressions
@xref{rpn Mathematics}.
@item
While developing programs, put a @code{show columns statistics} command
after every @code{read column} command, to check that the data have been
read correctly.
@item
Development time can be minimized by limiting the number of data being
processed.  For example, in a multi-panel plot, it is often necessary to
try various alternatives before aesthetic scales and page layout is
achieved.  The process can be speeded up by limiting the number of data
being processed, as shown below.  (If Gri finds fewer data in the file
than specified, it will simply use the data that it found; so when the
program works, just change @code{.n.} into something large.)
@example
.n. = 100 # 10000 for later
...
# Panel 1
read columns .n. x y
...
# Panel 2
read columns .n. x y
...
@end example
@item
Creat new commands to do repetitive work.
@item
Use @code{draw time stamp} on all plots except for publication versions:
@example
if !..publication..
  draw time stamp
end if
@end example
@item
For multiple panels on one page, do @code{delete x|y scale} before each
new panel, so you will start afresh.  Clearly identify panels with
comments.  This reduces errors you might get if you shuffle things
later.
@item
Use the @code{..num_col_data..} built-in variable to see how many data
have passed the @code{set input data window} data window in the last
@code{read columns} command.  The following example shows how to
optionally draw a curve
@example
open \f
read columns x y
close
if ..num_col_data..
  draw curve
  draw label "\f" at \
      @{rpn ..lastx.. xusertocm 0.5@} \
      @{rpn ..lasty.. yusertocm 0.2@} cm
end if
@end example

@cindex hint, using @code{query} to interact with user
@item
Use synonyms and @code{query} for filenames.  This makes programs much
more flexible.  Note that you can string synonyms together:
@example
\dir = "~/EOS/iso0/"
query \file "Give file in directory \dir" ("1.dat")
open \dir/\file
@end example

It is also a good idea to give a restrictive list of possibilities in
your @code{query} command, to avoid complicated @code{if} loops later
@xref{Query}.
@item
Use multiple @code{draw title} commands:
@example
draw title "Atlantic water entering Arctic Ocean"
draw title "\.command_file. \.time."
@end example
@end itemize


@c HTML <!-- newfile Debugging.html "Gri: Debugging Gri programs" "Programming Gri" -->

@node   Debugging, Error Messages, Hints, Programming
@comment  node-name,  next,  previous,  up
@section Debugging Gri Programs
@cindex debugging Gri programs
@cindex problems and how to cope with them
Here are some hints for debugging Gri programs:
@itemize @bullet
@item
If no data appear on an xy plot, insert @code{show columns statistics}
or @code{show columns} after the @code{read columns} command.  It may be
that you have fixed your axes, and that the axes frame does not include
the data.
@item
@cindex tracing execution, using @code{..trace..}
If you get an error message, rerun your Gri program using the
@code{-trace} command-line option, to see which line is causing the
problem.  This often reveals logic errors (e.g. in (@code{if}
statements).  You may also turn tracing on or off at any point in your
Gri program by setting the built-in variable @code{..trace..} to 1 or 0.
Many Gri users have the Gri command aliased to be in trace mode by
default. 
@item
If Gri complains of a syntax error, consult the printed manual, one of
the online manuals, or the online help facility @xref{Online Help}.
@item
Check the version number (printed at startup) to see if a new version of
Gri has been installed, and check the manual for known incompatabilities.
@item
Sprinkle @code{show} commands throughout your program, to see what's
happening.  Even when you are sure your program works, it is a good idea
to embed @code{show} statements so are they executed if the
@code{-debug} flag is set:
@example
if ..debug..
  show "X=" .x. "and label is `\label'"
end if
@end example
@item 
If your your @code{draw} commands don't draw anything, check to see
whether you've fooled yourself by enforcing an improper scaling; remove
explict scaling (@code{set x axis ...}), clipping @code{set clip}, data
selection windows (@code{set input data window x|y}) and missing values
(@code{set missing value}).  Another trick is to read only a portion of
the data set (@code{read columns 10 x y}) and then print out all the
values (@code{show columns}).
@end itemize

If you determine that the bug is in Gri, not in your program, please
report the bug, so that other users will not have the same hassle;
@xref{Bugs}.



@c HTML <!-- newfile ErrorMessages.html "Gri: error messages" "Programming Gri" -->
@node   Error Messages, General Issues, Debugging, Programming
@comment  node-name,  next,  previous,  up
@section Error Messages
@cindex error messages
Gri error messages are in three types:
@enumerate
@item
Operating system error messages, such as @code{segmentation fault}.
These should never appear, and indicate a bug in Gri.  Please report
these to the author @xref{Reporting Bugs}.
@item
Internal Gri error messages.  The message starts with the words
@code{FATAL error}, and quote a file number and a line number, e.g.
@example
FATAL error: startup.c:199: ...
@end example
@noindent
Such errors indicate either a deficiency in your computer (e.g.
insufficient storage space) or an internal bug in Gri.  If the message
does not indicate running out of storage, please report the error to the
author @xref{Reporting Bugs}.

For fatal error messages on a unix system, Gri dumps core, unless you
have turned that feature off, with the @code{ulimit -c 0} unix command
in a startup file.  This creates a file called @file{core}, which can
help you in diagnosing the Gri bug.  If you have the @code{gdb}
debugger, just type @code{gdb gri core} and then type @code{where} to
get a traceback stack.  Please email this with your other information
about the Gri bug.
@item
An indication that your commandfile is flawed, either in syntax or in
meaning.  These messages end with a line indicating the offending line
in your commandfile, e.g. the command @code{set x axis 0 1 -1} yields:
@example
ERROR: `set x axis .left. .right. .incBig.'
        has .incBig. of wrong sign
 Bad command:  `set x axis 0 1 -1 '
@end example
@noindent
Normally, such error messages do not indicate a flaw in Gri, but rather
in your reasoning, so report them to the author only if you are very
sure that a Gri bug must underly them.
@end enumerate



@c HTML <!-- newfile GeneralIssues.html "Gri: general issues" "General Issues" -->

@node   General Issues, Missing Values, Error Messages, Top
@comment  node-name,  next,  previous,  up
@chapter General Issues
@menu
* Missing Values::              Missing value code
* Axes::                        How to control them
* Color::                       Controlling the pen color
* Interaction::                 Talking with user
* Operating System::            Using Gri in OS and OS in Gri
* Library Files::               Storing gri files for easy access
* Resource File::               Personalizing Gri
* Defaults::                    How Gri normally acts
@end menu




@node   Missing Values, Axes, General Issues, General Issues
@comment  node-name,  next,  previous,  up
@section Missing data
@cindex data, missing values
@cindex missing value code
@cindex NaN for missing value code
@vindex @code{..missingvalue..}, value for missing data
Most Gri commands will ignore data equal to a "missing value."
For example, @code{draw curve} connects only points which are not equal
(to within 0.01 percent) of the missing value.  The curve has holes at
missing data.  Initially the missing-value is set to 1.0e22.  You may
alter this value with @code{set missing value .value.}.  
The built-in variable @code{..missingvalue..} stores the current value
of the missing-value.

Additionally, Gri will ignore anything it reads that is equal to the
string @code{NaN} or @code{Inf}.  These are produced by matlab, C, and
other programs when dividing by zero, etc.

Gri ignores mathematical operations on data items which are equal to the
missing value.  Thus, for example, if you missing value is -99 then the
command @code{x += 1} will not change the values equal to -99 to -98,
since this would have the side-effect of making the data no longer be
considered missing.


@node   Axes, Autoscaling, Missing Values, General Issues
@comment  node-name,  next,  previous,  up
@section Axes and How to Control Them
@menu
* Autoscaling::                 Gri automatically scales and draws axes
* Log And Linear::              Selecting log/linar axes
* Length::                      Adjusting axis length
* Range::                       Adjusting axis range
* Labels::                      Adjusting labels on axes
* Position::                    Positioning the axes
@end menu

@node   Autoscaling, Log And Linear, Axes, Axes
@comment  node-name,  next,  previous,  up
@subsection Autoscaling of Axes
@cindex axes, and mathematical operations on columns
@cindex axes, autoscaling of
@vindex @code{..xlast..}, last drawn x value
@vindex @code{..ylast..}, last drawn y value
@vindex @code{..xmargin..}, left margin
@vindex @code{..ymargin..}, bottom margin
@vindex @code{..xsize..}, x-axis length
@vindex @code{..ysize..}, y-axis length
@vindex @code{..xleft..}, x value at left of plot
@vindex @code{..xright..}, x value at right of plot
@vindex @code{..ybottom..}, y value at bottom of plot
@vindex @code{..ytop..}, y value at top of plot
Gri normally assumes that you are plotting scientific graphs, and
therefore whenever it sees a command like @code{draw curve} or
@code{draw symbol}, it draws an appropriate axis first.  You can turn
this feature off, by using @code{draw axes none} before the other
@code{draw} command.

Furthermore, Gri picks axis scales by itself, by scanning the (@code{x},
@code{y}) columns.  If you don't like the scales Gri picks, you can
override them (@pxref{Range}).

Gri normally draws axes labelled at left and bottom, and with an axis
frame with tics all around.  If you don't like this default axis style
you can specify other styles.  For example, if the commands 
@code{draw x axis} and @code{draw y axis} are placed before the @code{draw curve}
command, Gri will realize you've already specified axes, and just draw
them on the left and bottom sides of the box, without completing the
axis frame.

For your general use, Gri stores the minimum and maximum x and y values
of the @emph{axes} in the variables @code{..xleft..}, @code{..xright..},
@code{..ybottom..}, and @code{..ytop..}; for the minimum and maximum
values of the @emph{data}, use the built-in rpnfunctions @code{min},
@code{max}, and @code{mean}.  (@pxref{Rpnfunction}).  It stores the last
(x,y) pair on a curve (whether data or axis) as
(@code{..xlast..},@code{..ylast..}).  Also, Gri stores the axis sizes in
@code{..xsize..} and @code{..ysize..}.  It stores the space to the left
of the plot in @code{..xmargin..} and the space below the plot in
@code{..ymargin..}.

The axis scales are @emph{not} changed by mathematical operations on the
columns, regardless of whether the scales were set manually (by a
@code{set x|y axis} command), or by Gri (during a @code{read columns}
command).  In the former case, this is what you probably want, but in
the latter case it can lead to graphs with no data, because the scale
does not apply to the transformed data.  This might be considered a bug;
in any case, you can avoid it by transforming the built-in variables
@code{..xleft..} and @code{..xright..} whenever you transform the x
column, and @code{..ybottom..} and @code{..ytop..} whenever you
transform the y column.


@node   Log And Linear, Length, Autoscaling, Axes
@comment  node-name,  next,  previous,  up
@subsection Logarithmic and linear axes
@cindex logarithmic axes
@cindex axes, logarithmic
@cindex linear axes
@cindex axes, linear
Axes are linear by default; to make logarithmic axes, use commands
@code{set x type log} and @code{set y type log}.



@node   Length, Range, Log And Linear, Axes
@comment  node-name,  next,  previous,  up
@subsection Length
@cindex length of axes
@cindex axes, length of
@cindex data files, protecting against movement of
The axes are normally 10 centimetres long.  To set the axis lengths (in
centimetres), use commands like @code{set x size 5} and 
@code{set y size 7}.  Some people like the ratio of axes to be in the
so-called golden ratio @code{(root(5)-1)/2}; to get that, you could do
this: 
@cindex axis sizes, scaled with golden ratio
@cindex golden ratio, used for axes sizes
@example
set x size 15
set y size @{rpn ..xsize.. 5 0.5 power 1 - 2 / *@}
@end example

@cindex scaling for maps
@cindex maps, scaling
For maps, you'll want the plot scaled so that shapes retain their aspect
ratio.  To do this, do @code{set x size .cm.} and then do 
@code{resize y for maps} (or vice versa).

@node   Range, Labels, Length, Axes
@comment  node-name,  next,  previous,  up
@subsection Range
@cindex axes, range of values on
@cindex range of axes
To override axis ranges set by Gri, use @code{set x axis} and 
@code{set y axis}.  With these commands, you specify the range of the axes; you
may also set the interval for numbered tics, and an interval for
unnumbered tics.  The unnumbered tics must be at an interval that
divides evenly into the numbered tic interval, but the numbered tic
interval need not divide into the min/max range.  Thus, 
@code{set x axis 0 1.1 0.5} will create an axis that will range from 0 to 1.1, with
labelled tics at the values 0, 0.5 and 1.

@node   Labels, Position, Range, Axes
@comment  node-name,  next,  previous,  up
@subsection Labels
@cindex labels, on axes
@cindex axes, labels for
To set the name of the x axis, use @code{set x name "string"}, and
similarly for the y-axis.  The default names are @code{x} and @code{y}.

@node   Position, Color, Labels, Axes
@comment  node-name,  next,  previous,  up
@subsection Axis location
@cindex axes, location of
@cindex positioning axes
If you don't like the default position of axes (at left and bottom), you
may get Gri to draw axes anywhere you like, using commands like
@code{draw y axis at right} (so the y axis is at the right-hand end of
the x range) or @code{draw x axis at top} (so the x axis is at the top
of the plot); you may even specify an exact location, such as 
@code{draw x axis at 22.2}.

Normally, the x axis is placed at the bottom end of the y axis, and the
y axis is placed at the left end of the x axis.  Some people prefer a
style in which the axes are positioned a small offset away from these
locations.  (See example 3, @pxref{Fancy Example}, for an
example.)  To get this effect, you may either position the axes
yourself, or simply use the @code{set axes style offset} command
(@pxref{Set}).  If you want this axis style for all their plots, put the
line @code{set axes style offset} in your @file{~/.emacs} startup file
(@pxref{Resource File}).


@c HTML <!-- newfile Color.html "Gri: color" "General Issues" -->

@node   Color, Graylevel, Position, General Issues
@comment  node-name,  next,  previous,  up
@section Color
@cindex color
Besides color images, Gri permits the use of arbitrary grayscale or
color in any drawn item.  
@menu
* Graylevel::                   Controlling the graylevel of the "pen"
* Colorlevel::                  Controlling the color of the "pen"
@end menu

@node   Graylevel, Colorlevel, Color, Color
@comment  node-name,  next,  previous,  up
@subsection Controlling graylevel of the ``pen''
@cindex graylevel, explanation
@cindex lines, gray, explanation

The darkness of the ``pen'' used in drawing commands (for either lines or
for text) is set by @code{set graylevel .brightness.}.  A brightness
value of 0 corresponds to black ink, and a brightness value of 1
corresponds to white ink.  Values outside this range are clipped to the
nearer endpoint.  Values inside this range choose a proportional
graylevel in between; for example, @code{set graylevel 0.5} gives a 50
percent gray tone.

The graylevel applies to text as well as lines.  Often you'll want to
draw a gray line and a black label beside it, or you'll want to set a
graylevel temporarily.  Here's how to do it:
@example
# Save old graylevl, set, then reset to old
.old_gray. = ..graylevel..
set graylevel 0.5
draw curve
set graylevel 0
draw label for last curve "TEST"
set graylevel .old_gray.
@end example


@node   Colorlevel, Interaction, Graylevel, Color
@comment node-name, next, previous, up
@subsection Controlling color of the ``pen''

The color of the "pen" may be set to any value you can describe with an
RGB (red, green, blue) or HSB (hue, saturation, brightness)
specification, or a color name.  This pen color applies to everything,
even text.

@subsubsection The @code{set color \name} Command

Set the pen color to the indicated name.  By default, only a handful of
colors are known.  You @emph{MUST} give color names as written here,
obeying the capitilization shown.  The color mixes are identical to
those used in X11.  The following lists some of the colors Gri knows by
default.

@cindex builtin colors, list of 
@cindex colors, list of
@example
NAME               RED    GREEN  BLUE
"white"            1.000  1.000  1.000
"LightGray"        0.827  0.827  0.827
"darkslategray"    0.184  0.310  0.310
"black"            0.000  0.000  0.000
"red"              1.000  0.000  0.000
"brown"            0.647  0.165  0.165
"tan"              0.824  0.706  0.549
"orange"           1.000  0.647  0.000
"yellow"           1.000  1.000  0.000
"green"            0.000  1.000  0.000
"ForestGreen"      0.133  0.545  0.133
"cyan"             0.000  1.000  1.000
"blue"             0.000  0.000  1.000
"skyblue"          0.529  0.808  0.922
"magenta"          1.000  0.000  1.000
@end example

@noindent
To get more colors than this, use the @code{read colornames} command.

You should do a test case for your printer to see which colors you find
most to your liking.  You'll want to pick colors that look different
from each other.  In some cases you might want to avoid dithered colors,
since they look too broken on really thin lines.  For example, on my
printer I like the following colors: @code{black}, @code{red},
@code{yellow}, @code{green}, @code{cyan}, and @code{magenta}.


@subsubsection The @code{set color rgb .red. .green. .blue.} Command

This command sets the color using the red-green-blue color model.  If
you are familiar with how colors add (e.g. red plus green yields
yellow), then you might like this, but most people find it easier to use
the @code{set color hsb ...} style described below.

The the individual color components as follows.  The numbers
@code{.red.}, @code{.green.} and @code{.blue.} range from 0 (for no
contribution of that color component to the final color) to 1 (for
maximal contribution).  Values less than 0 are clipped to 0; values
greater than 1 are clipped to 1. EXAMPLES:
@example
set color rgb 0   0   0  # black
set color rgb 1   1   1  # white
set color rgb 1   0   0  # bright red
set color rgb 0.5 0   0  # dark red
set color rgb 0   1   0  # pure green
set color rgb 1   1   0  # yellow: red + green
@end example


@subsubsection The @code{set color hsb .hue. .saturation. .brightness.} Command

In this color model, the color ("hue") is specified with a single
parameter.  Many people find this easier than using the corresponding
@code{rgb} command.

@cindex hint, color palette range
The the individual color components as follows.  The numbers
@code{.hue.}, @code{.saturation.} and @code{.brightness.} range from 0
to 1.  The color, represented by @code{.hue.}, ranges from 0 for pure
red, through 1/3 for pure green, and 2/3 for pure blue, and back to 1
again for pure red.  (HINT: It is a good idea to limit the total range
of hue you use to 2/3, instead of 1; otherwise you'll get confused by
(nearly) repeated colors at the crossover.  For example, limit the hue
to range from 1/3 to 1, or 0 to 2/3.)  The purity of the color,
represented by @code{.saturation.}, ranges from 0 (none of the hue is
visible) to 1 (the maximal amount is present).  Less saturated colours
are like those you would get from mixing black paint into coloured
paint.  The brightness of the color, represented by @code{.brightness.},
ranges from 0 (black) to 1 (maximal brightness).  Lowering brightness is
like decreasing the intensity of the light you shine on a painting.

Hue, saturation, and brightness values are all clipped to the range 0 to 1.
EXAMPLES:
@example
set color hsb 0    1   1  # pure, bright red
set color hsb 0    1 0.5  # half black, half red
set color hsb .333 1   1  # pure, bright green
@end example



@node   Interaction, Operating System, Colorlevel, General Issues
@comment  node-name,  next,  previous,  up
@section Interacting with the user
Use the @code{query} command to interact with the user @xref{Query}.  The
results can be stored in variables and synonyms.


@c HTML <!-- newfile OperatingSystem.html "Gri: operating system" "General Issues" -->

@node   Operating System, Using OS Inside Gri, Interaction, General Issues
@comment  node-name,  next,  previous,  up
@section Interaction Between Gri and Operating System
@cindex awk, sample of use
@cindex operating system commands, printing results of
@cindex system commands, printing results of
@cindex operating system commands, assigned to synonyms
@cindex system commands, assigned to synonyms

@menu
* Using OS Inside Gri::         Accessing the OS from inside Gri
* Using Gri Inside OS::         Tricks for using Gri in unix
@end menu

@node   Using OS Inside Gri, Using Gri Inside OS, Operating System, Operating System
@comment  node-name,  next,  previous,  up
@subsection Using the OS from within Gri

Gri uses the operating system internally for things like paging through
help information.

It also gives access to the operating system from within a gri program,
with the @code{system} and @code{open} commands, and with the back-tic
unix notation.  (@emph{Note} On unix systems, @code{sh} is normally
used, to get the C shell, write @code{system csh ...}, etc.)

@cindex system calls, using dollar-parenthesis shell syntax
@cindex protecting Gri programs against datafile movement
@cindex hint: protecting Gri programs against datafile movement
@cindex unix, dollar-parenthesis notation within Gri commands
@cindex @code{\$()} syntax for system commands
@cindex dollar-parenthesis syntax for system commands
The operating system may be called @emph{within} Gri commands, using a
syntax borrowed from the @code{Bash} unix shell.  After substituting
synonyms in the commandline, Gri scans for dollar-parenthesis blocks
(e.g. @code{\$(system-command)}, replacing them with the textual result
of sending the indicated system-command to the OS.  The replacements are
done from left to right in the commandline, starting at the deepest
nesting level.

@cindex pathname of commandfile
@cindex commandfile, pathname
Often the dollar-parentheis syntax is used in title commands, to
indicate the full pathname of the Gri commandfile, e.g.
@example
draw title "\$(pwd)/\.command_file."
@end example

In assignment to synonyms, expansion of dollar-parenthesis is not done.
Thus the operating system is called twice on the second line below, and
not at all on the first line; to see this, run it as @code{gri -s8 -t}.
@example
\dir = "\$(echo $MY_DIR)"
show "\$(head -1 \dir/MY_FILE)"
@end example


@emph{Syntax Note} Dollar-parenthesis blocks must be prefixed with
backslash to avoid confusion with math expressions within strings, for
example to avoid breaking @code{draw label "$(x,y)$" at 3 3 cm}.  This
is an example of how @TeX{} notation and unix shell notation collide.

@emph{Example} It is a good idea to employ unix environment variables to name
directories containing data, so that Gri scripts will work unchanged
even if the data are moved (so long as the environment variables are
altered), e.g.

@cindex using environment variables for directory names
@cindex strings, embedding OS output into
@cindex OS, embedding system output into strings
@cindex calling OS from within strings

@example
# Figure how many lines in a file
\dir ="$(echo DIRECTORY_WHERE_I_STORE_SOLAR_DATA)"
open "\dir/solar_data_file_name`
...
open "\$(echo DIR_ANOTHER)/another_data_set"
@end example
@noindent



Another method is to pass instructions to the operating system with the
@code{system} command.  This discards output.  Whatever follows the word
@code{system} is first scanned for synonyms (but not rpn expressions or
variables); after replacement of any existing synonyms, the line is
passed directly to the operating system.  Any results are printed on the
terminal.

@cindex gawk, using @code{\.awk} to access
@cindex nawk, using @code{\.awk} to access
@cindex awk, using @code{\.awk} to access
Frequently used system commands are @code{\.awk.} (a builtin synonym
naming the awk program on your system), @code{head}, @code{grep} and
@code{sed}.  Examples:

@itemize @bullet
@item
Here's how to paste several files together to form a temporary file for
plotting.  (Notice that a temporary file incorporating the PID of the job
is created and later removed.)
@example
system paste -d" " 1.dat 2.dat 3.dat > tmp.\.pid.
open tmp.\.pid.
read columns x y
close
system rm tmp.\.pid.
@end example

@item
Here's how to plot each line in a file called @file{inp} which do have
the string @code{;} at the start of the line.
@example
system cat inp | grep -v "^;" | cat > tmp.\.pid.
open tmp.\.pid.
read columns x y
system rm tmp.\.pid.
@dots{}
@end example
@item
Here's how to use @code{awk} system command to create a tabulated
function for plotting.
@example
system \.awk. \
    'BEGIN @{ \
       for (x=0; x<1; x+=0.1) @{       \
         printf ("%f %f\n", x, sin(x)) \
       @}                              \
     @}'                               \
    > tmp.\.pid.
open tmp.\.pid.
read columns x y
close
system rm tmp.\.pid.
draw curve
@end example
@noindent

@cindex pipes, opening files through them
@cindex opening files through pipes
This example is more cleanly written using the piping facility of the
@code{open} command (which automatically creates a temporary file, and
destroys it when @code{close} is done):
@example
open "\.awk. 'BEGIN @{\
  for(x=0;x<1;x+=0.1) @{\
    print(x,sin(x)) \
  @} \
@}'|"
read columns x y
close
draw curve
@end example
@item
Sometimes you need just a single output item from the operating system.
In this case, you can store the results from the operating system in a
synonym use the @code{\synonym = system ...} synonym assignment command.
@item
@cindex temporary file allocation
@cindex file, temporary
@cindex filename, temporary
@cindex @code{tmpname} subroutine
A related command is @code{\synonym = tmpname}, which stores in the
synonym the name of a temporary file created by the system.  The file is
created with the @code{tmpname} system call, so it is guaranteed not to
clash with any existing files.  Typically, the filename is something
like @file{/usr/tmp/griAAAa1233}.  A useful bit of code is
@example
\file1 = tmpname
system ... SOME_SYSTEM_COMMANDS ... > \file
... use this new file for something ...
system rm -f \file
@end example
@end itemize



@node   Using Gri Inside OS, Library Files, Using OS Inside Gri, Operating System
@comment  node-name,  next,  previous,  up
@subsection Using Gri from within the OS

@emph{This section only applies to unix systems.}

Save the folowing into a file called @file{p} and chmod it to make it
executable.  It runs Gri on a named file, with the @code{-yes} flag set
so that any @code{query} commands are automatically answered in the
affirmative, and then displays the results in a Ghostscript window.
(USAGE: @code{p cmdfile.gri})
@example
#!/usr/bin/sh
# Run Gri, then plot in gs window
case $# in
1)
        base=`basename $1 .gri | sed -e s/.*,#`
        gri -yes $base.gri && ghostview $base.ps
        ;;
*)
        echo "Proper usage: $0 cmdfile.gri"
        ;;
esac
@end example





@c HTML <!-- newfile LibraryFiles.html "Gri: library files" "General Issues" -->

@node   Library Files, Resource File, Using Gri Inside OS, General Issues
@comment  node-name,  next,  previous,  up
@section Library Files
The directory @file{/usr/local/lib/gri} contains small Gri programs to
be run together with your own gri programs, providing a library of Gri
code.  Gaining or preventing access to this library directory, and to
other directories of your own making, is done with the @code{GRIINPUTS}
unix environment variable; @xref{Options On Command Line}.

The following examples show how one might use these library files to
modify the plots normally produced by a user-created commandfile.  In
the first examples, @file{myfile.gri} is a user-created commandfile, to
be modified by the extra library commandfile.  @emph{Convention} Since
Gri doesn't require the specification of the @code{.gri} suffix in
commandfile names, it is mnemonic to list user-created commandfiles with
the suffix, and library files without.  You should follow this
convention.

@emph{Note:} These library files are a new feature of Gri, and there is
a good chance that library files on your system might change.
Therefore, if there is a file that you use a lot, you should put it in
your @file{~/lib/gri} directory, and modify your @code{GRIINPUTS}
unix environment variable to contain this directory, by putting this line 
@example
export GRIINPUTS=".:$HOME/lib/gri:/usr/local/lib/gri"
@end example
@noindent
in your @file{~/.environment} file.  (This instruction is for Bash-shell
users; others ask system manager how to get this environment variable
defined in this way.)


@itemize @bullet
@item @code{gri 10pt,myfile.gri}
Run Gri on @file{myfile.gri}, but make the fontsize 10 point before
executing first line of @file{myfile.gri}.  Provided that
@file{myfile.gri} does not change the fontsize, this means the text will
be 10 point.  Note that the library file,
@file{/usr/local/lib/gri/10pt}, consists of these lines:
@example
# @@(#) 10pt.gri 1.2 (c) 93/05/05 Dan E. Kelley
set font size 10
@end example
@item @code{gri 14pt,myfile.gri}
As above, but make font larger (good for overhead transparencies, for
example).
@item @code{gri palatino,14pt,myfile.gri}
Use Palatino, 14 point, as the default font.
@item @code{gri TS}
No local commandfile is used; instead, the library file
@file{/usr/local/lib/gri/TS.gri} is used to make a temperature-salinity
file is used.
@item @code{gri ticsin,TS}
As above, but draw the tics inward from axes, instead of outward as the
normal style dictates.
@end itemize



@c HTML <!-- newfile ResourceFile.html "Gri: The Gri resource file" "General Issues" -->

@node   Resource File, Defaults, Library Files, General Issues
@comment  node-name,  next,  previous,  up
@section Sample Resource File
@cindex files, @file{~/.grirc} initialization file
@cindex @file{~/.grirc} initialization file
@cindex initialization commands
@cindex startup commands
@cindex resource files
The following shows a sample @file{~/.grirc} resource file.  Much of the
code here is adding new commands (@pxref{Adding New Commands}.)
@example
# my ~/.grirc stuff
#
`user'
Show user's name.
@{
  show "\.user."
@}

`time'
Show the time.
@{
  show "\.time."
@}

`host'
Show host computer name.
@{
  show "\.host."
@}

`Landscape Big'
Plot in landscape mode, big size.
@{
  set page landscape
  set x margin 2
  set x size 25
  set y margin 2
  set y size 15
@}

`Portrait Big'
Plot in portrait mode, big size.
@{
  set x margin 2
  set x size 15
  set y margin 2
  set y size 15
@}
@end example



@c HTML <!-- newfile Defaults.html "Gri: defaults" "General Issues" -->

@node   Defaults, X-y Plots, Resource File, General Issues
@comment  node-name,  next,  previous,  up
@section Defaults
@cindex default values
At startup time, Gri sets the values of some things, like font size.
Since Gri is still under development, some of these defaults might
change, so you should not rely on them remaining the same.    Presently,
the defaults are equivalent to:
@example
set arrow size 0.2         # (cm)
set axes style 0
set beep off
set clip off
set clip postscript off
set contour format %lg
set contour label position ? ?
set contour labels horizontal
set contour labels whiteunder
set dash off
set font size 12           # (pt)
set font to helvetica
set graylevel 0            # Black ink
set ignore initial newline off
set input data window x off
set input data window y off
# Following set (curve, axes, symbol) widths to width
# of rapidograph pens called (6x0, 3x0,  6x0)
set line width 0.709        # (pt) for curves
set line width axis 0.369   # (pt) for axes
set line width symbol 0.369 # (pt) for symbols
set missing value 1.0e22
set page portrait
set page factor 1
set symbol size 0.1        # (cm)
set tic size 0.2           # (cm)
set tics out
set trace off
set x format %lg
set x margin 6.0           # (cm)
set x name "x"
set x size 10              # (cm)
set x type linear
set y axis label vertical
set y format %lg
set y margin 6.0           # (cm)
set y name "y"
set y size 10              # (cm)
set y type linear
@end example

@noindent
(NOTE: Programmers may alter the gri source file
@file{defaults.h} and then recompile Gri, if they feel the need to
change these things.  Also, see the file @file{startup.c} and the
function @code{gr_begin()} in @file{gr.c}.)








@c HTML <!-- newfile X-Y.html "Gri: xy plots" "X-Y Plots" -->

@node   X-y Plots, Linegraphs, Defaults, Top
@comment  node-name,  next,  previous,  up
@chapter x-y Plots

@menu
* Linegraphs::                  x-y graphs with data connected by line segments
* Scattergraphs::               x-y graphs with data indicated by symbols
* Formula Plots::
@end menu

@node   Linegraphs, Scattergraphs, X-y Plots, X-y Plots    
@comment  node-name,  next,  previous,  up
@section Linegraphs
The following Gri commands will draw a linegraph.  For the output graph
@xref{Simple Example}.
@cindex linegraphs
@cindex x-y graphs
@cindex drawing x-y plots
@cindex example 1, linegraph using data in a separate file

This plots a simple linegraph.

@c HTML <A HREF="./examples/example1.gif">
@c HTML <IMG ALT="Example 1" SRC="./examples/example1-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>


@example
# Example 1 -- Linegraph using data in a separate file
open example1.dat      # Open the data file
read columns x y       # Read (x,y) columns
draw curve             # Draw data curve
draw title "Example 1" # Title above plot
quit                   # End the plot
@end example

Here's what the command lines mean:

@itemize @bullet
@item
The first line is a comment.  Anything to the right of a hash-mark
@code{#} is considered to be a comment.  (This symbol is also called a
"pound".)

@cindex comments, @code{#} style
@item
The second line is blank.  Gri ignores blank lines between commands.
@item
@code{open example1.dat} tells Gri to open the indicated file (in
the current directory) as an input data file.  You can specify files
outside the current directory by using conventional cshell pathnames
(e.g., @code{open ~/data/TS/section1/T_S.dat} or 
@code{open ../data/file.dat}).  You can even use "synonyms" (@pxref{Synonyms}.) in
filenames, as in @code{open \BASENAME.dat}.
@item
@code{read columns x y} tells Gri to start reading columnar data,
the first column being @code{x}, the second @code{y}.  @code{x} and
@code{y} are predefined names for whatever ends up on the horizontal and
vertical axes.  

@cindex reading columns of data
@cindex format for columnar data
@cindex data format
@cindex multiple datasets in one file

The number of data needn't be specified.  Gri reads columns until a
blank line or end-of-file is found.  You can tell Gri how many lines to
read with a command like @code{read columns 10 x y}.  Multiple datasets
can reside within one file; provided that they are separated by a single
blank line, Gri can access them by multiple @code{read} commands.

Like C, Gri expects numbers to be separated by one or more spaces or
tabs.  Commas are not allowed.  If the columns were reversed, the
command would be @code{read columns y x}.  If there were an initial
column of extraneous data, the command would be 
@code{read columns * x y}, or @code{read columns x=2 y=3}
@xref{Read Columns}.
@item
@code{draw curve} tells Gri to draw a curve connecting the points
in the @code{x} and @code{y} columns. A nice scale will be selected
automatically.  (You can change this or any other plot characteristics
easily, as you'll see later.)
@cindex drawing data lines
@item
@code{draw title} tells Gri to write the indicated string
centered above the plot. The title @emph{must} be enclosed in quotes.
@cindex titles, drawing above plot
@cindex drawing titles
@item
@code{quit} tells Gri to exit.  @pxref{Viewing} to find out how
to see the plot.
@end itemize

Gri will draw axes automatically, and pick its own scales.  @xref{Axes}.

If you wish to draw several curves which cross each other, you should
try using @code{draw curve overlying} instead of
@code{draw curve}.  This will make it easier to distinguish the
different curves.


@node   Scattergraphs, Formula Plots, Linegraphs, X-y Plots
@comment  node-name,  next,  previous,  up
@section Scattergraphs
@cindex scattergraphs
This section contains two examples, the first being a fuller explanation
of all the bells and whistles, the second being a simple explanation
of how to get a very quick plot, given just a file containing a matrix
of grid data.


To get a scattergraph with symbols at the data points, substitute
@code{draw symbol} for @code{draw curve}.  Both symbols and a curve
result if both @code{draw curve} and @code{draw symbols} are used.
@pxref{Fancy Example} for an example.

By default, the symbol used is an x.  To get another symbol, use a
command like @code{draw symbol 0} or @code{draw symbol plus}.  These are
the numerical codes and the associated names:
@cindex symbol codes
@example
0  plus         
1  times        
2  box          
3  circ         
4  diamond      
5  triangleup   
6  triangleright
7  triangledown 
8  triangleleft 
9  asterisk     
10 star         
11 filledbox    
12 bullet       
13 filleddiamond
14 filledtriangleup
15 filledtriangleright 
16 filledtriangledown 
17 filledtriangleleft
@end example

To change the symbol size from the default of 0.2 cm use commands like
@code{set symbol size 0.1} (to set to 1 mm) @xref{Set Symbol Size}.

@subsection Coding data with symbols
@cindex symbols
To get different symbols for different data points, insert symbol codes
from the above list as a column along with the x-y data, and substitute
the command @code{read columns x y z}, and then draw them with
@code{draw symbol}.  Gri will interpret the rounded-integer
values of the @code{z} columns as symbol codes.  Note that even if
you've read in a z column which you intend to represent symbols, it will
be overridden if you designate a specific symbol in your 
@code{draw symbols} command; thus @code{draw symbol 0} puts a @code{+}
at the data points whether or not you've read in a symbol column.

@subsection Drawing a symbol legend
@cindex legend for symbol
@cindex symbol legend
The following example shows how you might write a symbol legend for a
plot.  The legend is drawn 1 cm to right of right-hand side of the axes,
with the bottom of the legend one quarter of the way up the plot.  The
lines in the legend are double-spaced vertically.  To change the
location of the legend, alter the @code{.legend_x. =} and
@code{.legend_y. =} lines.  To change the spacing, alter the
@code{.legend_y. +=} line.
@example
set x axis -1 5 1
set y axis -1 5 1
read columns x y z
0 0 0
1 1 1
2 2 2
3 3 3

draw symbol

# Draw symbol legend
.leg_x. = @{rpn ..xmargin.. ..xsize.. + 1 +@}
.leg_y. = @{rpn ..ymargin.. ..ysize.. 4 / +@}
draw symbol leg 0 "Foo" at .leg_x. .leg_y. cm
.leg_y. += @{rpn ascent("M") 2 *@}
draw symbol leg 1 "Bar" at .leg_x. .leg_y. cm
.leg_y. += @{rpn ascent("M") 2 *@}
@end example


@subsection Coding data with symbol colors
@cindex color, symbols
@cindex symbols in color
To get different colors for different symbols, read a color code into
the z column, and do for example @code{draw symbol bullet color hue z}.
The numerical color code ranges from 0 (red) through to 1, passing
through green at 1/3 and blue at 2/3.

@node   Formula Plots, Contour Plots, Scattergraphs, X-y Plots
@comment  node-name,  next,  previous,  up
@section Formula Plots
@cindex functions, how to plot
@cindex formulae, how to plot
There are two methods for formula graphs.

@enumerate
@item @emph{Use the system yourself.}
Do as in this example:
@example
open "\.awk. 'BEGIN@{for(i=0;i<3.141;i+=0.05)\
    @{print(i,cos(i))@}@}' |"
read columns x y
close
draw curve
quit
@end example
@noindent
(Note the use of @code{\.awk.}, a builtin synonym naming the awk program
on your system.)
@item @emph{Let Gri calculate things for you}

The simplest is to let Gri
calculate things for you with the @code{create columns from function}
command (@pxref{Create}.).  The command assumes that you have defined
the synonym called @code{\function} which defines @code{y} in terms of
@code{x}.

Gri uses the program @code{awk} to create the columns, and cannot work
without it.  

Here is an example of using @code{create columns from function}:
@example
show "First 2 terms of perturbation expansion"
set y axis label horizontal
set y name "sea-level"
set x name "$\omega$t"

\b = "0.4" # perturbation parameter b=dH/H
\xmin = "0"
\xmax = "6.28"
\xinc = "3.14 / 20"
\function = "cos(x)"
set x axis \xmin \xmax
create columns from function
draw curve
draw title "SOLID LINE  \function"

\function = "(cos(x)+\b/2*(1-cos(2*x)))"
create columns from function
set dash 1
draw curve
draw title "DASHED LINE \function"

draw title "b = \b"
quit
@end example

Here's another example, in which the curve @code{y = 1/(\int + \sl*x)}
is drawn through some data.  Note how @code{sprintf} is used to set
@code{\xmin} and @code{\xmax} using the scales that Gri has determined
in reading the data.
@example
open file.data
read columns x y
close
draw symbol bullet
\int = "-0.1235"
\sl = "0.003685"
sprintf \xmin "%f" ..xleft..
sprintf \xmax "%f" ..xright..
\function = "1/(\int + x * \sl)"
create columns from function
draw curve
@end example
@end enumerate




@c HTML <!-- newfile Contour.html "Gri: contour plots" "Contour Plots" -->

@node   Contour Plots, Pre-gridded Data, Formula Plots, Top
@comment  node-name,  next,  previous,  up
@chapter Contour Plots
@cindex contours
Contour plots can be done with either pregridded data or randomly
distributed (ie, ungridded) data.
@menu
* Pre-gridded Data::            Contouring f(x1, y1, x2, y2, ...)
* Ungridded Data::              Contouring f(x, y) where (x,y) are not on a grid
@end menu

@node   Pre-gridded Data, Ungridded Data, Contour Plots, Contour Plots
@comment  node-name,  next,  previous,  up
@section Pre-gridded Data
@cindex contours, pre-gridded data
This section presents two examples of contouring pre-gridded data, the
first example illustrating a boilerplate program to quickly contour data
stored in a simple matrix form in a file, the second example
illustrating a case with more control of the details (e.g., nonuniform
grid).


@subsection Simple example

This example was hardwired to know the size of the grid, etc.  Here's 
an example which is more general, in that it determines the dimensions
of the grid data from using unix system commands.  Note that the grid is
set to run from 0 to 1 in both x and y; you'll most likely want
to change that after you see the initial plot, but this should get you 
started.

@cindex grid data, determining geometry from file
@cindex image data, determining geometry from file
@example
\file = "somefile.dat"
\rows = system wc \file      | \.awk. '@{print $1@}'
\cols = system head -1 \file | \.awk. '@{print NF@}'
set x grid 0 1 /\cols
set y grid 0 1 /\rows
open \file
read grid data \rows \cols
close
draw contour
@end example
@noindent
(Note the use of @code{\.awk.}, a builtin synonym naming the awk program
on your system.)





@subsection Complicated example

To get a simple contour graph based on pre-gridded
data, with full control of axes, etc, do something like this:
@cindex drawing contours of pregridded data
@cindex example 4 (contouring pregridded data)

@c HTML <A HREF="./examples/example4.gif">
@c HTML <IMG ALT="Example 4" SRC="./examples/example4-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example4.gri">The command-file.</A> <P>

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example4.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example4}


@c HTML <!--
@example
# Example 4 -- Simple contour graph

#
# Read x-grid; blank-line means stop reading.
read grid x
0
.2
1

# Note that the x-grid was irregular.  The y-grid
# in this example is regular, so we can just set
# it to range from 10 to 20, incrementing by 2.5.
set y grid 10 20 2.5
# Thus we now have a grid 3 wide and 5 high.  Let's
# read the actual data now.
read grid data
1 2 3
2 3 4
3 4 5
4 5 6
5 6 7
# Now draw contours (automatically set; we could
# have done `draw contour 2' to draw contour fro
# value 2 or `draw contour 1 10 2' to draw contours
# ranging from 1 to 10 with an increment of 2.)
draw contour
draw title "Example 4"
quit
@end example
@c HTML -->


Here several new things have been introduced.

First, you've got to define a grid in xy space.  This example uses a
non-uniform x-grid, and reads it in from the commandfile.  In this form,
the blank line is essential; it tells Gri that the end of data has been
located; if you like, you can specify the number of lines to read, as in
@code{read grid x 3}.

The y-grid for this example is uniform, however, so it may be specified
with the @code{set y grid} command.  It obtains values (10, 12.5, 15,
17.5, 20).  The @code{set x|y grid} commands accept negative increments.
Furthermore, it's possible to specify the number of steps, rather than
the increment size, by putting @code{/} before the third number; thus
@code{set x grid 0 1 /5} and @code{set x grid 0 1 0.2} are equivalent.

Having defined a grid, it's time to read in the gridded data.  Here this
is done with the @code{read grid data} command.  Since Gri already knows
the grid dimensions, it will read the data appropriately.  You could
also have told it (@code{read grid data 3 5}).  

The first dataline is the top of the y-grid.  In other words, the data
appear in the file just as they would on the graph, assuming that the
x-grid and y-grid both increase.  

Sometimes you want to read in the transpose of a matrix.  Gri lets you
do that.  If the @code{bycolumns} keyword is present at the end of the
@code{read grid} command, the first dataline will contain the first
@emph{column}, of the data.

If you have an extraneous column of data to the left of your data
matrix, do @code{read grid data * 2 3}

Now Gri has the grid in it's head.  We tell it to draw some contours
with the @code{draw contour} command.   As the comments in the example
show, the contour values will be selected automatically, but you can
alter that.





@node   Ungridded Data, Images, Pre-gridded Data, Contour Plots    
@comment  node-name,  next,  previous,  up
@section Ungridded data
@cindex contours, ungridded data
@cindex gridding data, advice on methods
When you have f=f(x,y) points at random x and y, you must cast them onto
a grid to contour them.  This is a difficult problem.  There are many
ways to grid data, and all have both good and bad features.  You should
try various methods, and various settings of the parameters of the
methods.  If you have a favorite gridding method that you prefer, you
should probably pre-grid the data yourself.  If not, Gri can do it for
you.  Gri has two methods for doing this, the ``boxcar'' method and the
``objective analysis'' method.  Each method puts holes in the grid
wherever there are too few data to map to grid points, unless you
specifically ask to fill in the whole grid.

The next two sections show first an example, then a discussion of the
methods and how to use them.

@subsection Example
@cindex drawing contours of ungridded data

This example uses data taken from Figure 5 of S. E.  Koch and M.
DesJardins and P. J. Kocin, 1983.  ``An interactive Barnes objective map
anlaysis scheme for use with satellite and conventional data,'', J.
Climate Appl.  Met., vol 22, p. 1487-1503.  Readers should compare
Figures 5 and 6 of that paper to the results shown here.

@c HTML <A HREF="./examples/example5.gif">
@c HTML <IMG ALT="Example 5" SRC="./examples/example5-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example5.gri">The command-file.</A> <P>


@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example5.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example5}
@cindex example 5 - Contouring ungridded data, from figure


@c HTML <!--
@example
# Example 5 - Contouring ungridded data, from figure
# 5 of Koch et al., 1983, J. Climate Appl. Met.,
# volume 22, pages 1487-1503.
open example5.dat
read columns x y z
close
set x size 12
set x axis 0 12 2
set y size 10
set y axis 0 10 2
draw axes
set line width symbol 0.2
set symbol size 0.2
draw symbol bullet
set font size 8
draw values
set x grid 0 12 0.25
set y grid 0 10 0.25

# Use default method (Barnes)
convert columns to grid

set font size 10
draw contour 0 40 2
set font size 12
draw title "Example 5 -- wind (Fig5 Koch et al, 1983)"
quit
@end example
@c HTML -->



@subsection Discussion of Methods

The various commands for converting columns to a grid are given in
@xref{Convert Columns to Grid}.  Generally, the Barnes method is best.


@c HTML <!-- newfile Image.html "Gri: image plots" "Image Plots" -->

@node   Images, Reading and Creating Image Data, Ungridded Data, Top
@comment  node-name,  next,  previous,  up
@chapter Image Plots
@cindex image plots, general

Gri can read in images stored in various formats.  It can also create
image data internally, by converting gridded data, which is quite handy
in some contouring applications.

@cindex American Geophysical Union, recommended image gray levels

Note: if your diagram is to be reproduced by a journal, it is unlikely
that the reproduction will be able to distinguish between any two
graylevels which differ by less than 0.2.  Also, graylevels less than
0.2 may appear as pure black, while those of 0.8 or more may appear as
pure white.  These guidelines are as specified by American Geophysical
Union (publishers of J. Geophysical Res.), as of 1998.


@menu
* Reading and Creating Image Data:: Reading image, and creating from grid data
* Image PostScript Output::     How the image is embedded in the PostScript
* Example Image::               How to plot a satellite image
@end menu

@node Reading and Creating Image Data, Image PostScript Output, Images, Images
@comment  node-name,  next,  previous,  up
@section Reading and Creating Image Data
@cindex converting grids to images
@cindex grid, converting to image
@cindex data, images
@cindex image, data format

Gri can do black and white image plots, such as satellite images.  There
are several ways to create image data in Gri
@itemize @bullet
@item
Create images from gridded data using @code{convert grid to image}.  For
examples @xref{Grayscale Images},
@xref{Combination},
and @xref{Contouring}.
@item
Read raw ascii image data files.  Use @code{read grid}.
@item
Read PGM (portable graymap) ascii files.  (That is, a file with magic
characters @code{P1} or @code{P3} at the start.)  Use the 
@code{read image pgm} command, for a file opened in ascii mode with
@code{open filename}. 
@item
Read raw binary data, with or without headers.  Use @code{read image},
after skipping any header bytes using the @code{skip} command, for a
file opened in binary mode with @code{open filename binary}.
@item
Read a Sun ``rasterfile'' file (but only in uncompressed form).  Use
@code{read image rasterfile} for a file opened in binary mode with
@code{open filename binary}.
@item
Read a PGM (portable graymap) binary file.  (A file with magic
characters @code{P2} or @code{P4} at the start.)  Use the 
@code{read image pgm} for a file opened in binary mode with
@code{open filename binary}. 
@item
Aside: Images can be converted to grids (for contouring) using
@code{convert image to grid} @xref{Convert}.
@end itemize

Once the image is created, it's grayscale/colorscale may be manipulated
with the commands @code{set image grayscale} and 
@code{set image colorscale}, which permit linear and histogram-equalized
blendings over the grayscale or color range, or with
@code{read image grayscale} and 
@code{read image colorscale}, which permit reading in the grayscale or
color values individually, one for each of the 256 pixel values.

It is important to understand the structure of image data.  Gri works
only with 8-bit image data.  This means that a given pixel of the image
may have only one of 256 possible values.  The example below uses a
satellite image of surface temperature.  The suppliers of the data
dictate that pixel value 0 corresponds to a temperature of 5C, and a
pixel value of 255 corresponds to 30.5C, so the resolution is 0.1C per
pixel value.  This resolution will be apparent if the output of the
example below is previewed on a grayscale/color monitor --- notice the
quantization in the palette.  This resolution issue is not very
important with satellite images, since you have to use what you are
given by the suppliers of the data.  However, issue is very important
when you are converting grid data to images.  When Gri converts grid
data to image data, it neccessarily discards information, because the
grid data have resolution to about 6 digits, whereas the image data have
only 8-bit (2-3 digit) resolution.  The @code{set image range} commands
determines the range of this 8-bit resolution in terms of user units.
All other things being equal, it would be preferable to use the smallest
range consistent with the range of your data.  If your grid data ranged
from 0 to 1, say, you might @code{set image range 0 1}.  This would give
a resolution in the image of 1/255 in the user units.  But, when Gri
converts the grid into an image, it will @emph{clip} all data outside
the indicated range.  In this case, any data greater than 1 in the grid
would translate to @emph{exactly} 1 in the image.  Naturally there is a
tradeoff between having a range large enough to encompass any data in
the grid, and a range small enough to yield adequate resolution.  In
most cases, 8-bit resolution will be adequate, but it is good to be
aware of the limitations.  One should always @code{draw image palette},
and check it on a color monitor for bandedness, which is a sign of
resolution problems.



@node  Image PostScript Output, Example Image, Reading and Creating Image Data, Images
@comment  node-name,  next,  previous,  up
@section About The PostScript Output
@cindex image, PostScript output
@cindex postScript output, embedded images

Programmers Note: Gri inserts some special comments in the PostScript
file, to help programmers extract the image data; to extract the
information, you'll have to understand how PostScript handles images.
Gri inserts a single comment line before a line ending in the token
@code{im}:
@example
%BEGIN_IMAGE
170.70 170.70 534.86 534.86 128 128 im
@end example
@noindent
The first four numbers are the (x,y) locations of the lower-left and
upper-right corners of the image, in units of points on the page (72
points = 1 inch).  The fifth and sixth numbers are the width of the
image and the height of the image.  The keyword @code{im} is always
present on this line.  Gri inserts the following comment line at the end
of the image data:
@example
%END_IMAGE
@end example
A program is provided with Gri to extract these images into a binary
format suitable for viewing and manipulating with standard tools
@xref{Extractor Of Images}.

@node  Example Image, Examples, Image PostScript Output, Images
@comment  node-name,  next,  previous,  up
@section Example (Satellite image)
@cindex satellite images

Here's an example that will plot different types of images, depending on
your answers to @code{query} questions.  The file called
@file{\filename} is the data file, in binary format with one byte
(@code{unsigned char} in C) for each pixel, stored with the northwest
pixel first, and the pixel to the east of that next. The file called
@code{\mask} is in the same format, and the numbers are 0 if the point
is over the sea and 1 if over land.  The mask file is used in computing
the histograms, which is done if @code{\histo} is 1.

The files in this example covers 128 * 128 pixels over the Gulf of
Maine. The numbers in @code{\filename} correspond to surface
temperatures according to the equation 
@example
T = 5 + 0.1 * pixel_value
@end example
@noindent
which explains the following lines in the command file:
@example
\0val = "5"             # 0 in image
\255val = "30.5"        # 255 in image
@end example
@cindex images, histogram scaling
@cindex images, linear scaling

Depending on @code{\histo}, the graymap will be linear or
histogram-enhanced. The histogram method
consists of dividing the cumulative histogram for the values in the
image up into 256 levels, and assigning a graylevel to each.  This has
the effect of creating maximal contrast in all ranges of graylevel. It
points up features really well, but it's a nonlinear mapping, so it is
not good for telling you where gradients are strong or weak.

@c HTML <!--
Examples are shown for linear mapping and histogram mapping.
@c HTML -->
@cindex histogram enhancement of image plots
@cindex drawing image plots
@cindex drawing satellite images

@c HTML <A HREF="./examples/example6.gif">
@c HTML <IMG ALT="Example 6" SRC="./examples/example6-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example6.gri">The command-file.</A> <P>


@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example6.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-144
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example6}

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example6histogram.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-144
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example6histogram}
@cindex example 6, plot IR image of Gulf of Maine

@c HTML <A HREF="./examples/example6.gri">Click to see code</A>


@c HTML <!--
@example
# Example 6 -- Plot IR image of Gulf of Maine
# Define characteristics of norda images
# Note that the pixel to temperature conversion formula is
#
#   Temperature = 5C + pixel_value / 10
#
# where pixel_value ranges from 0 to 255.  Thus, a pixel value of 0
# corresponds to a temperatuer of 5C, and 255 corresponds to 30.5C;
# this is why the limits \0val and \255val, for use by the `set image
# range' command, take on these values.
\0val = "5"                     # 0 in image
\255val = "30.5"                # 255 in image
.rows. = 128
.cols. = 128
.pixel_width. = 2
.km. = @{rpn .cols. .pixel_width. *@}

# get filenames
query \filename "Name image file" ("example6image.dat")
query \maskname "Name mask  file" ("example6mask.dat")

# get data, then mask, each in 8-bit image format
open \filename 8bit
set image range \0val \255val
read image .rows. .cols. box 0 0 .km. .km.
close
open \maskname 8bit
read image mask .rows. .cols.
close

# find out what grayscale method to use
query \histo "Do histogram enhancement? (yes|no)" ("no")
query \minT  "T/deg for white on page?          " ("10")
query \maxT  "T/deg for black on page?          " ("15")
\incT = "1"

# set up scales. 
set x size 12.8
set y size 12.8
set x name "km"
set y name "km"
set x axis 0 .km. 32
set y axis 0 .km. 32

# plot image, grayscale, and histogram
if @{"\histo" == "yes"@}
    set image grayscale using histogram black \maxT white \minT
else
    set image grayscale black \maxT white \minT
end if
draw image
draw image palette left \minT right \maxT increment \incT
draw image histogram
if @{"\histo" == "yes"@}
    draw title "Example 6: grayscale histogram enhanced"
else
    draw title "Example 6: grayscale linear \minT to \maxT"
end if
quit
@end example
@c HTML -->



@c HTML <!-- newfile Examples.html "Gri: extra examples" "Examples" -->

@node   Examples, Box Plots, Example Image, Top
@comment node-name,  next,  previous,  up
@chapter Real-world examples
@cindex cookbook
The example files in this manual should be available to you directly,
having been installed with Gri; if not, ask your system manager to check
the FTP site.

Additionally, I've collected a few real life examples here.  Other
sources are the Gri cookbook, available separately
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/cookbook/cookbook.html"> 
@c HTML (click here)</A>
.  Other examples are available at other locations on the net, e.g.
at 
@cindex Examples, at satlab.hawaii.edu internet location
@cindex Hawaii satellite examples
@cindex Satellite examples
@cindex Ocean viewing by satellite, examples
@c HTML <A HREF="http://www.satlab.hawaii.edu">
@file{www.satlab.hawaii.edu}
@c HTML </A>
or
@c HTML <A HREF="http:#satftp.soest.hawaii.edu">
@file{satftp.soest.hawaii.edu}
@c HTML </A>
.  You might also like to check out Kelley (1994, J. Physical Oceanogr.,
24, 2424-2433), and the preprint of this available on my online archive
of camera-ready papers, to get an idea of good sizes for fonts, etc, for
use at reduction levels typical of Oceanographic journals.



@menu
* Box Plots::                   Tukey box plots, which show histograms
* Contouring::                  sample contour plot
* Grayscale Images::            create and plot image, from gridded data
* Combination::                 image and contour combination plot
* Fancy::                       fancy plot with lots of tricks
* Legend::                      plot with annotated curves and legend
* Polygons::                    read geometry, then draw polygon
* New Commands::                making new gri commands
* TS Diagram::                  temperature-salinity diagrams
* PDF Diagram::                 probability-density function
* Running Means::               skyline plot of running means
* Finite Element Model Mesh::   plotting mesh of FEM-type model
@end menu


@c HTML <!-- newfile BoxPlots.html "Gri: box plots" "Examples" -->

@node   Box Plots, Contouring, Examples, Examples
@comment  node-name,  next,  previous,  up
@section Box plots
Box plots were invented by Tukey for eda (exploratory data analysis).
They show nonparametric statistics.  The centre of the box is the
median.  The box edges show the first quartile (q1) and the third
quartile (q3).  The distance from q3 to q1 is called the inter-quartile
range.  The whiskers (lines with crosses on them) extend to the furthest
points still within 1.5 inter-quartile ranges of q1 and q3.  Beyond the
whiskers, all outliers are shown, in open circles up to a distance of 3
inter-quartile ranges beyond q1 and q3, and in closed circles beyond
that.  Below is an example that uses a "new command" to define each box
plot @xref{New Commands}.

@c HTML <A HREF="./examples/example7.gif">
@c HTML <IMG ALT="Example 7" SRC="./examples/example7-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example7.gri">The command-file.</A> <P>


@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example7.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example7}

@cindex example 7, box plots of mixing efficiency vs density ratio (meddy)


@c HTML <!--
@example
# Example 7 -- Box plots of mixing efficiency vs density ratio (meddy)

`Draw y boxplot from \file at .x.'
Draw a y boxplot for data in given file, at given 
value of x.
@{
    open \.word4.
    read columns * y
    close
    draw y box plot at \.word6.
@}
if !..publication..
    draw time stamp
end if
set x axis 1 3 1 0.1
set x name "Density Ratio, $R_\rho$"
set x margin 4
set y axis -2 1 1
#
# Must fool gri into not drawing the axes, because the y data
# are already in logspace.
draw axes none
Draw y boxplot from example7a.dat at 1.3
Draw y boxplot from example7b.dat at 1.4
Draw y boxplot from example7c.dat at 1.5
Draw y boxplot from example7d.dat at 1.6
Draw y boxplot from example7e.dat at 1.7
Draw y boxplot from example7f.dat at 1.8
Draw y boxplot from example7g.dat at 1.9
delete y scale
set y name "Efficiency, $\Gamma$"
set y type log
set y axis 0.01 10 1
draw axes
draw title "Example 7 -- Box plot"
quit
@end example
@c HTML -->


@c HTML <!-- newfile ContouringExample.html "Gri: contouring example" "Examples" -->


@node   Contouring, Grayscale Images, Box Plots, Examples
@comment  node-name,  next,  previous,  up
@section Contouring
This example plots a section of dT/drho vs x and rho (actually, sigma-t,
as the label indicates).  The contours are unlabelled; I'm only
interested in the zero crossings.

There are some other useful tricks in this example, such as calling
@code{awk} and @code{wc} from the unix system.

(In the plot shown, all @code{query} questions were answered with
carriage return, yielding the defaults; the @code{-p} flag was specified
on execution, so the time stamp was not drawn.)

@c HTML <A HREF="./examples/example8.gif">
@c HTML <IMG ALT="Example 8" SRC="./examples/example8-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example8.gri">The command-file.</A> <P>


@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example8.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-144
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example8}

@cindex example 8, plot T=T(x,rho) section of eubex data



@c HTML <!--
@example
# Example 8 -- Plot T=T(x,rho) section of eubex data

`Initialize Parameters'
@{
    \FILE_DATA = "example8a.dat" 	 # T vs rho
    \FILE_LOCN = "example8b.dat" 	 # section distances
    set missing value -99.0
    #
    # Following values from ~/eubex/processing/to_rho_bins/do_rho_inter
    \RHO_MIN = "28.1"
    \RHO_MAX = "27.5"
    \RHO_INC = "-0.002"
    \NY = "301"
    \xmin = "500"
    \xmax = "0"
    \xinc = "-100"
    \ymin = "28.1"
    \ymax = "27.8"
    \yinc = "-0.1"
    \zmin = "0"
    \zmax = "2.5"
@}
`Initialize Axes'
Set up axes
@{
    set page landscape
    set x margin 5
    set x name "km"
    set x size 20
    set x axis \xmin \xmax \xinc
    set y margin 5
    set y name "$\sigma_T$"
    set y axis label horizontal
    set y axis \ymin \ymax \yinc
@}
`Initialize Files'
@{
    query \data "Data file?   " ("\FILE_DATA")
    query \locn "Station locn?" ("\FILE_LOCN")
@}
`Read Data'
@{
    # Read x-locations
    system \.awk. '@{print $2@}' < \locn > TMP
    system wc TMP | \.awk. '@{print $1@}' > NUM
    open NUM
    read .gridx_number.
    close
    system rm NUM 
    open TMP
    read grid x .gridx_number.
    close
    system rm TMP
    # Create y-locations
    set y grid \RHO_MIN \RHO_MAX \RHO_INC
    #
    # Read data
    open \data
    read grid data \NY .gridx_number.
    close
@}
`Plot Contours'
@{
    set graylevel .contour_graylevel.
    set clip on
    set line width 0.5
    draw contour -3 3 0.25 unlabelled
    #
    # wide line at 0 degrees
    set line width 2
    draw contour 0 unlabelled
@}
`Plot Image And Maybe Contours'
@{
    \imagefile = "image"
    set image range \zmin \zmax
    convert grid to image box \xmin  \ymin \xmax \ymax
    query \dohisto "Do histogram scaling? (yes|no)" ("yes")
    \incs = "no"
    if @{"\dohisto" == "yes"@}
        set image grayscale using histogram
    else
        \zinc = "0.25"
        query \incs "In linear scaling, band at an increment of \zinc?" ("yes")
        if @{"\incs" == "yes"@}
            set image grayscale black \zmin white \zmax increment \zinc
        else
            set image grayscale black \zmin white \zmax
        end if
    end if
    write image rasterfile to \imagefile
    show "wrote image rasterfile `\imagefile '"
    draw image
    draw image palette
    query \do_contours "Do contours as well (yes|no)" ("yes")
    if @{"\do_contours" == "yes"@}
        Plot Contours
    end if
    draw title "Example 8 -- \data black=\zmin white=\zmax"
    if @{"\dohisto" == "yes"@}
        draw title "Histogram enhanced grayscales"
    else
        if @{"\incs" == "yes"@}
            draw title "Grayscale banded at intervals of \zinc"
        end if
    end if
@}
if !..publication..
    draw time stamp
end if
Initialize Parameters
Initialize Axes
Initialize Files
Read Data
query \doimage "Draw image (yes|no)" ("no")
if @{"\doimage" == "yes"@}
    .contour_graylevel. = 1     # white contours 
    Plot Image And Maybe Contours
else
    .contour_graylevel. = 0     # black contours 
    Plot Contours
    draw title "Example 8 -- \data"
end if
quit
@end example
@c HTML -->




@c HTML <!-- newfile ImageExample.html "Gri: image example" "Examples" -->

@node   Grayscale Images, Combination, Contouring, Examples
@comment  node-name,  next,  previous,  up
@section Image created coarsely gridded data
This example reads gridded ascii station data (@code{Read Data}),
creates an interpolated image (@code{convert grid ...}), and then plots
the image.  

There are some other useful tricks in this example, such as calling
@code{awk} and @code{wc} from the unix system.

(In the plot shown, all @code{query} questions were answered with
carriage return, yielding the defaults; the @code{-p} flag was specified
on execution, so the time stamp was not drawn.)
@cindex axes, automatic drawing of

@c HTML <A HREF="./examples/example9.gif">
@c HTML <IMG ALT="Example 9" SRC="./examples/example9-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example9.gri">The command-file.</A> <P>

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example9.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-144
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example9}

@cindex example 9, plot dTdrho-rho section


@c HTML <!--
@example
# Example 9 -- Plot dTdrho-rho section

`Initialize Parameters'
@{
    \FILE_DATA = "example9a.dat" 	 # T vs rho
    \FILE_LOCN = "example9b.dat" 	 # section distances
    #
    # Following values from ~/eubex/processing/to_rho_bins/do_rho_inter
    \RHO_MIN = "28.1"
    \RHO_MAX = "27.5"
    \RHO_INC = "-0.002"
    \NY = "301"
    set missing value -99.0
    \xmin = "500"
    \xmax = "0"
    \xinc = "-100"
    \ymin = "28.1"
    \ymax = "27.8"
    \yinc = "-0.1"
    \zmin = "-10"               # black
    \zmax = "0"                 # white
@}
`Initialize Axes'
Set up axes.
@{
    set page landscape
    set x margin 5
    set x name "km"
    set x size 20
    set x axis \xmin \xmax \xinc
    set y margin 5
    set y name "$\sigma_T$"
    set y axis label horizontal
    set y axis \ymin \ymax \yinc
    set y format %.1f
    draw axes none
@}
`Initialize Files'
@{
    query \data "Data file?   " ("\FILE_DATA")
    query \locn "Station locn?" ("\FILE_LOCN")
@}
`Read Data'
@{
    # Read x-locations
    system \.awk. '@{print $2@}' < \locn > TMP
    system wc TMP | \.awk. '@{print $1@}' > NUM
    open NUM
    read .gridx_number.
    close
    system rm NUM 
    open TMP
    read grid x .gridx_number.
    close
    system rm TMP
    # Create y-locations
    set y grid \RHO_MIN \RHO_MAX \RHO_INC
    #
    # Read data
    open \data
    read grid data \NY .gridx_number.
    close
@}
if !..publication..
    draw time stamp
end if
Initialize Parameters
Initialize Axes
Initialize Files
Read Data
set image range \zmin \zmax
convert grid to image box \xmin  \ymin \xmax \ymax
query \dohisto "Do histogram scaling? (yes|no)" ("no")
if @{"\dohisto" == "yes"@}
    set image grayscale using histogram
end if
#
# Draw the image, then draw the axes.  If auto-drawing of axes had
# been relied upon, or if the axes had been drawn previously, parts
# of the axes would have been wiped out by spillover of the image.
draw image
draw axes frame
.axis_offset. = 0.25 		         # offset in cm
draw x axis at @{rpn ..ybottom.. yusertocm .axis_offset. -@} cm
draw y axis at @{rpn ..xleft..   xusertocm .axis_offset. -@} cm
.old. = ..fontsize..
set font size 0
draw y axis at @{rpn ..xright..  xusertocm .axis_offset. +@} cm right
set font size .old.
delete .old.
#
# All done.
draw title "Example 9 \data black=\zmin white=\zmax"
if @{"\dohisto" == "yes"@}
    draw title "Histogram enhanced grayscales"
end if
quit
@end example
@c HTML -->


@c HTML <!-- newfile ImageWithContours.html "Gri: image and contours" "Examples" -->

@node   Combination, Fancy, Grayscale Images, Examples
@comment  node-name,  next,  previous,  up
@section Combination of image and contour
@cindex image plot, with contours
@cindex contours on images

The following example reads gridded data and creates an image as in the
previous example, but also superimposes unlabelled white contour lines.

(In the plot shown, all @code{query} questions were answered with
carriage return, yielding the defaults; the @code{-p} flag was specified
on execution, so the time stamp was not drawn.)
@cindex example 10 (image plot with contours)

@c HTML <A HREF="./examples/example10.gif">
@c HTML <IMG ALT="Example 10" SRC="./examples/example10-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example10.gri">The command-file.</A> <P>

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example10.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example10}

@cindex example 10, draw image plot of flushing of dye out of cove


@c HTML <!--
@example
# Example 10 -- Draw image plot of flushing of dye out of cove
if !..publication..
    draw time stamp
end if
\file = "example10.dat"
query \contours "Superimpose contours? (yes|no)" ("yes")
query \file     "Input file name               " ("\file")
open \file
read line \header
read \D
read .nx.
read .ny.
set x name "distance along cove"
set y name "time"
set x grid 0 1 /.nx.
set x axis 0 1 0.5 0.1
set y grid 0 .ny. / .ny.
set y axis 0 .ny.
read grid data * * .ny. .nx.
set image range 0 20
set image grayscale black 20 white 0 increment 5
convert grid to image 
draw image
if @{"\contours" == "yes"@}
    set graylevel 1.0
    draw contour 0 20 1 unlabelled
    set graylevel 0.0
end if
draw axes
draw image palette left -1 right 21 increment 5
draw title "Example 10 -- file=\file header=`\header'"
quit
@end example
@c HTML -->




A color version of this is available as @file{example10color.gri}
(results not shown here) @xref{Set Image Colorscale}.
@cindex example 10color, draw color image plot

@c HTML <A HREF="./examples/example10color.gri">Click to see code</A>

@c HTML <!--
@example
# Example 10color -- Draw color image plot

# Test various colorscales.
# INSTRUCTIONS: Uncomment one of the following '\scale = ' statements

# CASE 1: From black at high values to white at low values
#\scale = "rgb 0 0 0 20.0 rgb 1 1 1  0.0 increment 5"

# CASE 2: From skyblue at 20 to tan for 0; traverse RGB space
#         See also case 5, which names the colors.
#\scale = "rgb 0.529 0.808 0.922 20.0 rgb 0.824 0.706 0.549 0.0 increment 5"

# CASE 3: From skyblue at 20 to tan for 0; traverse HSB space
#         Is it just me, or is this uglier than case 2?
#\scale = "hsb 0.548 0.426 0.922 20.0 hsb 0.095 0.334 0.824 0.0 increment 5"

# CASE 4: Use a spectrum; traverse HSB space
#\scale = "hsb 0 1 1 20.0 hsb 0.6666 1 1  0.0 increment 5"

# CASE 5: From skyblue to tan, traversing RGB space (by default)
#         (Compare case 2, which uses similar endpoints, with
#         colors specified with RGB values, and larger increment.)
#\scale = "skyblue 20.0 tan 0.0 increment 2"

# CASE 6: From skyblue to tan, traversing RGB space (by default)
#         Compare 2 and 5; note this has continuous increment
#\scale = "skyblue 20.0 tan 0.0"

# CASE 7: From blue to brown
\scale = "blue 20.0 brown 0.0 increment 2.5"

open example10.dat
read line \header
read \D
read .nx.
read .ny.
set x name "distance along cove"
set y name "time"
set x grid 0 1 /.nx.
set x axis 0 1 0.5 0.1
set y grid 0 .ny. / .ny.
set y axis 0 .ny.
read grid data * * .ny. .nx.
set image range 0 20
convert grid to image 
set image colorscale \scale
draw image

# Draw contours in white ink
set graylevel 1.0
draw contour 0 20 1 unlabelled
set graylevel 0.0

draw axes                               # redraw in case whited out 
draw image palette left -1 right 21 increment 5
set font size 9

# Title tells what method used
draw title "Used `draw image colorscale \scale'"

quit
@end example
@c HTML -->



@c HTML <!-- newfile FancyPlot.html "Gri: adding bells and whistles" "Examples" -->


@node   Fancy, Legend, Combination, Examples
@comment  node-name,  next,  previous,  up
@section Fancy x-y linegraph
@cindex fancy plot
The following code shows a fancy plot with lots of bells and whistles.
@cindex multiple panels, example
@cindex labels, example
@cindex graylevel for lines, example

@c HTML <A HREF="./examples/example11.gif">
@c HTML <IMG ALT="Example 11" SRC="./examples/example11-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example11.gri">The command-file.</A> <P>



@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example11.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example11}

@cindex example 11, fancy plot



@c HTML <!--
@example
# Example 11 -- Fancy plot
# Pen sizes, etc.
#
.thin. = 0.5                    # for whole data set
.thick. = 2                     # for bravo time period
.gray_for_guiding_lines. = 0.75 # for guiding lines
.tmin. = 1964                   # time axis
.tmax. = 1974
.tinc. = 5
.tincinc. = 1
.missing_value. = -9
\file = "./example11.dat"
#
# Guiding lines to draw on both panels.
#
.1xl. = 1962
.1yb. = -3
.1xr. = 1968
.1yt. = 3
.1slope. = @{rpn .1yt. .1yb. - .1xr. .1xl. - /@}
.1intercept. = @{rpn .1yb. .1slope. .1xl. * -@}
.2xl. = 1966.4
.2yb. = 3
.2xr. = 1980
.2yt. = -1
.2slope. = @{rpn .2yt. .2yb. - .2xr. .2xl. - /@}
.2intercept. = @{rpn .2yb. .2slope. .2xl. * -@}
#
# PANEL 1: Bravo time period.
#
set x margin 3
set x size 15
set y margin 3
set y size 5
# Draw border big enough for this and next panel.
draw border box @{rpn ..xmargin.. 2 -@} \
    @{rpn ..ymargin.. 2 -@} \
    @{rpn ..xmargin.. ..xsize.. + 2 +@} \
    @{rpn ..ymargin.. ..ysize.. 2 * 3 + + 2 +@} \
    0.2 0.75
set missing value .missing_value.
set ignore error eof
set x name "Year"
set x axis .tmin. .tmax. .tinc. .tincinc.
set y name "Area / 10$^5$km$^2$"
set y axis -3 3 1
draw axes
#
# Draw index lines 1 and 2.
# 
# Upward sloped line.
set line width .thin.
set graylevel .gray_for_guiding_lines.
if @{rpn .1intercept. ..xright.. .1slope. * + ..ytop.. <@}
    draw line from              \
        ..xleft..               \
        @{rpn .1intercept. ..xleft.. .1slope. * +@} \
        to                      \
        @{rpn ..ytop.. .1intercept. - .1slope. /@} \
        ..ytop..
else
    draw line from              \
        ..xleft..               \
        @{rpn .1intercept. ..xleft.. .1slope. * +@} \
        to                      \
        ..xright..              \
        @{rpn .1intercept. ..xright.. .1slope. * +@}
end if
set graylevel 0
# 
# Downward sloped line.
set line width .thin.
set graylevel .gray_for_guiding_lines.
if @{rpn .2intercept. ..xleft.. .2slope. * + ..ytop.. <@}
    draw line from              \
        @{rpn ..ytop.. .2intercept. - .2slope. /@} \
        ..ytop..                \
        to                      \
        ..xright..              \
        @{rpn .2intercept. ..xright.. .2slope. * +@}  
else
    draw line from              \
        ..xleft..               \
        @{rpn .2intercept. ..xleft.. .2slope. * +@} \
        to                      \
        ..xright..              \
        @{rpn .2intercept. ..xright.. .2slope. * +@}
end if
set graylevel 0
#
# Finally, draw the data curve on top, after first
# whiting out a background.
set input data window x .tmin. .tmax.
open \file
read columns x y
close
y /= 1e5
set line width ..linewidthaxis..
draw zero line
set line width @{rpn .thick. 3 *@}
set graylevel 1
draw curve
set graylevel 0
set line width .thick.
draw curve

#
# PANEL 2: Longer timescale.
#
delete x scale
set x margin bigger 5
set x size 10
set x name ""
set y name ""
set y margin bigger @{rpn ..ysize.. 3 +@}
#
# Draw long data set in thin pen.
set input data window x off
open \file
read columns x y
close
y /= 1e5
#
# Draw guiding lines, axes, etc.
set x axis 1952 1980 5 1
draw axes frame
set line width .thin.
set graylevel .gray_for_guiding_lines.
draw line from .1xl. .1yb. to .1xr. .1yt.
draw line from .2xl. .2yb. to .2xr. .2yt.
set graylevel 0
set line width ..linewidthaxis..
draw zero line


draw x axis at bottom
.old. = ..fontsize..
set font size 0
draw y axis at left
set font size .old.
delete .old.
#
# Draw full curve (first whiting out region around it).
set line width @{rpn .thin. 4 *@}
set graylevel 1
draw curve
set graylevel 0
set line width .thin.
draw curve
#
# Draw bravo time period (first whiting out region around it).
set input data window x .tmin. .tmax.
open \file
read columns x y
close
y /= 1e5
set line width @{rpn .thick. 3 *@}
set graylevel 1
draw curve
set graylevel 0
set line width .thick.
draw curve
#
# Done
set font size 20
\label = "Example 11 (Arctic ice anomaly)"
draw label "\label" at          \
    @{rpn 8.5 2.54 * "\label" width - 2 /@} \
    @{rpn ..ytop.. yusertocm 0.7 +@} \
    cm
if !..publication..
    draw time stamp
end if
quit
@end example
@c HTML -->




@c HTML <!-- newfile Legend.html "Gri: drawing legends for curve types etc" "Examples" -->


@node   Legend, Polygons, Fancy, Examples
@comment  node-name,  next,  previous,  up
@section Legends and annotated lines
@cindex drawing legends
@cindex legends
@cindex annotating lines
The following example shows how to handle annotated curves and legends. 


@c HTML <A HREF="./examples/example12.gif">
@c HTML <IMG ALT="Example 12" SRC="./examples/example12-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example12.gri">The command-file.</A> <P>

@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example12.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example12}

@cindex example 12, linegraph with key inside plot


@c HTML <!--
@example
# Example 12 -- Linegraph with key inside plot
set font size 10                # points (1in = 72pt)
set x size 10                   # cm
set y size 10                   # cm
set x name "Height"
set y name "Total Energy"

# Following axis setups not necessary; will autoscale if you
# remove these.
set x margin 3
set x axis 800 960 20
set y margin 3
set y axis -0.4 1 0.2

# Read data.  Format is columns (x, y1, y2, y3, y4)
open example12.dat
read columns x y
draw curve
draw label for last curve "1"

rewind
set line width @{rpn ..linewidth.. 1.5 *@}
read columns x * y
draw curve
draw label for last curve "2"

rewind
set line width @{rpn ..linewidth.. 1.5 *@}
read columns x * * y
draw curve
draw label for last curve "3"

rewind
set line width @{rpn ..linewidth.. 1.5 *@}
read columns x * * * y
draw curve
draw label for last curve "4"

# Draw the key.  
# NOTES:
# (1) This key is inside the plot; it's location was chosen 
#     after looking at the data.  To put the key in a different 
#     location, alter the .key_topleft_x. and .key_topleft_y. 
#     variables.  For example, you could put the key to the 
#     right of the plot by changing the next line to:
#     `.key_topleft_x. = @{rpn ..xsize.. 0.5 +@}'
# (2) The variable .dy_inc. is the spacing between lines in
#     the key.  It should be OK even if you change the
#     font size above.
.key_topleft_x. = 0.5           # cm right of left axis
.key_topleft_y. = 0.5           # cm below top axis
.dy_inc. = @{rpn ..fontsize.. pttocm 1.5 *@}

draw label "1 = Model 1A" at    \
    @{rpn ..xleft.. xusertocm .key_topleft_x. +@} \
    @{rpn ..ytop.. yusertocm .key_topleft_y. -@} cm

.key_topleft_y. += .dy_inc.
draw label "2 = Model 2A" at    \
    @{rpn ..xleft.. xusertocm .key_topleft_x. +@} \
    @{rpn ..ytop.. yusertocm .key_topleft_y. -@} cm

.key_topleft_y. += .dy_inc.
draw label "3 = Model 1B" at    \
    @{rpn ..xleft.. xusertocm .key_topleft_x. +@} \
    @{rpn ..ytop.. yusertocm .key_topleft_y. -@} cm

.key_topleft_y. += .dy_inc.
draw label "4 = Model 2B" at    \
    @{rpn ..xleft.. xusertocm .key_topleft_x. +@} \
    @{rpn ..ytop.. yusertocm .key_topleft_y. -@} cm

draw title "Example 12 -- Total heating vs height of boundary layer"
quit
@end example
@c HTML -->


@c HTML <!-- newfile Polygons.html "Gri: drawing polygons" "Examples" -->

@node   Polygons, TS Diagram, Legend, Examples
@comment  node-name,  next,  previous,  up
@section Drawing gray polygons
@cindex polygons, filled
@cindex gray level, example for polygons
The following example shows how to draw polygons of a graylevel that is
read in.  It also draws a bullet (within the polygon).  See the help
lines at the start.
@example
`Draw Polygon And Bullet'
Draw a polygon of a given graylevel, with a bullet
(black dot) at an indicated location.  The polygon
coordinates are read in by this command, as are
the graylevel and the location of the bullet.

Variables used:
  .black.
  .white.

Input data read: 

line   1:
  A code (which is ignored) and a graylevel
  to draw the polygon with. The value for this
  graylevel ranges from .black. (which codes
  to black ink on the paper) to .white.
  (which codes to blank paper).

line   2:
  An (x,y) location for the bullet.

line   3:
  Skipped.

line 4-n:
  Locations of vertices of polygon, ended with a blank line.
@{
  read .code. .graylevel. # Read line 1
  read .x. .y.            # Read line 2
  skip                    # Skip line 3
  read columns x y        # Read a polygon
  # Adjust .graylevel. to range between 0
  # (for black ink) and 1 (for white paper),
  # then set graylevel and draw polygon. 
  .graylevel. = @{rpn .graylevel. \
      .black. - .white. .black. - /@}
  set graylevel .graylevel.
  draw curve filled
  # Draw black bullet
  set graylevel 0
  draw symbol bullet at .x. .y.
  # Clean up local storage.
  delete .code. 
  delete .graylevel.
  delete .x.
  delete .y.
@}
@end example


@c HTML <!-- newfile TSDiagram.html "Gri: drawing TS diagrams" "Examples" -->

@node   TS Diagram, PDF Diagram, Polygons, Examples
@comment  node-name,  next,  previous,  up
@section Temperature-Salinity Diagram
@cindex oceanographic plots
@cindex oceanographic plots: isopycnals on TS diagrams
@cindex T-S diagram, example of drawing
@cindex t-s diagram, example of drawing
@cindex temperature-salinity diagram
@cindex isopycnals
Here is how you might draw an oceanographic "TS" (temperature salinity)
diagram: 
@cindex example 13, TS diagram, with isopycnals

@c HTML <A HREF="./examples/example13.gif">
@c HTML <IMG ALT="Example 13" SRC="./examples/example13-tiny.gif"
@c HTML ALIGN=top>
@c HTML </A>
@c HTML <A HREF="./examples/example13.gri">The command-file.</A>


@comment OLD @tex
@comment OLD {
@comment OLD \midinsert
@comment OLD \vskip 22cm
@comment OLD \special{psfile="./examples/example13.ps" 
@comment OLD hoffset=-72
@comment OLD voffset=-72
@comment OLD }
@comment OLD \endinsert
@comment OLD }
@comment OLD @end tex
@image{./examples/example13}

@c HTML <!--
@example
# Example 13 -- TS diagram, with isopycnals
#
# Draw Axes
set line width axis 0.25
set line width 0.75
.tic_size. = 0.1                # cm
set symbol size 0.03
.isopycnal_fontsize. = 8        # for isopycnal labels
.axes_fontsize. = 10            # for axes
set font size .axes_fontsize.
set x margin 2
set x size 10
set y margin 2
set y size 10
.Smin. = 33.4
.Smax. = 35.0
.Sinc. = 0.5
.Sincinc. = 0.1
.thetamin. = -2.0
.thetamax. = 11.0
.thetainc. = 1.0
.thetaincinc. = 1.0
set tic size .tic_size.
set x name "Salinity / PSU"
set y name "Potential Temperature / $\circ$C"
set x axis .Smin. .Smax. .Sinc. .Sincinc.
set y axis .thetamin. .thetamax. .thetainc. .thetaincinc.
set axes style offset
draw axes 1
set clip on
.old. = ..fontsize..
set font size .isopycnal_fontsize.
draw isopycnal 26.00
draw isopycnal 26.50 unlabelled
draw isopycnal 27.00
draw isopycnal 27.50 unlabelled
draw isopycnal 28.00
draw isopycnal 28.50 unlabelled
draw isopycnal 29.00
set clip off
set font size .old.
#
# Draw the data.
open example13.dat
read columns x y
draw symbol bullet
set font size ..
draw title "Example 13 -- TS diagram, with isopycnals"
quit
@end example
@c HTML -->

@c HTML <!-- newfile PDFDiagram.html "Gri: PDF Diagram" "Examples" -->


@node   PDF Diagram,  Running Means, TS Diagram, Examples
@comment  node-name,  next,  previous,  up
@section Probability Density Function Diagram
@cindex probability density function diagram
@cindex perl, use to create probability density function
A common application is to draw the probability density function for
(x,y) data.  Gri has no builtin facility to do this, but the following
example shows how to create the gridded PDF data using a call to the
@code{perl} system command.  The gridded data thus generated are
contoured, creating a PDF diagram.  As the comments in the program
state, the first call to Perl is specific to a particular dataset, and
can be ignored on first reading; it just creates the file
@file{tmp-xy.\.pid.}.

@example
# Draw prob-density-function TS diagram for Bravo data

# This first call to perl is specific to the
# particular (weird) dataset.  All that matters
# is that a file of (x,y) data is created, and
# stored in the file called `tmp-xy.\.pid.'
system perl <<"EOF"
#
# Slurp in x[], y[] data
$dir = "/users/dek/kelley/Labrador/bravo/data";
$Sfile = "$dir/S_25db_1day";
$Tfile = "$dir/T_25db_1day";
open(S, "$Sfile") || die "Can't open input $Sfile";
open(T, "$Tfile") || die "Can't open input $Tfile";
open(ST, ">tmp-xy.\.pid.") 
    || die "Can't open tmp-xy.\.pid.";
$day = 5;
$year = 1964;
while(<S>) @{
    @@S = split;
    $_ = <T>;
    @@T = split;
    if (240 < $day && $day < 360) @{
        for ($i = 0; $i < $#S; $i++) @{ #all depths
            print ST "$S[$i] $T[$i]\n";
        @}
    @}
    $day += 1;
    if ($day > 365) @{
        $year++;
        $day = 0;
    @}
    if ($year > 1967) @{ last; @}
@}
EOF

#
# Create 2D PDF for (x,y) data in file \infile
# storing the results in \outfile.  X ranges
# between the indicated limits, with the indicated
# binsize, as does y.  The synonyms defined
# on the next 4 lines are the only input this
# perlscript needs; the perlscript itself is
# quite general.  For details of what it does,
# particularly the scaling of the PDF, see
# the perl comments.
\xmin = "33.5"; \xmax = "35.5"; \xinc = "0.05";
\ymin = "-2.0"; \ymax = "11.0"; \yinc = "0.25";
\infile = "tmp-xy.\.pid."
\outfile = "tmp-grid.\.pid."
system perl <<"EOF"
#
# Prepare 2 dimensional probability-density-function
# dataset for contouring by Gri.  This reads (x,y)
# data from a file called $infile (defined below)
# and creates an output file called $outfile 
# (also defined below) containing the
# x-grid, the y-grid, and then the grid data, 
# suitable for reading/contouring by the Gri
# commands
#       open tmp-grid.\.pid.
#       read .number_of_data.
#       read grid x
#       read grid y
#       read grid data
#       draw contour
# 
# The values in the output grid are defined so
# that they sum to the reciprocal of the 
# product of the x binsize and y binsize (see
# definition of $factor below).
#
$xmin = \xmin; $xmax = \xmax; $xinc = \xinc;
$ymin = \ymin; $ymax = \ymax; $yinc = \yinc;
$infile = "\infile";
$outfile = "\outfile";
#
# Slurp in the x[], y[] data, storing 
# the total number of data in $n.
open(IN,  "$infile")   || die "Can't open infile";
open(OUT, ">$outfile") || die "Can't open outfile";
$n = 0;
while(<IN>) @{
    ($x[$n], $y[$n]) = split;
    $n++;
@}
#
# Zero out matrix (stored in a linear array scanned 
# as one reads a book).
$cols = int(1 + ($xmax - $xmin) / $xinc);
$rows = int(1 + ($ymax - $ymin) / $yinc);
for ($y = $ymax; $y > $ymin; $y -= $yinc) @{
    for ($x = $xmin; $x < $xmax; $x += $xinc) @{
        $l = int(($x - $xmin) / $xinc 
            + $cols * int(($y - $ymin) / $yinc));
        $sum[$l] = 0;
    @}
@}
#
# Cumulate (x,y) data into the matrix
$inside = 0;
for ($i = 0; $i < $n; $i++) @{
    if ($ymin <= $y[$i] && $y[$i] <= $ymax 
        && $xmin <= $x[$i] && $x[$i] <= $xmax) @{
        $l = int(($x[$i] - $xmin) / $xinc 
            + $cols * int(($y[$i] - $ymin) / $yinc));
        $sum[$l]++;
        $inside++;
    @} else @{
        print STDERR "($y[$i], $x[$i]) clipped\n";
    @}
@}
#
# Print number of points (to allow renormalization
# if the user wishes)
print OUT "$inside\n";
#
# Print x grid, y grid, then grid itself
for ($x = $xmin; $x < $xmax; $x += $xinc) @{
    printf OUT "%lg\n", $x;
@}
print OUT "\n";
for ($y = $ymax; $y > $ymin; $y -= $yinc) @{
    printf OUT "%lg\n", $y;
@}
print OUT "\n";
#
# The $factor variable scales the PDF.
$factor = 1 / $xinc / $yinc / $inside;
for ($y = $ymax; $y > $ymin; $y -= $yinc) @{
    for ($x = $xmin; $x < $xmax; $x += $xinc) @{
        $l = int(($x - $xmin) / $xinc 
            + $cols * int(($y - $ymin) / $yinc));
        printf OUT "%lg ", $factor * $sum[$l];
    @}
    print OUT "\n";
@}
EOF

# Axes
set x margin 3
set x margin 6
set x name "Salinity [PSU]"
set y name "Potential Temperature [$\circ$C]"
set x axis 34.5 34.8 0.1
set y axis 5 9 1
draw axes

# PDF
open tmp-grid.\.pid.
read .number_of_data.
read grid x
read grid y
read grid data
.smooth. = 0

# Contours.  Use clipping, since the axes are
# zooming in on part of the PDF.
set font size 8
set contour label position centered
set clip postscript on
set line width rapidograph 4x0
draw contour 0.2 2.2 0.4 unlabelled
set line width rapidograph 0
draw contour 0.4 2.4 0.4 
set clip postscript off
end if
@end example


@c HTML <!-- newfile RunningMeans.html "Gri: running means" "Examples" -->


@node   Running Means, Finite Element Model Mesh, PDF Diagram, Examples
@comment  node-name,  next,  previous,  up
@section Running-Mean Skyline Diagram
@cindex  Running-Mean Skyline Diagram
Timeseries data are often cast into running means; e.g. a temperature
record might be cast into monthly mean values.  The following example
shows how to use a perl script to accomplish this easily, producing a
graph with both the raw data (bullets) and the running mean (a skyline
plot).

@example
`Bin with  x .min. .max. .inc. \in_file \out_file'

Creates \out_file from \in_file.  In each of these
files, column 1 represents x and column 2 represents
y.  The \out_file file contains the average values
of y in x bands of width .inc., centred at .min.,
(.min.+.inc.), up to .max, and with missing values
inserted in bands with no x-data in \in_file.
Each x-band is represented in \out_file by a
plateau in y, and adjacent bands with
non-missing data are connnected by vertical
lines; the effect is a skyline plot of the
banded means.  Sample application: plot
monthly means of a variable.
@{
    if @{rpn \.words. 8 !=@}
        show "ERROR: `\.proper_usage.' called without"
        show " giving all parameters"
        quit 1
    end if
    system perl <<"EOF"
    $min = \.word3.;
    $max = \.word4.;
    $inc = \.word5.;
    open(IN,   "\.word6.")
        || die "`\.proper_usage': no \\in_file";
    open(OUT, ">\.word7.")
        || die "`\.proper_usage': no \\out_file";

    $n = ($max - $min) / $inc;
    #
    # Set up bins.
    for($i = 0; $i <= $n; $i++) @{
       $xx[$i] = 0;
       $yy[$i] = 0;
       $nn[$i] = 0;
    @}
    while(<IN>) @{
        ($x, $y) = split(' ');
        $i = int(0.5 + ($x - $min) / $inc);
        $i =      0 if $i <      0;
        $i = $n - 1 if $i > $n - 1;
        $xx[$i] += $x;
        $yy[$i] += $y;
        $nn[$i]++;
    @}
    for($i = 0; $i <= $n; $i++) @{
        if ($nn[$i] > 0) @{
            $xx[$i] /= $nn[$i];
            $yy[$i] /= $nn[$i];
            $xleft  = $min + $inc * ($i - 0.5);
            $xright = $min + $inc * ($i + 0.5);
            #
            # If datum to left non-missing,
            # just draw vertical line
            # down to the last yy value.
            if ($i > 0 && $nn[$i - 1] > 0) @{
                print OUT "$xleft $yy[$i - 1]\n";
            @} else @{
                print OUT "$xleft \.missingvalue.\n"
            @}
            print OUT "$xleft  $yy[$i]\n";
            print OUT "$xright $yy[$i]\n";
        @}
    @}
EOF
@}

# Bin into months
Bin with x 1964 1974 @{rpn 1 12 /@} \
    timeseries.dat tmp.dat
open tmp.dat
read columns x y
close
draw curve                      # skyline of means
open timeseries.dat
read columns x y
close
draw symbol bullet              # data
system rm -f tmp.dat            # clean up
@end example


@c HTML <!-- newfile FEM.html "Gri: Finite Element Model mesh" "Examples" -->


@node   Finite Element Model Mesh, New Commands, Running Means, Examples
@comment  node-name,  next,  previous,  up
@section Finite Element Model mesh
@cindex  Finite Element Model mesh
@cindex FEM mesh plot
@cindex mesh plot for FEM

Finite Element Models (used in fluid mechanics) employ non-rectangular
meshes, and plotting these meshes requires a few intermediate steps.
Consider the common case of triangular elements.  Suppose two data files
exist describing the mesh, the first, @file{model.nodes} say, consists
of a description of the x-y coordinates of the nodes (vertices) of the
triangles.  The second, @file{model.elements} say, consists of a
description of which triplet of nodes defines each triangle in the mesh.
Here, from a sample application, is a node file called
@file{model.nodes}:
@example
1	1	1
2	2	1
3	1	2
4	3	1.5
5	2	2
6	1.5	3
@end example
@noindent
Here is the corresponding file of the elements, called @file{model.elements}:
@example
1	1	2	3
2	2	5	3
3	2	4	5
4	3	5	6
@end example
@noindent

In each of these files, the first column is a reference number.  Thus,
@file{model.elements} indicates that the first triangle is defined by
the nodes numbered @code{1}, @code{2} and @code{3} as defined in
@file{model.nodes}.  More specifically, the triangle is defined by
vertices at (x,y) locations (1,1), (2,1), and (1,2).

A Gri program, named @file{FEM.gri}, to draw the nodes is the following.
@example
set missing value -99.99
# Create data using perl-script ...
system FEM.pl model.nodes model.elements > tmp
# ... then plot it ...
open tmp
read columns x y
close
draw curve
# ... and, finally, clean up the temporary file
system rm tmp
@end example
@noindent
The work of interpreting the data files is done by the perlscript that
follows, named @file{FEM.pl}
@example
#!/usr/bin/perl -w
$missing = -99.99;              # missing value
$node_file = $ARGV[0];
$element_file = $ARGV[1];
open (NODE, $node_file)
    or die "Cannot open '$node_file' file";
open (ELEM, $element_file)
    or die "Cannot open '$element_file' file";

# Read in node information, creating arrays 
# named $node_x[] and $node_y[]. Check that 
# the first column (the index) makes sense.
$max_node = 1;
while(<NODE>) @{
    ($index, $node_x[$max_node], $node_y[$max_node])
        = split;
    die "Node mismatch at index=$index" 
        if ($index != $max_node);
    $max_node++;
@}

# Read in triangle elements, into arrays
# $a[], $b[], and $c[].  Check that the 
# first column (the index) makes sense.
$max_elem = 1;
while(<ELEM>) @{
    ($index, $a[$max_elem], $b[$max_elem], $c[$max_elem]) 
        = split;
    die "Element mismatch at index=$index" 
        if ($index != $max_elem);
    $max_elem++;
@}

# Print out triangles suitable for plotting in gri.
for ($i = 1; $i < $max_elem; $i++) @{
    print $node_x[$a[$i]], " ", $node_y[$a[$i]], "\n";
    print $node_x[$b[$i]], " ", $node_y[$b[$i]], "\n";
    print $node_x[$c[$i]], " ", $node_y[$c[$i]], "\n";
    # Repeat first, to close the triangle.
    print $node_x[$a[$i]], " ", $node_y[$a[$i]], "\n";
    print $missing, " ", $missing, "\n";
@}
@end example

@c HTML The resultant image is below.
@c HTML <IMG ALT="FEM image" SRC="./examples/FEM.gif">



@c HTML <!-- newfile NewCommands2.html "Gri: adding new commands" "Examples" -->


@node   New Commands, Handling Data, Finite Element Model Mesh, Examples
@comment  node-name,  next,  previous,  up
@section Using new commands to speed Gri programming
@cindex new commands, example
@cindex repeated commands
New commands can speed your Gri programming.  In the following example,
note how the syntax is checked withing the new command, to ensure that
things are correct.  Also note that the filenames contain periods and
slashes, so they will be broken up into several words by Gri; to prevent
this, they are enclosed in double quotes.

@example
show "Plot locations of depth measurements."

`draw depths from \file'
Draw depth data stored in indicated file.
Note that if the filename contains periods
or slashes, you'll have to enclose it in
double quotes, as in the second example:
  draw depths from file upper_cove
  draw depths from file ../old_data/upper_cove
@{
  if @{rpn \.words. 4 !=@}
    show "FATAL ERROR in `\.proper_usage.':"
    show "  Require 4 words, but got \.words. words."
    quit
  end if
  set symbol size 0.025
  show "Depths from file \.word3."
  open \.word3.
  read columns * x y
  close
  draw symbol plus
@}

if !..publication..
  draw time stamp
end if
set page landscape
set y margin 4
set y axis 44.30 44.38 0.05 0.01
set y size 10
set x margin 4
set x axis 64.35 64.23 -0.05 -0.01
resize x for maps
set x name "Longitude / $\circ$W"
set y name "Latitude / $\circ$N"
draw axes

show "--- first map ---"
draw depths from "../digitized/final/1"
draw depths from "../digitized/final/2"
draw depths from "../digitized/final/3"
draw depths from "../digitized/final/4"
draw depths from "../digitized/final/5"
draw depths from "../digitized/final/6"
draw depths from "../digitized/final/beach1"

show "--- second (insert) map ---"
draw depths from "../digitized/final/insert1"
draw depths from "../digitized/final/insert2"
draw depths from "../digitized/final/insert3"
draw depths from "../digitized/final/insert4"
draw depths from "../digitized/final/insert5"
draw depths from "../digitized/final/insert6"
draw depths from "../digitized/final/insert7"
draw depths from "../digitized/final/insert_beach1"
quit
@end example





@c HTML <!-- newfile Data.html "Gri: handling data" "Handling Data" -->

@node   Handling Data, Handling Headers, New Commands, Top
@comment node-name,  next,  previous,  up
@chapter Handling Data
@cindex data, dealing with odd datasets

Gri can handle many different sorts of data file formats, including
ascii files, binary files in machine format, and the very powerful and
increasingly popular netCDF format.
(For more information on netCDF format, see
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html})
@c HTML </a>

This chapter concentrates on ascii format.  The overall message is that
you should @emph{not} have to modify your data files to work with Gri.
For example, many oceanographic data files have header lines at the
start.  With other plotting systems, users find themselves stripping off
these headers as a first step in data analysis.  This is done to make
the data look like a tabular list, or matrix, for reading by matlab or
various spreadsheet-like programs.  (It is not necessary to do this in
matlab, by the way; you should use the matlab @code{fgets} command
instead, to read and skip the header lines.  However, it is almost
always necessary to do this in spreadsheet-like programs, especially the
GUI-based ones, because the paradigm is often to click on columns of the
data that represent variables of interest.)

The difficulty with stripping off header lines is that unless you are
careful, you can lose the header information unless you are careful to
put it in a separate file with an appropriate filename, and then just as
careful to archive the header along with the data, and to send both to
your colleague who has requested the data, etc.  Often the header
information seems unimportant to you at the moment, but it may be
crucial to you later on, or to the next person who looks at the data!

In Gri it is very easy to handle headers within files.  It's also easy
to handle data that are in somewhat odd formats, or that must be
manipulated mathematically or textually to make sense.

@menu
* Handling Headers::            How to skip or read header lines
* Manipulating Columns::        How to mess about with column data
@end menu

@node   Handling Headers, Manipulating Columns, Handling Data, Handling Data
@comment  node-name,  next,  previous,  up

@section Handling headers
@subsection Case 1 -- known number of header lines
@cindex skipping header lines
@cindex header lines, skipping

This is easy.  If you know that the file has, say, 10 header lines, you
can just do this:
@example
open file
skip 10
read columns x y
...
@end example

@subsection Case 2 -- header itself indicates number of header lines
Quite often the first line of a file will indicate the number of header
lines.  For example, suppose the first line contains a single number,
indicating the number of header lines to follow:
@example
open file
read .skip.
skip .skip.
read columns x y
...
@end example

@subsection Case 3 -- header lines marked by a textual key
Sometimes header lines are indicated by a textual key, for example, the
characters @code{HEADER} at the start of the line in the file.  The easy
way to skip such a header is to use a system command.  Depending on your
familiarity with the operating system (here presumed to be Unix), you
might choose to use Grep, Awk, or Perl.  Here are examples:
@example
open "grep -v '^HEADER' file |"
@end example
For more on the @code{|} mechanism, @xref{Open}.  The Grep command
prints lines which do not match the indicated string
(because of the @code{-v} switch), and the @code{^} character stands for
the start of the line @xref{Grep}.  Thus all lines with the key word at the
@emph{start} of the line are skiped.

@subsection Case 4 -- reading and using information in header
@cindex reading information from header lines
@cindex header lines, reading information from

Consider a dataset in which the first line gives the time of
observation, followed by a list of observations.  This might be, for
example, an indication of the data taken from a weather balloon released
at a particular time from a fixed location, with the main data being air
temperature as a function of elevation of the balloon.  The time
indication might be, for instance, the hour number.  One might need to
know the time to print a label on the diagram.  You could do that by:
@example
open file
read .time.
read columns x y
draw curve
sprintf \label "Time of observation is %f hour" .time.
draw title "\label"
@end example
@noindent
where the @code{sprintf} command has been used to change the numerical
time indication into a synonym that can be inserted into a quoted string
for drawing the title of the diagram @xref{Sprintf}.  Here the time has
been assumed to be a decimal hour.  You might also have three numbers on
the line, perhaps a day, an hour and a minute.  Then you could do
something like
@example
open file
read .d. .h. .m.
read columns x y
draw curve
sprintf \label "Obs. %.0f:%.0f, day %.0f" .h. .m. .d.
draw title "\label"
@end example
@noindent
Here the @code{%.0f} code is used to ensure no numbers will be written
after the decimal point.  Naturally, you could convert this to a decimal
day, by e.g.
@example
...
.dday. = @{rpn .day. .hour. 24 / .min. 24 / 60 /@}
sprintf \label "Decimal day is %.4f" .dday.
...
@end example
@noindent
(Some of you might know how many minutes in a day, but I'm silly so I
kept the extra mathematical step -- nothing is lost by being
straightforward!)

@cindex waterfall plots
Data set often have information on observation location as well as time,
and I hope the above suggests how to handle that.  It is very common, by
the way, to want to draw so-called "waterfall" plots, in which many
curves are drawn, each one offset by some amount.  Sometimes you'll want
the offset to be constant, but just as often you'll want the offset to
be dependent on information in a header, such as the time of
observation.  I hope the above indicates roughly how you might handle
this, but a snippet is:
@example
open file1
read .time.
read columns x y
y += @{rpn .time. 100 /@}
draw curve

open file2
read .time.
read columns x y
y += @{rpn .time. 100 /@}
draw curve
...
@end example
@noindent
Here a scale factor of 100 has been applied to y, to convert time units
into an offset in terms of y.

@section Ignoring columns that are not of interest
Quite often a dataset will have many columns, of which only a couple are
of interest to you.  Consider for example an oceanographic data which
has columns storing, in order, these variables: (1) depth in water
column, (2) "in situ" temperature, (3) "potential" temperature, (4)
salinity, (5) conductivity, (6) density, (7) sigma-theta, (8) sound
speed, and (9) oxygen concentration.  But you might only be interested
in plotting a graph of salinity on the x-axis and depth on the y-axis.
Here are several ways to do this:
@example
open file
read columns y * * x
draw curve
@end example
where the @code{*} is a place-keeper to indicate to skip that column.
For a large number of columns, or as an aesthetic choice, you might
prefer to write this as
@example
open file
read columns y=1 x=4
draw curve
@end example

Many users would just as soon not bother with this syntax, preferring
instead to use system tools with which they are more familiar.  So a
Gawk user might write
@example
open "gawk 'print($1, $4)' file |"
read columns y x
draw curve
@end example
@noindent
For more on the Gawk command, @xref{Awk}.

@node   Manipulating Columns, Commands, Handling Headers, Handling Data
@comment  node-name,  next,  previous,  up
@section Manipulating columns

@cindex manipulating columns
@cindex columns, manipulating

Suppose the file contains (x,y), but you wish to plot 2y times x.  You
could do the doubling of y within Gri, as
@example
open file
read columns x y
y *= 2
draw curve
@end example
or you could use a system tool, e.g. gawk, as in this example @xref{Awk}.

@example
open "gawk 'print($1,2*$2)' file|"
read columns x y
draw curve
@end example

The latter is preferable in the sense that it is more powerful.  The
reason for this is that Gri allows you to manipulate the x and y
columns, using so-called RPN mathematics @xref{rpn Mathematics}, but
you cannot blend the columns.  For example, you cannot easily form the
ratio y/x in Gri.  (Actually, you can, by looping through your data and
doing the calculation index by index, but if you knew that already you
wouldn't need to be reading this section!)  Such blending is trivial in
the operating system, though, as in the following Gawk example @xref{Awk}.
@example
open "gawk 'print($1, $2/$1)' file |"
read columns x y
draw curve
@end example

@section Combining columns from different files
Suppose you want to plot a column (@code{y}, say) from one file versus a
second column (@code{x}) from a second data file.  The easy way is to
use a system command to create a new file, for example the Unix command
@code{paste} -- but of course you don't want to clutter your filesystem
with such files, so you should do this withing Gri:
@example
open "paste file1 file2 |"
read columns x y
draw curve
@end example




@c HTML <!-- newfile Commands.html "Gri: complete list of commands" "Gri Commands" -->

@node   Commands, Overview Of Gri Commands, Manipulating Columns, Top
@comment  node-name,  next,  previous,  up
@chapter List of Commands in the Gri Language
@cindex programming, complete list of Gri commands
@cindex syntax of Gri commands
@cindex keywords of Gri commands
@cindex gri commands, complete list of
@cindex commands, complete list of
@cindex spelling of gri commands
@cindex gray vs Grey spelling
@cindex grey vs Gray spelling
@cindex colour vs Color spelling

Commands are listed below in the order in which they are defined in the
@file{gri.cmd} file @xref{Options On Command Line}.  What you see here
is similar to, but not identical to, the text of the online help.  Gri
usually accepts both American and English spellings
(As an example of spelling latitude, Gri accepts @code{grey} anywhere the
manual says @code{gray}, and @code{colour} for @code{color}.)


Here is an introduction to Gri commands and their syntax:
@menu
* Overview Of Gri Commands::    General classification of commands
* Command Syntax::              Syntax of the commands
@end menu

Here is a list of all comands:
@menu
* Cd::                          Change directory
* Close::                       Close a file
* Convert::                     Convert various data types
* Create::                      Create columns from specified function
* Debug::                       Set to debugging mode
* Delete::                      Delete various data structures
* Differentiate::               Differentiate things
* Draw::                        Draw various things
* Expecting::                   Make Gri warn of incompatibilites
* Filter::                      Filter (smooth) various data structures
* Flip::                        Flip or transpose grid or image
* Get Env::                     Get a unix environment variable
* Heal::                        Interpolate across missing values
* Help::                        Give on-line help
* If::                          If and if/else statements
* Ignore::                      Ignore some of data recently read in
* Input::                       Input PostScript file into output file
* Insert::                      Insert a separate file into the current one
* Interpolate::                 Interpolate grid data to new x/y grid
* List::                        List source of a gri command
* Ls::                          List files in current directory
* Mask::                        Mask the image
* New::                         Get space for new variable or synonym
* Newpage::                     Go to a new page
* Open::                        Open a data file
* Postscript::                  Insert a line into the PostScript file
* Pwd::                         Print working directory
* Query::                       Get user input
* Quit::                        Exit from gri
* Read::                        Read something
* Regress::                     Do linear regressions on columnar data
* Reorder::                     Reorder columns
* Rescale::                     Re-determine scales for x/y axes
* Resize::                      Resize plot width/height for maps
* Return::                      Return early from command or insert file
* Rewind::                      Rewind data file to beginning
* Rpnfunction::                 Define an rpn function
* Set::                         Set various preference flags, etc
* Show::                        Show values of various things
* Skip::                        Skip some lines in data file
* Smooth::                      Smooth data
* Sprintf::                     Print variable values into a synonym
* State::                       Save or restore the graphics state
* Superuser::                   Enable some programmers debugging commands
* System::                      Performing system commands within gri
* While::                       Loop over some code while a condition is true
* Write::                       Write data to a file
@end menu


@c HTML <!-- newfile CommandsOverview.html "Gri: Overview of commands" "Gri Commands" -->

@node   Overview Of Gri Commands, Command Syntax, Commands, Commands
@comment  node-name,  next,  previous,  up
@section Overview of Gri Commands
The first word of a command hints at the meaning, but apart from that,
here is a rough guide:

@itemize @bullet
@item @emph{File manipulation}
Commands are @code{open}, @code{close}, @code{skip}, @code{read}, and
@code{rewind}.
@item @emph{Control parameters}
Various @code{set} commands control values of parameters, like size of plot,
linewidth, font, etc.
@item @emph{Drawing things}
Various @code{draw} commands let you draw data, axes, etc.
@item @emph{Interaction with user}
The @code{query} command gets instructions from the user.  The
@code{show} command displays messages to user.
@item @emph{Control program flow}
The @code{if} statement controls optional execution of commands
@xref{If Statements}.  The @code{while} statement allows loops.
@item @emph{Directory control}
The @code{pwd}, @code{cd} and @code{ls} commands do the usual unix
things.
@item @emph{Interaction with operating system}
The @code{system} command passes instructions to the operating system;
the output may be saved into a synonym by using 
@code{\syn = system ...}.  The @code{get env} command determines the value of any
unix environment variables the system has defined.  For more discussion
@xref{Operating System}.
@item @emph{Statistics}
Some very limited capabilities exist; for example, @code{regress} does
linear regression.
@item @emph{Mathematics}
Simple mathematical manipulation of column, grid, and image data is
provided.  Also, wherever Gri expects a number, it will accept a
reverse-polish expression; for example, @code{set x size 10} could also
be written @code{set x size @{rpn 20 2 /@}}.  For details
@xref{Mathematics}.
@end itemize

The data types in Gri are columns, grids, images, scalar variables
and ``synonyms'' that is, strings @xref{Synonyms},
@xref{Variables}.


@c HTML <!-- newfile CommandSyntax.html "Gri: Command Syntax" "Gri Commands" -->
@node   Command Syntax, Cd, Overview Of Gri Commands, Commands
@comment  node-name,  next,  previous,  up
@section Command syntax
The syntax description is enclosed within angled single quotes, optional
items are enclosed in square brackets, multiword items are enclosed in
curly braces, and vertical bars separate different legitimate choices.
For example, the documentation item for the command for drawing contours
@example
`draw contour \
    [.value. |  \
      @{.min. .max. .inc. [.inc_unlabelled.]@}] \
    [unlabelled]'
@end example
@noindent
indicates that following are legal:
@example
draw contour                   # gri selects levels
draw contour unlabelled        # " but unlabelled
draw contour 10                # single contour line
draw contour 10 unlabelled     # " but unlabelled
draw contour 0 100 10          # contours at z=0,1,
draw contour 0 10 1 unlabelled # " but unlabelled
# contours at 0, 0.1, ... labelled at 0, 1
draw contour 0 10 1 0.1
@end example

@noindent
Note that items enclosed in braces must appear in their entirety; for
example,
@example
draw contour 0 10              # WRONG; missing .inc.
@end example
@noindent
which might look similar @code{draw contour .min. .max. .inc.} to you,
looks like garbage to Gri.  Gri will recognize it as an attempt at the
@code{draw contour} command (because the first 2 words match the syntax)
but it will then get confused, spit out an error message, and quit.


@c HTML <!-- newfile Cd.html "Gri: `cd' command" "Gri Commands" -->


@node   Cd, Close, Command Syntax, Commands
@comment  node-name,  next,  previous,  up
@section The @code{cd} Command
@cindex changing directories
@cindex directories, changing
@cindex @code{cd} command
@findex cd
@example
`cd [\pathname]'
@end example
@noindent
If a pathname specified, change to that directory.  Normal unix
filenames are used, as in the C-shell convention.  For example, the
commands@code{cd ~/src} and @code{cd $HOME/src} are equivalent.  You may
specify relative pathnames as in @code{cd ../sister_directory}.

If no \pathname directory path specified, go to the home directory,
exactly as @code{cd ~} and @code{cd $HOME} do.


@c HTML <!-- newfile Close.html "Gri: `close' command" "Gri Commands" -->

@node   Close, Convert, Cd, Commands
@comment  node-name,  next,  previous,  up
@section The @code{close} Command
@cindex files, closing
@cindex closing files
@findex close
@cindex @code{close} command
@example
`close [\filename]'
@end example
@noindent
If no filename is specified, close the most recently opened data-file;
otherwise close indicated file.


@c HTML <!-- newfile Convert.html "Gri: `convert' command" "Gri Commands" -->

@node   Convert, Convert Columns to Grid, Close, Commands
@comment  node-name,  next,  previous,  up
@section The @code{convert} Command

Various @code{convert} commands:
@menu
* Convert Columns to Grid::      Create grid from (x,y,f) data
* Convert Columns to Spline::    Create spline (x',y') from (x,y) data
* Convert Columns From Polar to Rectangular:: As it says
* Convert Columns From Rectangular to Polar:: As it says
* Convert Grid to Columns::      Create (x,y,f) data from grid
* Convert Grid To Image::        Create an image from grid data
* Convert Image to Grid::        Create a grid from image data
@end menu


@node   Convert Columns to Grid, Convert Columns to Spline, Convert, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert columns to grid} @dots{} Command
@findex convert columns to grid
@cindex @code{convert columns to grid} command
Various forms exist
@example
`convert columns to grid OPTIONS'
@end example
@noindent
where the @code{OPTIONS} may be omitted or
selected from this list:
@example
`neighbor'
`boxcar    [.xr. .yr. [.n. .e.]]'
`objective [.xr. .yr. [.n. .e.]]'
`barnes    [.xr. .yr. .gamma. .iter.]'
@end example
@noindent
(For more discussion on the methods, @xref{Ungridded Data}.)

All these commands ``grid'' columnar (x,y,z) data.  That is, they fill
up a grid based on some form of interpolation of the possibly randomly
spaced columnar data.  There are many methods in existence for doing
this, and Gri implements several of them as alternatives.

The grid will have been defined by commands such as @code{set x grid},
@code{set y grid}, @code{read grid x} and @code{read grid y}.  As of
version 2.1.9, Gri does not require a grid to have been pre-defined; it
will create a regular 20 by 20 grid, spanning the range of x and y data,
as a default.  This is a good starting point in many cases.

@table @emph
@item `neighbor' method
Very fast but very limited.
@item `boxcar' method
Slower but a lot better.  Still, this can produce noisy contours if the
data are not densely and uniformly ditributed through domain.
@item `objective' method
Somewhat slower than `boxcar', but produces better fields since the
averaging function is smooth.
@item `barnes' method
Somewhat slower than `objective', but only by a constant factor (that
is, independent of number of data).  This produces by far the best
results, since the smoothing function has variable spatial scale.  This
is the default method if no method is supplied.
@end table

All except the @code{neighbor} method may take optional arguments to
define the x and y scales of the smoothing function (called @code{.xr.}
and @code{.yr.}).  (The barnes method has two other optional arguments
-- see below.)  If you do not supply these arguments, Gri will make a
reasonable choice and inform you of its decision.  Many users find that
it's best to @code{convert columns to grid} with no additional
parameters as a first step, to get advice on values to use for the
optional parameters.

The default @code{.xr.} and @code{.yr.} are calculated by determining
the span in x and in y directions, and dividing each by the square root
of the number of data points.  These numbers are then multiplied by the
square root of 2.  The method is as proposed by S. E. Koch and M.
DesJardins and P. J. Kocin, 1983.  ``An interactive Barnes objective map
anlaysis scheme for use with satellite and conventional data,'',
J. Climate Appl.  Met., vol 22, p. 1487-1503.

If @code{.xr.} and @code{.yr.} were supplied but negative, then Gri
interprets this as an instruction to modify the default values,
described in last paragraph, by multiplying by the absolute values of
the negative numbers given, instead of muliplying by square root of 2.

If the @code{chatty} option is turned on 
then Gri will print out the values of
(dx,dy) that it has 
calculated; this gives you some guidance for supplying your own values
of @code{(.xr.,.yr.)} if you choose to supply them yourself.  It is also
a good idea to let these parameters be a guide for your grid spacing;
for example, Koch et al., 1983, suggest using grid spacing of 0.3 to 0.5
times (dx,dy).

And now, the details @dots{}

@itemize @bullet
@item @emph{``Neighbor'' method}
The @code{convert columns to grid neighbor} method is useful for (x,y,z)
data which are already gridded (i.e., for which x and y take only values
which lie on the grid), or nearly gridded.  The (x,y,z) data are scanned
from start to finish. For each data point, the nearest grid point is
found.  Nearness is measured as Cartesian distance, with scale factor
given by the distance between the first and second grid points.  In
other words, distance is given by D=sqrt(dx*dx+dy*dy) where dx is ratio
of distance from data point to nearest grid point, in x-units, divided
by the difference between the first two elements of the x-grid, and dy
is similarly defined.  Once the grid point nearest the data point is
determined, Gri adds the z-value to a list of possible values to store
in the grid.  Once the entire data set has been scanned, Gri then goes
back to each grid point, and chooses the z-value of the data point that
was nearest to the grid point -- that is, it stores the z value of the
(x,y,z) data triplet which has minimal D value.  Note that this scheme
is independent of the order of the data within the columns.

@cindex computational cost, of @code{convert columns to grid} command

The @code{neighbor} method is useful when the data are already
pre-gridded, meaning that the (x,y,z) triplets have x and y values which
are already aligned with the grid.  @emph{Computational cost:} For
@code{P} data points, @code{X} x-grid points, and @code{Y} y-grid
points, the method calculation cost is proportional to
@code{P*[log2(X)+log2(Y)]} where @code{log2} is logarithm base 2.
As discussed below, this is often several orders of magnitude lower than
the other methods of gridding.
@item @emph{``Objective'' method}
In the @code{objective} method, a smoothing technique known as objective
mapping is applied.  It is essentially a variable-size smoothing filter
of approximately Gaussian shape (it is method ``two'' of Levy and Brown
[1986 J. Geophysical Res. vol 91, p 5153-5158]) The parameters
@code{.xr.} and @code{.yr.} give the width of the filter.

With the optional additional parameters @code{.n.} and @code{.e.} are
specified, then grid values will be assigned the missing value if there
are fewer than @code{.n.} (x,y,f) data in the neighborhood of the
gridpoint, even after enlarging the neighborhood by widening and
heightening by root(2) up to @code{.e.} times.  (The enlargement is only
done if fewer than @code{.n.} points are found.)  If these parameters
are not specified in the command, then values @code{.n.}=5 and
@code{.e.}=1 are assumed.  The special case where @code{.e.} is negative
tells Gri to @emph{always} fill in each grid point, by extending the
neighborhood to enclose the entire dataset if necessary.

@emph{Computational cost:} For @code{P} data points, @code{X} x-grid
points, and @code{Y} y-grid points, the method calculation cost is
proportional to @code{P*X*Y}.  Given that @code{X} and @code{Y} are
determined by the requirement for smoothness of contours and the size of
the graph, they are more or less fixed for all applications.  They are
often in the range of 20 or so -- on 10 cm wide graph, this yields a
contour footprint of 1/2 cm, which is often small enough to yield smooth
contours.  Therefore, the computational cost scales linearly with the
number of data points.  Compared to the ``neighborhood'' method, this is
more costly by a factor of @code{X*Y/log_2(X)/log_2(Y)} which is
normally in the range from 20 to 50.
@item @emph{``Boxcar'' method}
In the @code{boxcar} method, the grid points are derived from simple
averages calculated in rectangles @code{.xr.} wide and @code{.yr.} tall,
centred on the gridpoints.  The @code{.n.} and @code{.e.} parameters
have similar meanings as in the ``objective'' method.

@emph{Computational cost:} Roughly same as @code{objective} method
described above.
@item @emph{``Barnes'' method}
This is the default scheme.

The Barnes algorithm is applied.  If no parameters are specified,
@code{.xr.} and @code{.yr.} are determined as above, with @code{.gamma.}
set to 0.5, and @code{.iter.} set to 2 so that two iterations are done.
On successive iterations, the smoothing lengthscales @code{.xr} and
@code{.yr} are each reduced by multiplying by the square root of
@code{.gamma.}.  Smaller @code{.gamma.} values yield better resolution
of small-scale features on successive iterations.  Koch et al., 1983,
recommend using a @code{.gamma.} value in the range 0.2 to 1, with two
iterations.

Provided that all the grid points are close enough to at least some
column data, the entire grid is filled.  But if @code{.xr.} and
@code{.yr.} are too small, the weighting function can fall to zero,
since it is exponential in the sum of the squares of the
x-distance/@code{.xr.} and the y-distance/@code{.yr.}; in that case
missing values result at those grid points.  On a 32 bit computer, the
weighting function will fall to zero when x-distance/@code{.xr.}  and
y-distance/@code{.yr.}  are less than about 15 to 20.

If weights have been read in @xref{Read Columns}, then these values are
applied in addition to the distance-based weighting.  (The normalization
means that weights for two data points of e.g. 1 and 2 will yield the
same result as if the weights had been given as 10 and 20.)

The computational cost at each iteration scales as @code{P*X*Y)}.  This
is comparable to that of the ``objective'' and ``boxcar'' methods.
Since normally two iterations are done, ``barnes'' is about double the
cost of these methods.  (Note: versions prior to 2.1.8 were much slower
for large datasets, being proportional to @code{P*P}.)

References: (1) Section 3.6 in Roger Daley, 1991, ``Atmospheric data
analysis,'' Cambridge Press, New York. (2) S. E. Koch and M. DesJardins
and P. J. Kocin, 1983.  ``An interactive Barnes objective map anlaysis
scheme for use with satellite and conventional data,'', J. Climate Appl.
Met., vol 22, p. 1487-1503.
@end itemize

The Barnes algorithm is as follows:

@tex
The gridded field is estimated iteratively.  Successive iterations
retain largescale features from previous iterations, while adding
details at smaller scales.

The first estimate of the gridded field, here denoted $G_{ij}^{(0)}$
(the parenthetic superscript indicating the order of the iteration) is
given by a weighted sum of the input data, with $z_k$ denoting the
k-th $z$ value.

$$
G_{ij}^{(0)}
=
{ {\sum_1^{n_k} W_{ijk}^{(0)} z_k} \over {\sum_1^{n_k} W_{ijk}^{(0)}} }
$$

The weights $W_{ijk}^{(0)}$ are defined in terms of a Guassian
function decaying with distance from observation point to grid point:

$$
W_{ijk}^{(0)}
=
\exp \left[ - { {(x_k-X_i)^2} \over {L_x^2} }
            - { {(y_k-Y_j)^2} \over {L_y^2} } \right]
$$

\noindent
Here $L_x$ and $L_y$ are lengths which define the smallest
$(x,y)$ scales over which the gridded field will have significant
variations (for details of the spectral response see Koch et al. 1983).

Note: if the user has supplied weights then these
are multiplied into the normal distance-based weights; i.e. $w_i
W_{ijk}$ is used instead of $W_{ijk}$.

The second iteration derives a grid $G_{ij}^{(1)}$ in terms of the first
grid $G_{ij}^{(0)}$ and ``analysis values'' $f_k^{(0)}$ calculated at
the $(x_k,y_k)$ using a formula analogous to the above.
(Interpolation based on the first estimate of the grid $G_{ij}^{(0)}$
can also be used to calculate $f_k^{(0)}$, with equivalent results for a
grid of sufficiently fine mesh.)  In this iteration, however, the
weighted average is based on the difference between the data and the
gridded field, so that no further adjustment of the gridded field is
done in regions where it is already close to through the observed
values.  The second estimate of the gridded field is given by

$$
G_{ij}^{(1)}
=
G_{ij}^{(0)} 
+ 
{ {\sum_1^{n_k} W_{ijk}^{(1)} (f_k - f_k^{(0)})} \over {\sum_1^{n_k} W_{ijk}^{(1)}}
}
$$

\noindent
where the weights $w_{ik,1}$ are defined by analogy with
$W_{ik}^{(0)}$ except that $L_x$ and $L_y$ are replaced by
$\gamma^{1/2}L_x$ and $\gamma^{1/2}L_y$.  The nondimensional parameter
$\gamma$ ($0<\gamma<1$) controls the degree to which the focus is
improved on the second iteration.  Just as the weighting function
forced the gridded field to be smooth over scales smaller than $L_x$
and $L_y$ on the first iteration, so it forces the second estimate of
the gridded field to be smooth over the smaller scales
$\gamma^{1/2}L_x$ and $\gamma^{1/2}L_y$.

The first iteration yields a gridded field which represents the
observations over scales larger than $(L_x,L_y)$, while successive
iterations fill in details at smaller scales, without greatly
modifying the larger scale field.

In principle, the iterative process may be continued an arbitrary
number of times, each time reducing the scale of variation in the
gridded field by the factor $\gamma^{1/2}$.  Koch et al. 1983
suggest that there is little utility in performing more than two
iterations, providing an appropriate choice of the focussing parameter
$\gamma$ has been made.  Thus the gridding procedure defines a gridded
field based on three tunable parameters: $(L_x,L_y,\gamma)$.
@end tex


@ifinfo
The gridded field is estimated iteratively.  Successive iterations
retain largescale features from previous iterations, while adding
details at smaller scales.

The first estimate of the gridded field, here denoted
@code{G_(ij)^0} (the superscript indicating the order of the
iteration) is given by a weighted sum of the input data, with
@code{z_k} denoting the k-th @code{z} value.

@example
             sum_1^n W_(ijk)^0 z_k
G_(ij)^(0) = ----------------------
               sum_1^n W_(ijk)0
@end example
@noindent
where the notation @code{sum_1^n} means to sum the elements
for the @code{k} index ranging from 1 to @code{n}.

The weights @code{W_(ijk)^0} are defined in terms of a Guassian
function decaying with distance from observation point to grid point:

@example
               (   (x_k - X_i)^2       (y_k - Y_j)^2  )
W_(ijk)^0 = exp(-  --------------  -  --------------- )
               (      L_x^2                L_y^2      )
@end example

@noindent
Here @code{L_x} and @code{L_y} are lengths which define the smallest
@code{(x,y)} scales over which the gridded field will have significant
variations (for details of the spectral response see Koch et al. 1983).

Note: if the user has supplied weights then these
are applied in addition to the distance-based weights.  That is,
@code{w_i W_(ijk)} is used instead of @code{W_(ijk)}.

The second iteration derives a grid @code{G_(ij)^1} in terms of the
first grid @code{G_(ij)^0} and ``analysis values'' @code{f_k^0}
calculated at the @code{(x_k,y_k)} using a formula analogous to that
above.  (Interpolation based on the first estimate of the grid
@code{G_(ij)^0} can also be used to calculate @code{f_k^0}, with
equivalent results for a grid of sufficiently fine mesh.)  In this
iteration, however, the weighted average is based on the difference
between the data and the gridded field, so that no further adjustment
of the gridded field is done in regions where it is already close to
through the observed values.  The second estimate of the gridded field
is given by

@example
                       sum_1^n W_(ijk)^1 (f_k - f_k^0)
G_(ij)^1 = G_(ij)^0 +  -------------------------------
                              sum_1^n W_(ijk)^1
@end example

@noindent where the weights @code{w_@{ik,1@}} are defined by analogy
with @code{W_@{ik@}^0} except that @code{L_x} and @code{L_y} are
replaced by @code{gamma^@{1/2@}L_x} and @code{gamma^@{1/2@}L_y}.  The
nondimensional parameter @code{gamma} (@code{0<gamma<1}) controls the
degree to which the focus is improved on the second iteration.  Just
as the weighting function forced the gridded field to be smooth over
scales smaller than @code{L_x} and @code{L_y} on the first iteration,
so it forces the second estimate of the gridded field to be smooth
over the smaller scales @code{gamma^@{1/2@}L_x} and
@code{gamma^@{1/2@}L_y}.

The first iteration yields a gridded field which represents the
observations over scales larger than @code{(L_x,L_y)}, while successive
iterations fill in details at smaller scales, without greatly
modifying the larger scale field.

In principle, the iterative process may be continued an arbitrary number
of times, each time reducing the scale of variation in the gridded field
by the factor @code{gamma^@{1/2@}}.  Koch et al. 1983 suggest that there
is little utility in performing more than two iterations, providing an
appropriate choice of the focussing parameter @code{gamma} has been made.
Thus the gridding procedure defines a gridded field based on three
tunable parameters: @code{(L_x,L_y,gamma)}.
@end ifinfo





@node   Convert Columns to Spline, Convert Columns From Polar to Rectangular, Convert Columns to Grid, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert columns to spline} @dots{} Command
@cindex spline, fitting to (x,y) data
@findex convert columns to spline
@cindex @code{convert columns to spline} command
@example
`convert columns to spline \
    [.gamma.] \
    [.xmin. .xmax. .xinc.]'
@end example
Fit a normal or taut interpolating spline, y=y(x), through the (x,y)
data.  Then subsample this spline to get a new set of (x,y) data.  If
the spline x-values, @code{.xmin.}, etc, are not specified, the spline
ranges from the smallest x-value with legitimate data to the largest
one, with 200 steps in between.

The parameter @code{.gamma.} determines the type of spline used.  If
@code{.gamma.} is not specified, or is given as zero, a standard
interpolating spline is used.  A knot appears at each x location, with
cubic polynomials spanning the space between the knots.  If
@code{.gamma.} lies between 0 and 6, a taut spline is used; this tends
to have fewer wiggles than a normal spline.  If @code{.gamma.}  lies in
the range 0 to 3, a taut spline is used, with the possible insertion of
knots between interior x pairs.  The value 2.5 is used commonly.  If
@code{.gamma.} lies in the range 3 to 6, extra knots are permitted in
the x pairs at the ends of the domain.  A value of 5.5 is used commonly.

@emph{Reference} Chapter 16 of Carl de Boar, 1987. ``A Practical Guide
to Splines'' Springer-Verlag.

@example
read columns x y  # function is y=x^2
0 0
1 1
2 4
3 9
4 16

set symbol size 0.2
draw symbol bullet
convert columns to spline
draw curve
@end example


@node   Convert Columns From Polar to Rectangular, Convert Columns From Rectangular to Polar, Convert Columns to Spline, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert columns from polar to rectangular} Command
@findex convert columns from polar to rectangular
@cindex @code{convert columns from polar to rectangular} command
@example
`convert columns from polar to rectangular'
@end example
@noindent
Convert polar (r, theta) columnar dat to rectangular (x, y) format.
NOTE: theta is in degrees.



@node   Convert Columns From Rectangular to Polar, Convert Grid to Columns, Convert Columns From Polar to Rectangular, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert columns from rectangular to polar} Command
@findex convert columns from rectangular to polar
@cindex @code{convert columns from rectangular to polar} command
@example
`convert columns from rectangular to polar'
@end example
@noindent
Convert rectangular (x, y) columnar data to polar (r, theta) format.
NOTE: theta is in degrees.


@node   Convert Grid to Columns, Convert Grid To Image, Convert Columns From Rectangular to Polar, Convert 
@comment  node-name,  next,  previous,  up
@subsection The @code{convert grid to columns} Command
@findex convert grid to columns
@cindex columns, creating from grid
@cindex @code{convert grid to columns} command
@example
`convert grid to columns'
@end example
@noindent
Create column data from grid data.  Each non-missing gridpoint is
translated into a single (x,y,z) triplet.  If column data already exist,
then they are first erased.  This command is useful in changing the grid
configuration, perhaps from a non-uniform grid to a uniform grid.  In
the following example, a new grid with x=(0, 0.05, 0.1, ..., 0.1) and
y=(10, 11, ..., 20) is created.  The default gridding method
(@code{convert columns to grid}) is used here, but of course one is free
to adjust the method as usual.
@example
# ... read/create grid
convert grid to columns
delete grid
set x grid  0  1 0.05
set y grid 10 20 1
convert columns to grid
@end example


@node   Convert Grid To Image, Convert Image to Grid, Convert Grid to Columns, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert grid to image} @dots{} Command
@findex convert grid to image
@cindex image, creating from grid
@cindex @code{convert grid to image} command
@example
`convert grid to image [size .width. .height.] \
    [box .ll_x. .ll_y. .ur_x. .ur_y.]'
@end example

@noindent With no options specified, convert grid to a 128x128 image,
using an image range as previously set by @code{set image range}.  

@cindex image, interpolation from grid
@cindex interpolation, from grid to image

@b{Interpolation method:} The interpolation scheme is the same used for
contouring.  Image points that lie outside the grid domain are
considered missing.  For points within the grid, the first step is to
locate the patch of the grid upon which the pixel lies.  Then the 4
neighboring grid points are examined, and one of the following cases
holds.
@enumerate
@item
If 3 or more of them are missing, the pixel is considered missing.
@item
If just one of the neighboring grid points is missing, then the image
pixel value is determined by bilinear interpolation on the remaining 3
non-missing grid points.  (This amounts to fitting a plane to three
measurements of height.)
@item
If all 4 of the grid points are non-missing, then the rectangle defined
by the grid patch is subdivided into four triangles.  The triangles are
defined by the two diagonal lines joining opposite corners of the
rectangle.  An ``image point'' is constructed at the center of the grid
patch, with f(x,y) value taken to be the average of the values of the
four neighbors.  This value is taken to be the value at the common
vertex of the four triangles, and then bilinear interpolation is used to
calculate the image pixel value.
@end enumerate

With the @code{size} options @code{.width.} and @code{.height.}
specified, they set the number of rectanglular patches in the image.

With the @code{box} options specified, they set the bounding box for the
image.  If @code{box} is not given, the image spans the same bounding
box as the grid as set by @code{set x grid} and @code{set y grid}.

Normally, missing values in the grid become white in the image, but this
can be changed using the @code{set image missing value color to}@dots{}
command.


@node   Convert Image to Grid, Create, Convert Grid To Image, Convert
@comment  node-name,  next,  previous,  up
@subsection The @code{convert image to grid} @dots{} Command
@findex convert image to grid
@cindex @code{convert image to grid} command
@cindex grid, creating from image
@example
`convert image to grid'
@end example
@noindent
Convert image to grid, using current graylevel/colorlevel mapping.  For
example, if one had a linear mapping of pixel values 0->255 into the
user values 10->20, as in
@example
set image range 10 20
set image grayscale black 10 white 20
@end example
@noindent
then the output grid will be of value 10 where the pixel value is 0,
etc.  If the image is in color, the grid values will represent the
result of mapping the colors to grayscale in the standard way (Foley and
VanDam, 1984). [BUG: as of 1.063, the colorscale is ignored completely,
and I'm not sure what happens.] The image data are interpolated onto the
grid using a nearest-neighbor substitution.  This command insists that
the image x/y grids have already been defined.





@c HTML <!-- newfile Create.html "Gri: `create' command" "Gri Commands" -->

@node   Create, Debug, Convert Image to Grid, Commands
@comment  node-name,  next,  previous,  up
@section The @code{create} Command
@findex create
@subsection The @code{create columns from function} Command
@cindex @code{create columns from function} command
@example
`create columns from function'
@end example
@noindent
Plot a function of x which is defined in synonym \function.
@example
ENVIRONMENT
\function = function to plot.
\xmin     = minimum x value
\xmax     = maximum x value
\xinc     = increment in x values
     
EXAMPLE
\function = "cos(x)"
\xmin     = "0"
\xmax     = "2 * 3.14"
\xinc     = "0.1"
create columns from function
draw curve
quit
@end example     
@noindent
NOTE: This only works on machines which have the @code{awk} command
available at the commandline.  This means most unix machines and some
vax machines.


@subsection The @code{create image grayscale} @dots{} Command
@example
`create image grayscale banded .band.'
@end example
@noindent
Make a banded grayscale with in units of .band. pixel values each.
Thus, pixel values 0 to (.band. - 1) on the image will map to 0, while
values from .band. to (2 * .band. - 1) will map to .band., etc.  For
example, .band. = 2 gives grayscale = (0 0 2 2 4 4 6 6 ... 252 252 254
254).



@c HTML <!-- newfile Debug.html "Gri: `debug' command" "Gri Commands" -->

@node   Debug, Delete, Create, Commands
@comment  node-name,  next,  previous,  up
@section The @code{debug} Command
@cindex debugging
@findex debug
@cindex @code{debug} command
@example
`debug [.n.]|[clipped values in draw commands]|off'
@end example
@noindent
With no optional parameters, sets the value of @code{..debug..} to 1.
(Normally, @code{..debug..} is 0.)  You may use @code{..debug..} in if
statements, etc.  Note that @code{..debug..} is also set to 1 when gri
is invoked with the commandline switch @code{-d}.

With @code{.n.} specified, @code{..debug..} is set to @code{.n.}; a
value of zero for @code{.n.} turns debugging off, while 1 turns it on.
Higher values may be used for deeper debugging, if you choose:
@example
if @{rpn ..debug.. 2 <@}
  # Code to do if ..debug.. is greater than 2.
end if
@end example
@noindent
Note that you can assign to @code{..debug..} as you can to any other
variable; @code{debug .n.} is equivalent to @code{..debug.. = .n.}.
     
With the @code{clipped} option, Gri prints any clipped data encountered
during any @code{draw ...} commands, EXCEPT in the case of
@code{postscript} clipping, where no check is possible.  (Note that
@code{..debug..} is not affected.)

All these forms of debugging are cancelled by @code{debug off}.


@c HTML <!-- newfile Delete.html "Gri: `delete' command" "Gri Commands" -->

@node   Delete, Differentiate, Debug, Commands
@comment  node-name,  next,  previous,  up
@section The @code{delete} Command
@cindex deleting variables, synonyms, scales, etc
@cindex grid, deleting
@cindex scales, deleting
@cindex synonyms, deleting
@cindex variables, deleting
@findex delete
@cindex @code{delete} command
@example
`delete .variable.|\synonym [.variable.|\synonym [...]]'
`delete columns [where missing]'
`delete columns [randomly .fraction.]'
`delete grid'
`delete [x|y] scale'
@end example
@noindent
Delete some item or characteristic.

@itemize @bullet
@item @code{delete .variable.}
Delete definition of variable @code{.variable.}, making it undefined.
Any number of variables or synonyms may be specified on one line.
@item @code{delete \synonym}
Delete definition of synonym @code{\synonym}, making it undefined.  Any
number of variables or synonyms may be specified on one line.
@item @code{delete columns}
Delete column data.
@item @code{delete columns where missing}
Completely delete all column data for which any one of x, y, etc is missing.
@item @code{delete columns randomly .fraction.}
Randomly select fraction @code{.fraction.}  of the non-missing column
data, and designate them as being missing.
@item @code{delete grid}
Delete grid data.
@item @code{delete scale}
Delete scales for both x and y, so next @code{read columns} will set it. 
@item @code{delete x scale}
Delete scales for x, so next @code{read columns} will set it.
@item @code{delete y scale}
Delete scales for y, so next @code{read columns} will set it.
@end itemize


@c HTML <!-- newfile Differentiate.html "Gri: `differentiate' command" "Gri Commands" -->

@node   Differentiate, Draw, Delete, Commands
@comment  node-name,  next,  previous,  up
@section The @code{differentiate} Command
@cindex differentiation
@findex differentiate
@cindex @code{differentiate} command
@example
`differentiate @{x|y wrt index|y|x@} | @{grid wrt x|y@}'
@end example
@noindent
Differentiate column data or grid data.  Only the @code{x} and @code{y}
columns may be differentiated.  They may be differentiated either with
respect to (``wrt'') the index (forming a first difference) or with
respect to the other column.  The derivative is done with the
backwards-difference algorithm.  Grid data may differentiated with
respect to @code{x} direction or @code{y} direction.  Grid
differentiation is done with a centred difference, with endpoints being
assigned the derivative of the neighboring interior point (so that the
second derivative is zero at the edges of the grid).


@c HTML <!-- newfile Draw.html "Gri: About draw commands" "Gri Commands" -->



@node   Draw, Draw Arrow, Differentiate, Commands
@comment  node-name,  next,  previous,  up
@section The Various @code{draw} Commands
@findex draw
Draw commands do actual drawing on the page.  You can draw axes,
lineplots, symbols, contours, images, and text.  

@emph{NOTE} Gri likes drawings to have axes, so if a @code{draw} command
is executed before any axes have been drawn, Gri will draw axes after it
draws the item.  (You can get drawings without axes by preceding any
other @code{draw} commands with the command @code{draw axes none}.)
Many users have been surprised by the results of this rule.  For
example, if you do @code{set graylevel 0.5} before @code{draw curve},
you'll find that the axes are drawn in gray also.  To avoid this, make
sure to do @code{draw axes} before you modify the graylevel.)

@menu
* Draw Arrow::                  Draw single arrow
* Draw Arrows::                 Draw many arrows (using columns)
* Draw Axes If Needed::         Draw axes if haven't done so yet
* Draw Axes::                   Draw axes
* Draw Border Box::             Draw border around plot
* Draw Box::                    Draw a box, possibly filled
* Draw Circle::                 Draw a circle
* Draw Contour::                Draw contour(s)
* Draw Curve::                  Draw a curve of y(x) column data
* Draw Essay::                  Draw text, adjusting position for each line
* Draw Gri Logo::               Draw a Gri logo
* Draw Grid::                   Draw the location of grid points
* Draw Image Histogram::        Draw histogram of values in image
* Draw Image Palette::          Draw palette used in image plots
* Draw Image::                  Draw image
* Draw Isopycnal::              Draw isopycnal line on TS plot
* Draw Isospice::               Draw iso-spice line on TS plot
* Draw Label Boxed::            Draw a label in a box
* Draw Label Whiteunder::       Draw a label with white ink under it
* Draw Label For Last Curve::   What it says
* Draw Label::                  Draw text somewhere
* Draw Line From::              Draw line segment
* Draw Line Legend::            Draw legend displaying line types
* Draw Lines::                  Draw sequence of parallel lines
* Draw Patches::                Draw grayscale patches showing z(x,y)
* Draw Polygon::                Draw a polygon
* Draw Regression Line::        Draw line from regression between x and y
* Draw Symbol At::              Draw a symbol at a point
* Draw Symbol Legend::          Draw a symbol and a string describing it
* Draw Symbol::                 Draw symbols at (x,y), or at a point
* Draw Time Stamp::             Draw a timestamp at top of plot
* Draw Title::                  Draw a title for plot
* Draw Values::                 Draw numbers beside z(x,y)
* Draw X Axis::                 Draw the x axis
* Draw X Box Plot::             Draw box plots showing x spread
* Draw Y Axis::                 Draw the y axis
* Draw Y Box Plot::             Draw box plots showing y spread
* Draw Zero Line::              Draw y=0 or x=0
@end menu

@node   Draw Arrow, Draw Arrows, Draw, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw arrow} @dots{} Command
@cindex arrows, drawing single
@example
draw arrow from .x0. .y0. to .x1. .y1. [cm]
@end example
With no optional parameters, draw an arrow from (@code{.x0.},
@code{.y0.}) to (@code{.x1.}, @code{.y1.}), where coordinates are in
user units.  The arrow head will be at (@code{.x1.}, @code{.y1.}), and
its size is as set by most recent call to @code{set arrow size}.  With
the @code{cm} keyword present, the coordinates are in centimetres on the
page.  NOTE: This will not cause auto-drawing of axes.

@node   Draw Arrows, Draw Axes If Needed, Draw Arrow, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw arrows} Command
@findex draw arrows
@cindex @code{draw arrows} command
@example
`draw arrows'
@end example
@noindent
Draw a vector field consisting of arrows emanating from the coordinates
stored in the (x, y) columns.  The lengths and orientations of the
arrows are stored in the (u, v) columns, and the scale for the (u,v)
columns is set by @code{set u scale} and @code{set v scale}.  @emph{See also}
(1) To set arrow size, use @xref{Set Arrow Size}.  (2) To get a single
arrow, use @xref{Draw Arrow}.


@node   Draw Axes If Needed, Draw Axes, Draw Arrows, Draw
@comment  node-name,  next,  previous,  up
@findex draw axes if needed
@cindex @code{draw axes if needed} command
@subsection The @code{draw axes if needed} Command
@example
`draw axes if needed'
@end example
@noindent
Draw axes frame if required.  Used within gri commands that auto-draw axes.
NOTE: this should only be done by developers.



@node   Draw Axes, Draw Border Box, Draw Axes If Needed, Draw
@comment  node-name,  next,  previous,  up
@findex draw axes
@cindex @code{draw axes} command
@subsection The @code{draw axes} @dots{} Command
@example
`draw axes [.style.|frame|none]'
@end example
@noindent
With no style (@code{.style.}) specified, draw x-y axes frame labelled
at left and bottom. The value of @code{.style.} determines the style of
axes: 
@itemize @bullet
@item @code{.style. = 0}
Draw x-y axes frame labelled at left and bottom
@item @code{.style. = 1}
Draw axes without tics at top and right
@item @code{.style. = 2}
Draw axes frame with no tics or labels
@end itemize

With the keyword @code{frame} specified, draw axes frame with no tics or
labels (just like @code{.style.} = 2).

With the keyword @code{none} specified, prevent Gri from automatically
drawing axes when drawing curves.



@node   Draw Border Box, Draw Box, Draw Axes, Draw
@comment  node-name,  next,  previous,  up
@findex draw border box
@cindex @code{draw border box} command
@subsection The @code{draw border box} @dots{} Command
@example
`draw border box .ll_x. .ll_y. .ur_x. .ur_y. \
    .width_cm. .brightness.'
@end example
@noindent
Draw gray box, as decoration or alignment key for pastup. The box, with
outer lower left corner at (@code{.ll_x.}, @code{.ll_y.}) and outer
upper right corner at (@code{.ur_x}., @code{.ur_y.}) -- both coordinates
being in centimetres on the page -- is drawn with thickness
@code{.width_cm.} and with graylevel @code{.brightness.} (0 for black; 1
for white).  The gray line is drawn inside the box.  After drawing the
gray line, a thin black line is drawn along the outside edge.

If the geometry is not specified with @code{.ll_x.} and the other
parameters, then a reasonable margin is used around the present axes
area, and the defaults (@code{.border.} = 0.2, @code{.brightness.} =
0.75) are used.

NOTE: This command does not cause auto-drawing of axes.


@node   Draw Box, Draw Circle, Draw Border Box, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw box} @dots{} Command
@findex draw box
@cindex @code{draw box} command
@example
`draw box filled .ll_x. .ll_y. .ur_x. .ur_y. [cm]'
@end example
@noindent
Draw filled box spanning indicated range, with lower-left corner at
(@code{.ll_x.}, @code{.ll_y.}) and upper-right corner at (@code{.ur_x.},
@code{.ur_y.}).  The corners are specified in user coordinates, unless
the optional @code{cm} keyword is present, in which case they are in
centimetres on the page.  An error will result if you specify user
coordinates but they aren't defined yet.

No checking is done on the rectangle; for example, there is no
requirement that @code{.ll_x.} be to the left of @code{.ur_x.} in your
coordinate system.

NOTE: if the box is specified in user units, this command will cause
auto-drawing of axes, but not if the box is specified in cm units.


@example
`draw box .ll_x. .ll_y. .ur_x. .ur_y. [cm]'
@end example
@noindent
Draw box spanning indicated range, with lower-left corner at
(@code{.ll_x.}, @code{.ll_y.)} and upper-right corner at (@code{.ur_x.},
@code{.ur_y.}).

The corners are specified in user coordinates, unless the optional
@code{cm} keyword is present, in which case they are in centimetres on
the page.  An error will result if you specify user coordinates but they
aren't defined yet.

No checking is done on the rectangle; for example, there is no
requirement that @code{.ll_x.} be to the left of @code{.ur_x.} in your
coordinate system.


@node   Draw Circle, Draw Contour, Draw Box, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw circle} @dots{} Command
@cindex circles, drawing
@findex draw circle
@cindex @code{draw circle} command
@example
draw circle with radius .r_cm. at .x_cm. .y_cm.
@end example
@noindent
Draw circle of specified radius (in cm) at the specified
location (in cm on the page).


@node   Draw Contour, Draw Curve, Draw Circle, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw contour} @dots{} Command
@cindex drawing contours
@cindex contouring
@findex draw contour
@cindex @code{draw contour} command
@example
`draw contour [@{.value. \
  [unlabelled | @{labelled "\label"@}]@} \
  | @{.min. .max. .inc. \
    [.inc_unlabelled.] [unlabelled]@}]'
@end example
@noindent
This command draws contours based on the "grid" data previously read in
by a @code{read grid data} command or created by gridding column data
with a @code{create grid from columns} command.  If the grid data don't
exist, or if the x and y locations of the grid points do not exist (see
@code{set x grid}, @code{set y grid}, etc), Gri will complain.

With no optional parameters, draw labelled contours at an interval
that is picked automatically based on the range of the data.
     
With a single numerical value (@code{.value.}), draw the indicated
contour.  With the addition of @code{labelled "\label"}, put the
indicated label instead of a numeric label.  This can be useful for
using scientific notation instead of computer notation for exponents,
e.g.  @code{draw contour 1e-5 labelled "10$^@{-5@}$"}.

With (@code{.min.}, @code{.max.} and @code{.inc.}) given, draw
contours for z(x,y) = @code{.min.}, z(x,y) = @code{.min. + .inc.},
z(x,y) = @code{.min. + 2*.inc.}, ..., z(x,y) = @code{.max.}

With the additional value @code{.inc_unlabelled.} specified, extra
unlabelled contours are drawn at this finer interval.

With the optional parameter @code{unlabelled} at the end of any form
of this command (except the @code{labelled "\label"} variation, of
course), Gri will not label the contour(s).

@emph{Hint:} It can be effective to draw contours at a certain interval
with labels, and a thicker pen, e.g.
@example
set line width rapidograph 3x0
draw contour -2 5 1 0.25
set line width rapidograph 1
draw contour -2 5 1
@end example

@b{Interpolation method:} The interpolation scheme is the same used for
converting grid-values to image values; @xref{Convert Grid To Image}.

@emph{See also} @code{set contour labels}


@node   Draw Curve, Draw Essay, Draw Contour, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw curve} @dots{} Command
@findex draw curve
@cindex @code{draw curve} command
@cindex x-y graphs
@cindex region painting
@cindex paint regions with color
@cindex filled regions
@cindex drawing curves
@cindex curves, drawing
Several forms exist.

@example
`draw curve'
@end example
@noindent
Draws a curve connecting the points (x,y), which have been read in by a
command like @code{read columns x y}.  Line segments are drawn between
all (x,y) points, except: (1) no line segments are drawn to any missing
data (see @code{set missing value}), and (2) if clipping is turned on
(see @code{set clip on}), no line segments are drawn outside the
clipping region.  @emph{See also} @code{draw curve overlying}

@example
`draw curve overlying'
@end example
@noindent
Like @code{draw curve}, except that before drawing, the area underneath
the curve (+/- one linewidth) is whited out.  This clarifies graphs
where curves overly other curves or the axes.  @emph{See also} @code{draw curve}.

@example
`draw curve filled [to @{.y. y@}|@{.x. x@}]'
@end example
@noindent
The form @code{draw curve filled ...} draws filled curves.  If 
@code{to .value.} is not specified, fill the region defined by the x-y points
using the current paint colour (see @code{set graylevel}).  To complete
the shape, an extra line is drawn from the first and last point.

The form @code{draw curve filled to .y. y} fills the region between y(x)
and y = @code{.y.}; do not connect the first and last points as in the
case where @code{to .yvalue.} is not specified.

The form @code{draw curve filled to .x. x} fills the region between x(y)
and x = @code{.x.}





@node   Draw Essay, Draw Gri Logo, Draw Curve, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw essay} @dots{} Command
@findex draw essay
@cindex @code{draw essay} command
@example
`draw essay "text"|reset'
@end example
@noindent
Draw indicated text on the page.  Succeeding calls draw text further and
further down the page, starting at the top.

The current font size is used; to alter this, use @code{set font size}
before @code{draw essay}.

When @code{reset} is present instead of text, the drawing position is
reset to the top of the page.  Use this after a @code{new page} command
to ensure that the next text lines will appear at the top of the page as
expected.  EXAMPLE:
@example
set font size 2 cm
draw essay "Line 1, at top of page"
draw essay "Line 2, below top line"
@end example


@node   Draw Gri Logo, Draw Grid, Draw Essay, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw gri logo} Command
@findex draw gri logo
@cindex @code{draw gri logo} command
@cindex logo, how to draw
@example
`draw gri logo .x_cm. .y_cm. .height_cm. .style. \fgcolor \bgcolor'
@end example
@noindent
Draw a Gri logo at given location with given style and colors.  The
lower-left corner of the logo will be @code{.x_cm.} centimeters from the
left-hand side of the page and @code{.y_cm.} centimeters from the bottom
of the page.  The logo will be @code{.height_cm.} centimeters tall.  The
textual parameters @code{\fgcolor} and @code{\bgcolor} give the foreground and
background colors, respectively, and these are used in styles as noted
in the table below.
@example
.style.    style
=======    ===================
   0       stroke curve
   1       fill with color \fgcolor, no background
   2       fill with color \fgcolor it in tight box of color \bgcolor
   3       as 2 but in square box
   4       draw in \fgcolor on top of shifted copy in \bgcolor
@end example
An example is given below
@example
draw gri logo 1 1 3 4 blue green
@end example

@node   Draw Grid, Draw Image Histogram, Draw Gri Logo, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw grid} Command
@findex draw grid
@cindex @code{draw grid} command
@example
`draw grid'
@end example
@noindent
Draw plus-signs at locations where grid data are non-missing.

@node   Draw Image Histogram, Draw Image Palette, Draw Grid, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw image histogram} @dots{} Command
@findex draw image histogram
@cindex @code{draw image histogram} command
@cindex image, histogram
@example
`draw image histogram \
  [box .llx_cm. .lly_cm. .urx_cm. .ury_cm.]'
@end example
@noindent
With no optional parameters, draw histogram of all unmasked parts of the
image, placing it above the current top of the plot.

When the @code{box} options are present, they specify the box (in
centimetre coordinates on the page) in which the histogram plot is to be
done.



@node   Draw Image Palette, Draw Image, Draw Image Histogram, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw image palette} @dots{} Command
@findex draw image palette
@cindex @code{draw image palette} command
@example
`draw image palette 
   [axisleft|axisright|axistop|axisbottom] 
   [left .left. right .right. [increment .inc.]] 
   [box .ll_x_cm. .ll_y_cm. .ur_x_cm. .ur_y_cm.]'
@end example
@noindent
@cindex image, drawing palette
@cindex image, drawing colorscale palette
@cindex colorscale, drawing
@cindex palette for image colorscale, drawing 
With no optional parameters, draw palette for image, placed above the
current top showing values ranging from @code{.min_value.} to
@code{.max_value.} as given in @code{set image range}.

Optional keywords (@code{axisleft}, etc) control the orientation of the
palette, the default being @code{axisbottom}.

The optional parameters @code{.left.} and @code{.right.} may be used to
specify the range to be drawn in the palette.  If the additional
optional parameter @code{.inc.} is present, it specifies the interval
between tics on the scale; if not present, the tics are at increments of
2 * (@code{.right.} - @code{.left}.).  (If @code{.inc.}  has the wrong
sign, it will be corrected without warning.)

When the optional @code{box} parameters are present, they prescribe the
bounding box to contain the palette.  The units are centimetres on the
page.  If these parameters are not present, the box will be drawn above
the image plot.

@cindex hint, palette range
@emph{Hint} It is a good idea to make the palette range @code{.left.} to
@code{.right.} extend a little beyond the range of full white and full
black, since otherwise neither pure white nor pure black will appear in
the colorbar.  For example:
@example
set image grayscale black 0 white 1 increment 0.1
draw image palette left -0.1 right 1.1 increment 0.1
@end example


@cindex hint, contour lines on image palette
@emph{Hint} Continuous-tone images with superimposed contours are often
effective.  To get the contour lines drawn on the image palette, do
something like this:
@example
draw image
.left.   = 0
.right.  = 9
.inc.    = 1
.space.  = 3
.height. = 1
draw image palette left .left. \
  right .right. \
  increment .inc. \
  box \
    ..xmargin.. \
    @{rpn ..ymargin.. ..ysize.. + .space. + @} \
    @{rpn ..xmargin.. ..xsize.. +@} \
    @{rpn ..ymargin.. ..ysize.. + .space. + .height. + @}
draw contour .left. .right. .inc. unlabelled

.c. = .left.
while @{rpn .right. .c. <= @}
  .c_cm. = @{rpn .c. .left. - \
   .right. .left. - / \
    ..xsize.. * ..xmargin.. +@}
  draw line from \
    .c_cm. \
    @{rpn ..ymargin.. ..ysize.. + .space. + @}\
    to \
    .c_cm. \
    @{rpn ..ymargin.. ..ysize.. + .space. + .height. +@} \
    cm
  .c. += 1
end while
@end example


@node   Draw Image, Draw Isopycnal, Draw Image Palette, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw image} Command
@findex draw image
@cindex @code{draw image} command
@example
`draw image'
@end example
@noindent
Draw black/white image made by @code{convert grid to image} or by
@code{read image}.


@node   Draw Isopycnal, Draw Isospice, Draw Image, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw isopycnal} @dots{} Command
@findex draw isopycnal
@cindex @code{draw isopycnal} command
@cindex T-S diagram, drawing isopycnals on
@cindex t-s diagram, drawing isopycnals on
@cindex temperature-salinity diagram, drawing isopycnals on
@cindex isopycnals
@cindex oceanographic plots: isopycnals on TS diagrams
@example
`draw isopycnal \
   [unlabelled] .density. [.P_sigma. [.P_theta.]]'
@end example

Draw isopycnal curve for a temperature-salinity diagram.  This curve is
the locus of temperature and salinity values which yield seawater of the
indicated density, at the indicated pressure.  The UNESCO equation of
state is used.

For the results to make sense, the x-axis should be salinity and the
y-axis should be either in-situ temperature or potential temperature.

The @code{.density.} unit is kg/m^3.  If the supplied value exceeds 100
then it will be taken to indicate the actual density; otherwise it will
be taken to indicate density minus 1000 kg/m^3.  (The deciding value of
100 kg/m^3 was chosen since water never has this density; the more
intuitive value of 1000 kg/m^3 would be inappropriate since water can
have that density at some temperatures.)  Thus, 1020 and 20 each
correspond to an actual density of 1020 kg/m^3.

The reference pressure for density, @code{.P_sigma.}, is in decibars
(roughly corresponding to meters of water depth).  If no value is
supplied, a pressure of 0 dbar (i.e. atmospheric pressure) is used.

The reference pressure for theta, @code{.P_theta.}, is in decibars, and
defaults to zero (i.e. atmospheric pressure) if not supplied.  This
option is used if the y-axis is potential temperature referenced to a
pressure other than the surface.  Normally the potential temperature is,
however, referenced to the surface, so that specifying a value for
@code{.P_theta.} is uncommon.

By default, labels will be drawn on the isopycnal curve; this may be
prevented by supplying the keyword @code{unlabelled}.  If labels are
drawn, they will be of order 1000, or of order 10 to 30, according to
the value of @code{.density.} supplied (see above).  The label format
defaults to "%g" in the C-language format notation, and may be
controlled by @code{set contour format}.  The label position may be
controlled by @code{set contour label position} command (bug: only
non-centered style works).  Setting label position is useful if labels
collide with data points.  Labels are drawn in the whiteunder mode, so
they can white-out data below.  For this reason it is common to draw
data points after drawing isopycnals.

If the y-axis is in-situ temperature, the command should be called
without specifying @code{.P_sigma.}, or, equivalently, with
@code{.P_sigma.} = 0.  That is, the resultant curve will
correspond to the (S,T) solution to the equation
@example
.density. = RHO(S, T, 0)
@end example
where @code{RHO=RHO(S,T,p} is the UNESCO equation of state for
seawater.  This is a curve of constant sigma_T.

If the y-axis is potential temperature referenced to the surface,
@code{.P_theta.} should not be specified, or should be specified to be
zero.  The resultant curve corresponds to a constant value of
potential density referenced to pressure @code{.P_sigma.}, i.e. the
(S,theta) solution to the equation
@example
.density. = RHO(S, theta, .P_sigma.)
@end example
For example, with @code{.P_sigma.=0} (the default), the result
is a curve of constant sigma_theta.

If the y-axis is potential temperature referenced to some pressure other
than that at the surface, @code{.P_theta.} should be supplied.  The
resultant curve will be the (S,theta) solution to the equation
@example
.density. = RHO(S, T', .P_sigma.)
@end example
where
@example
T'=THETA(S, theta, .P_theta., .P_sigma.)
@end example
where @code{THETA=THETA(S,T,P,Pref)} is the UNESCO formula for potential
temperature of a water-parcel moved to a reference pressure of
@code{Pref}.  Note that @code{theta}, potential temperature referenced
to pressure @code{.P_theta.}, is the variable assumed to exist on
the y-axis.




@node   Draw Isospice, Draw Label Boxed, Draw Isopycnal, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw isospice} @dots{} Command
@findex draw isospice
@cindex @code{draw isospice} command
@cindex T-S diagram, drawing spice lines on
@cindex t-s diagram, drawing spice lines on
@cindex temperature-salinity diagram, drawing spice lines on
@cindex spice lines, on TS diagram
@cindex oceanographic plots: iso-spice lines on TS diagrams
@example
`draw isospice .spice. [unlabelled]'
@end example
@noindent
Draw an iso-spice line for a "TS" diagram, using (S, T) data stored in
files in a subdirectory named @code{iso-spice0} in a directory named by
the unix environment variable @code{GRI_EOS_DIR}.  You must set this
environment variable yourself, in the normal unix way.  If
@code{GRI_EOS_DIR} is not defined, Gri looks in the directory
@file{/data/po/ocean/EOS/iso0}; of course, this will work only
for people on the same machine as the author.

Only certain iso-spice lines are stored in these files, so only certain
values of @code{.spice.} are allowed.  They are 21.75, 22.00, 22.25,
..., 30.75.  You must supply @code{.density.} in exactly this format
(with 2 decimal places), or else Gri will not find the appropriate TS
file, and will give a "can't open file" error.  NB: isopycnals ranging
from about 23.00 to 26.00 cross a TS diagram spanning 34<S<36 and
0<T<10.

The line is labelled at the right with the density value, unless the
@code{unlabelled} option is given.

Clipping should be on when drawing iso-spice lines.  A warning will be
given if the isospice line does not intersect the clipping region.

EXAMPLE
@example
set clip on
draw isospice line 27.00
draw isospice line 27.50 unlabelled
@end example


@node   Draw Label Boxed, Draw Label Whiteunder, Draw Isospice, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw label} @dots{} Command
@findex draw label boxed
@cindex @code{draw label boxed} command
@cindex text strings, drawing
@cindex drawing text strings
@cindex drawing labels
@cindex labels, drawing text anywhere
@example
`draw label boxed "string" at .ll_x. .ll_y. [cm]'
@end example
@noindent
Draw boxed label for plot, located with lower-left corner at indicated
(x,y) position (specified in user units or in cm on the page).  The
current font size and pen color are used.  The geometry derives from the
current font size, with the label being centered within the box.


@node   Draw Label Whiteunder, Draw Label For Last Curve, Draw Label Boxed, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw label whiteunder} @dots{} Command
@findex draw label whiteunder
@cindex @code{draw label whiteunder} command
@example
`draw label whiteunder "\string" at .ll_x. .ll_y. [cm]'
@end example
@noindent
Draw label for plot, located with lower-left corner at indicated (x,y)
position (specified in user units or in cm on the page).  Whiteout is
used to clean up the area under the label.  BUGS: Cannot handle angled
text; doesn't check for super/subscripts.


@node   Draw Label For Last Curve, Draw Label, Draw Label Whiteunder, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw label for last curve} @dots{} Command
@findex draw label for last curve
@cindex @code{draw label for last curve} command
@example
`draw label for last curve "label"'
@end example
@cindex drawing labels on xy curves
@cindex labels, for xy curves
@noindent
Draw a label for the last curve drawn, using the @code{..lastx..} and
@code{..lasty..} built-in variables.


@node   Draw Label, Draw Line From, Draw Label For Last Curve, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw label} @dots{} Command
@findex draw label
@cindex @code{draw label} command
@example
`draw label "\string" [centered|rightjustified] \
    at .x. .y. [cm] \
    [rotated .deg.]'
@end example
@noindent
With no optional parameters, draw string at given location in USER units.

With the @code{cm} keyword present, the location is in centimetres on
the page.

With the @code{rotated} keyword present, the angle in degrees from the
horizontal, measured positive in the counterclockwise direction, is
given.

With the keyword @code{centered} present, the text is centered at the
given location; similarly the keyword @code{rightjustified} makes the
text end at the given location.



@node   Draw Line From, Draw Line Legend, Draw Label, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw line from} @dots{} @code{to} @dots{} Command
@findex draw line
@cindex @code{draw line} command
@example
`draw line from .x0. .y0. to .x1. .y1. [cm]'
@end example
@noindent
With no optional parameters, draw a line from (@code{.x0.}, @code{.y0.})
to (@code{.x1.}, @code{.y1}.), where coordinates are in user units.
With the @code{cm} keyword present, the coordinates are in centimetres
on the page.  NOTE: This will not cause auto-drawing of axes.



@node   Draw Line Legend, Draw Lines, Draw Line From, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw line legend} @dots{} Command
@findex draw line legend
@cindex @code{draw line legend} command
@example
`draw line legend "label" at .x. .y. [cm] [length .cm.]'
@end example
@noindent
Draw a legend identifying the current line type with the given label.  A
short horizontal line is drawn starting at the location (`.x.',
@code{.y.}), which may be specified in centimetres or, the default, in
user coordinates.  The line length is normally 1 cm, but this length can
be set by the last option.  The indicated label string is drawn 0.25 cm
to the right of the line.
     
@emph{See also} @code{draw symbol legend ...}.
     
EXAMPLE (of keeping track of the desired location for the legend)
@example
.offset. = 1                    # cm to offset legends
# ... get salinity data
set line width 0.25
draw curve
draw line legend "Salinity" at .x. .y. 
# ... get temperature data
set line width 1.0
set dash 0.45 0.05
draw curve
.y. += .offset.
draw line legend "Temperature" at .x. .y.
@end example


@node   Draw Lines, Draw Patches, Draw Line Legend, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw lines} Command
@findex draw lines
@cindex @code{draw lines} command
@example
`draw lines @{vertically .left. .right. .inc.@} | \
    @{horizontally .bottom. .top. .inc.@}'
@end example
@noindent
Draw several lines, either vertically or horizontally.  This can be
useful in drawing gridlines for axes, etc.  The following example shows
how to draw thin gray lines extending from the labelled tics on the x
axis (ie, at 0, 0.1, 0.2, ... 1):

@example
set x axis 0 1 0.1 0.05
set y axis 10 20 10
draw axes
set graylevel 0.75
set line width 0.5
draw lines vertically 0 1 0.1
set graylevel 0
@end example




@node   Draw Patches, Draw Polygon, Draw Lines, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw patches} Command
@findex draw patches
@cindex @code{draw patches} command
@cindex linear regression
@cindex regression, linear
@example
`draw patches .width. .height. [cm]'
@end example
@noindent
With the optional @code{cm} keyword not present, draw column data z(x,y)
as gray patches according to the grayscale as set by most recent
@code{set image grayscale}.  The patches are aligned along the
horizontal, and have the indicated size in user units.

With the optional keyword @code{cm} is present, the patch size is
specified in centimetres.




@node   Draw Polygon, Draw Regression Line, Draw Patches, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw polygon} Command
@findex draw polygon
@cindex @code{draw polygon} command
@cindex polygons, drawing
@cindex drawing polygons
@example
`draw polygon [filled] .x0. .y0. .x1. .y1. [...]'
@end example
@noindent
Draw a polygon connecting the indicated points, specified in user units.
The last point is joined to the first by a line segment.  At least two
points must be specified.  If the @code{filled} keyword is present, the
polygon is filled with the current pen color.



@node   Draw Regression Line, Draw Symbol At, Draw Polygon, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw regression line} Command
@findex draw regression line
@cindex @code{draw regression line} command

@example
`draw regression line [clipped]'
@end example
@noindent
Fit and draw a regression line to column data, of the form
 @code{y = ..coeff0.. + ..coeff1.. * x}, exporting @code{..coeff0..},
@code{..coeff0_sig..}, @code{..coeff1..}  and @code{..coeff1_sig..}  as
global variables @xref{Regress}.

@noindent
Normally, the line is not clipped to the axes frame, but it will be if
the keyword @code{clipped} is given.

@noindent
HINT: to label the plot you might do the following:
@example
sprintf \label "y = %f + %f * x. R$^2$=%f" \
  ..coeff0.. ..coeff1.. ..R2..
draw title "The linear fit is \label"
@end example
     


@node   Draw Symbol At, Draw Symbol Legend, Draw Regression Line, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw symbol} @dots{} @code{at} @dots{} Command
@findex draw symbol at
@cindex @code{draw symbol at} command

@cindex symbols, drawing single ones
@cindex drawing single symbols
@example
`draw symbol .code.|\name at .x. .y. [cm]'
@end example
@noindent


Draw a symbol at given (single) location.  The location is normally in
user coordinates; it will be in centimetres on the page if the optional
@code{cm} keyword is given.

With the optional numerical/name code specified, then the symbol of
that number or name is drawn at each (x,y) datum, whether or not a
z-column exists.  The numerical/name codes are:

@c HTML <center><IMG SRC="./resources/symbols.gif" ALT="Symbols in gri"></center>
@c HTML <p>

@c HTML <!--
@example
 # name                description            
-- ----                -----------            
 0 plus                +
 1 times               x
 2 box                 box
 3 circ                circle
 4 diamond             diamond
 5 triangleup          triangle with base at bottom
 6 triangleright       triangle with base at left
 7 triangledown        triangle with base at top
 8 triangleleft        triangle with base at right
 9 asterisk            *
10 star                star of David
11 filledbox           filled box
12 bullet              filled circle
13 filleddiamond       filled diamond
14 filledtriangelup    filled triangleup
15 filledtriangleright filled triangleright
16 filledtriangledown  filled triangledown
17 filledtriangleleft  filled triangleleft
@end example
@c HTML -->


@node   Draw Symbol Legend, Draw Symbol, Draw Symbol At, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw symbol legend} @dots{} Command
@findex draw symbol legend
@cindex @code{draw symbol legend} command
@example
`draw symbol legend \symbol_name "label" \
    at .x. .y. [cm]'
@end example
@noindent
Draw indicated symbol at indicated location, with the indicated label
beside it.  The label is drawn one M-space to the right of the symbol,
vertically centered on the indicated @code{.y.} location.



@node   Draw Symbol, Draw Time Stamp, Draw Symbol Legend, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw symbol} Command
@findex draw symbol
@cindex @code{draw symbol} command
@example
`draw symbol [[.code.|\name]    \
    | [graylevel z]             \
      [color [hue z|.h.]        \
             [brightness .b.]   \
             [saturation .s.]]]'
@end example
@noindent
With no optional parameters, draw symbols at the (x,y) data.  If a
z-column has been read with @code{read columns}, then it's value codes
the symbol to draw, according to the table below.  (The value of z is
first rounded to the nearest integer.)  If no z-column has been read,
the symbol X is drawn at each datum.

With the optional numerical/name code specified, then the symbol of
that number or name is drawn at each (x,y) datum, whether or not a
z-column exists.  The numerical/name codes are:
@c HTML <center><IMG SRC="./resources/symbols.gif" ALT="Symbols in Gri"></center>
@c HTML <p>

@c HTML <!--
@example
 # name                description            
-- ----                -----------            
 0 plus                +
 1 times               x
 2 box                 box
 3 circ                circle
 4 diamond             diamond
 5 triangleup          triangle with base at bottom
 6 triangleright       triangle with base at left
 7 triangledown        triangle with base at top
 8 triangleleft        triangle with base at right
 9 asterisk            *
10 star                star of David
11 filledbox           filled box
12 bullet              filled circle
13 filleddiamond       filled diamond
14 filledtriangelup    filled triangleup
15 filledtriangleright filled triangleright
16 filledtriangledown  filled triangledown
17 filledtriangleleft  filled triangleleft
@end example
@c HTML -->

With the optional @code{graylevel z} fields specified, the graylevel is
given by the @code{z} column (0=black, 1=white).

With the optional @code{color} field specified, the color is
specified, either directly in the command (the @code{hue .h.} form) or
in the z column.  For more information on color, refer to the 
@code{set color hsb ...} command.

Examples: both @code{draw symbol bullet color} and 
@code{draw symbol bullet color hue z} draw bullets whose hue is given by
the value in the z column.  The hue (or the color, in other words)
blends smoothly across the spectrum as the numerical value ranges from 0
to 1.  The value 0yields red, 1/3 yields green, 2/3 yields blue, etc.
If the @code{brightness} and the @code{saturation} are not specified,
they both default to the value 1, which yields pure, bright colors.

Example: draw all in green dots
@code{draw symbol bullet color hue 0.333 brightness 1 saturation 1}


Example: display spectrum of dots
@example
set symbol size 0.3
open "awk 'END@{ \
    for(c=0;c<1;c+=1/40) \
        print(c,c,c)@}' | "
read columns x y z
close
draw symbol bullet color hue z
@end example





@node   Draw Time Stamp, Draw Title, Draw Symbol, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw time stamp} Command
@findex draw times stamp
@cindex @code{draw time stamp} command
@example
`draw time stamp \
    [fontsize .points. \
        [at .x_cm. .y_cm. cm \
            [with angle .deg.]]]'
@end example
@noindent
Draw the command-file name, PostScript file name, and time, at the top
of graph.  Normally, the timestamp is drawn at the top of the page, in a
fontsize of 10 points.  But the user can specify the fontsize, and
additionally the location (in cm) and additionally the angle measured in
degrees anticlockwise from the horizontal.

NOTE: If you want to have the plot drawn in landscape mode, ensure
that @code{set page landscape} precedes @code{draw time stamp.}



@node   Draw Title, Draw Values, Draw Time Stamp, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw title} @dots{} Command
@findex draw title
@cindex @code{draw title} command
@example
`draw title "\string"'
@end example
@noindent
Draw the indicated string above the plot.



@node   Draw Values, Draw X Axis, Draw Title, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw values} @dots{} Command
@findex draw values
@cindex @code{draw values} command
@example
draw values                 \
    [.dx. .dy.]             \
    [\format]               \
    [separation .xcm. .ycm.]
@end example
@noindent
Draw values of @code{z} column, at corresponding (@code{x}, @code{y})
locations.  If the @code{separation} keyword is present, the distance
between successive points is checked, and points are skipped unless the
x and y separations exceed than the indicated distances.

@itemize @bullet
@item @code{draw values}
Draw the values of @code{z(x,y)}, positioned 1/2 M-space to the right of
@code{(x,y)} and vertically centred on @code{y}.  The values are written
in a good general format known as @code{%lg}, in C terminology.
@item @code{draw values %.2f}
Draw values of @code{z(x,y)} positioned as described above, but using
the indicated format string.  This format string specifies that 2
numbers be used after the decimal place, and that floating point should
be used.  See any C manual for format codes.
@item @code{draw values .dx. .dy.}
Print values of @code{z(x,y)} at indicated offset vector
(@code{.dx.},@code{.dy.}), measured in centimeters, from the values of
@code{(x,y)} at which the data are defined.
@item @code{draw values .dx. .dy. %.3f}
Print values of @code{z(x,y)} at indicated distance from @code{(x,y)},
indicated format.
@end itemize



@node   Draw X Axis, Draw X Box Plot, Draw Values, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw x axis} @dots{} Command
@findex draw x axis
@cindex @code{draw x axis} command
@example
draw x axis [at bottom|top|@{.y. [cm]@} [lower|upper]]
@end example
@noindent
Draw an x axis, optionally at a specified location and of a specified
style.
@itemize @bullet
@item @code{draw x axis}
Draw a lower x axis (ie, one with the numbers below the line) at the
bottom of the box defined by @code{set y axis}.
@item @code{draw x axis at bottom}
Draw a lower x axis (ie, one with the numbers below the line) at the
bottom of the box defined by @code{set y axis}.
@item @code{draw x axis at top}
Draw an upper x axis (ie, one with the numbers above the line) at the
top of the box defined by @code{set y axis} (or above any existing
stacked x axes there)
@item @code{draw x axis at .y.}
Draw a lower x axis at indicated value of @code{.y.}.
@item @code{draw x axis at .y. upper}
Draw an upper x axis at indicated value of .y.
@end itemize



@node   Draw X Box Plot, Draw Y Axis, Draw X Axis, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw x box plot} @dots{} Command
@findex draw x box plot
@cindex @code{draw x box plot} command
@example
draw x box plot at .y. [size .cm.]
@end example
@noindent
Draw Tukey box plots (which give a summary of histogram properties).
Box plots were invented by Tukey for eda (exploratory data analysis).
The centre of the box is the median.  The box edges show the first
quartile (q1) and the third quartile (q3).  The distance from q3 to q1
is called the inter-quartile range.  The whiskers (i.e., the lines with
crosses at the end) extend from q1 and q3 to the furthest data points
which are still within a distance of 1.5 inter-quartile ranges from q1
and q3.  Beyond the whiskers, all outliers are shown: open circles are
used for data within a distance of 3 inter-quartile ranges beyond q1 and
q3, and in closed circles beyond that.




@itemize @bullet
@item @code{draw x box plot at .y.}
Draw Tukey's box plot, spreading in the x direction, centered at
y=@code{.y.} and of default width 0.5 cm.
@item @code{draw x box plot at .y. size .cm.}
Draw Tukey's box plot, spreading in the x direction, centered at
y=@code{.y.} and of width @code{.cm.} centimetres.
@end itemize



@node   Draw Y Axis, Draw Y Box Plot, Draw X Box Plot, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw y axis} @dots{} Command
@findex draw y axis
@cindex @code{draw y axis} command
@example
draw y axis [at left|right|@{.x. cm@} [left|right]]
@end example
@noindent
Draw a y axis, optionally at a specified location and of a specified
style.

@itemize @bullet
@item @code{draw y axis}
Draw a left-hand-side y axis (ie, one with the numbers to the left of
the line) at left of box defined by `set x axis'
@item @code{draw y axis at left}
Draw a left-hand-side y axis (ie, one with the numbers to the left of
the line) at left of box defined by @code{set x axis}.
@item @code{draw y axis at right}
Draw a right-hand-side y axis (ie, one with the numbers to the right of
the line) at right of box defined by @code{set x axis}.
@item @code{draw y axis at .x.}
Draw a left-hand-side y axis (ie, one with the numbers to the left of
the line) at indicated value of @code{.x.}
@item @code{draw y axis at .x. right}
Draw a right-hand-side y axis (ie, one with the numbers to the right of
the line) at indicated value of @code{.x.}
@end itemize



@node   Draw Y Box Plot, Draw Zero Line, Draw Y Axis, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw y box plot} @dots{} Command
@findex draw y box plot
@cindex @code{draw y box plot} command
@example
draw y box plot at .x. [size .cm]
@end example
@noindent
Draw Tukey box plots (which give summary of histogram properties).
@itemize @bullet
@item @code{draw y box plot at .x.}
Draw Tukey's box plot, spreading in the y direction, centered at
x=@code{.x.} and of default width 0.5 cm.
@item @code{draw y box plot at .x. size .cm.}
Draw Tukey's box plot, spreading in the y direction, centered at
x=@code{.x.} and of width @code{.cm.} centimetres.
@end itemize



@node   Draw Zero Line, Expecting, Draw Y Box Plot, Draw
@comment  node-name,  next,  previous,  up
@subsection The @code{draw zero line} @dots{} Command
@findex draw zero line
@cindex @code{draw zero line} command
@example
draw zero line [horizontally|vertically]
@end example
@noindent
Draw lines corresponding to x=0 or y=0.
@itemize @bullet
@item @code{draw zero line}
Draw line y=0 if it's within axes.
@item @code{draw zero line horizontally}
Draw line y=0 if it's within axes.
@item @code{draw zero line vertically}
Draw line x=0 if it's within axes.
@end itemize


@c HTML <!-- newfile Expecting.html "Gri: `expecting' command" "Gri Commands" -->


@node   Expecting, Filter, Draw Zero Line, Commands
@comment  node-name,  next,  previous,  up
@section The @code{expecting} Command
@cindex changes to Gri, protection against
@cindex protection against changes to Gri
@findex expecting
@cindex @code{expecting} command
@cindex incompatibilities, keeping track of
@example
expecting version .n.
@end example
@noindent
Show a list of incompatibilites since the named version.  This protects
you from being clobbered by changes made to Gri, since you will be
assured of being warned of these changes.  For example, if you are doing
a lot of work with version 2.1.0, but want to move up to a higher
version, you would include the line @code{expecting version 2.0100} in
all your commandfiles.  Once you are sure that your commandfile will not
be affected by the newer version, you should change the version that is
expected.

Note: As of October 1996, Gri version numbers have been in the form
@code{a.b.c}.  Numerical version numbers are created by the formula
@code{a + b/100 + c/10000}.  For example, version @code{2.1.0} has a
numerical value of @code{2.0100}.


@c HTML <!-- newfile Filter.html "Gri: `filter' command" "Gri Commands" -->

@node   Filter, Flip, Expecting, Commands
@comment  node-name,  next,  previous,  up
@section The @code{filter} Command
@cindex columns, filtering
@cindex images, filtering
@cindex filtering image data
@cindex filtering column data
@cindex smoothing column data

@findex filter
@cindex @code{filter} command

@itemize @bullet
@item @code{filter column x|y|z|u|v|r|theta recursively a[0] a[1] ... b[0] b[1] ...}
Filter indicated column, using a two-pass recursive filter.  The first
pass runs from the start to the end, while the second pass runs from the
end to the start; in this way, the phase shift inherent in this type of
filter is removed entirely.  The coefficients are used in the following
formula (demonstrated on the @code{x} column):
@example
x_new[i] = b[0] * x[i] \
  + b[1] * x[i-1] \
  + b[2] * x[i-2] \
  + ... \
  - a[1] * x_new[i-1] \
  - a[2] * x_new[i-2] \
  - ...
@end example
@noindent
Thus, for example, setting @code{a[i]} = 0 results in a simple
backwards-looking moving-average filter applied in two passes.  The real
power of this type of filter, however, comes when non-zero @code{a[i]}
coefficients are given, thus adding recursion (i.e., @code{x_new[i]}
depends on @code{x_new[i-...]}).  See any standard reference on digital
filters for an explanation.  You might find that the Matlab command
@code{butter} an easy way to design filter coefficients.  Here are some
examples:
@example
# Filter x column with simple 2-point moving
# average.  (This slurs into a 3-point moving
# average, in effect, since the filter is run
# forwards and then backwards.)
filter column x recursively 0 0 0.5 0.5

# Use filter designed with the Matlab 
# command butter(2,0.1), which creates a 
# 2nd order lowpass butterworth filter
# with a cutoff frequency of 0.1 
# (in units which have a frequency 
# of 1 corresponding to one-half the
# sampling rate).
filter column x recursively \
    1     -1.561  0.6414 \
    0.0201 0.0402 0.0201
@end example
@item @code{filter grid rows|columns recursively a[0] a[1] ... b[0] b[1] ...}
@noindent
Apply recursive filter (see @code{filter column ... recursively} for
meaning of this filter operation) to the individual rows or columns of
the grid data.  For example, @code{filter grid columns recursively 0 0
0.5 0.5} applies a 2-point moving average filter across the columns,
smoothing the grid in the x-direction.
@item @code{filter image highpass}
Remove low-wavenumber components from image (ie, sharpen edges).  Do
this by subtracting a Laplacian smoothed version of the image.
@item @code{filter image lowpass}
Remove high-wavenumber components from image (ie, smooth shapes).  Do
this by Laplacian smoothing.
@end itemize

@emph{See also} @xref{Smooth}.


@c HTML <!-- newfile Flip.html "Gri: `flip' command" "Gri Commands" -->

@node   Flip, Get Env, Filter, Commands
@comment  node-name,  next,  previous,  up
@section The @code{flip} Command
@cindex grid, flipping
@cindex image, flipping
@cindex flipping grids and images
@findex flip
@cindex @code{flip} command
@example
`flip grid|image x|y'
@end example
@noindent
Flip grid or image by relecting it about a horizontal or vertical
centerline.
@itemize @bullet
@item @code{flip grid x}
Flip grid so right-hand side becomes left-hand side.
@item @code{flip grid y}
Flip grid so bottom side becomes top side.
@item @code{flip image x}
Flip image so right-hand side becomes left-hand side.
@item @code{flip image y}
Flip image so bottom side becomes top side.
@end itemize



@c HTML <!-- newfile GetEnv.html "Gri: `get env' command" "Gri Commands" -->


@node   Get Env, Heal, Flip, Commands
@comment  node-name,  next,  previous,  up
@section The @code{get env} Command
@cindex environment variables
@cindex unix environment variables
@cindex operating system, getenv
@cindex operating system, environment variables
@findex get env
@cindex @code{get env} command
@example
`get env \result \environment_variable'
@end example
@noindent
Get the value of an "environment variable" from the unix operating system,
and store the result in the indicated synonym.  This makes most sense on
unix systems (hence the name, patterned after the unix command
@code{getenv}).  This command can be useful in making gri programs
resistant to changes in data-file locations.  Suppose, for example,
there is a file called @file{data}, normally in a local directory called
@code{Bravo}.  The line @code{open Bravo/data} will fail if the Bravo
directory is moved.  But if the name of the datafile is stored in an
unix environment variable, @code{DIR_BRAVO} say, then the gri program will
work no matter where the Bravo data are moved, so long as an appropriate
environment variable is modified when the data are moved.  Example:
@example
get env \dir DIR_BRAVO
if @{rpn "\dir" "" ==@}
    show "Cannot determine location of the Bravo data,"
    show "which should be stored in the environment"
    show "variable DIR_BRAVO.  You should"
    show "do something like"
    show "export DIR_BRAVO='/data/Bravo/'"
    show "in your ~/.environment file"
    quit

    quit
end if
open \dir/data
...
@end example



@c HTML <!-- newfile Heal.html "Gri: `heal' command" "Gri Commands" -->

@node   Heal, Help, Get Env, Commands
@comment  node-name,  next,  previous,  up
@section The @code{heal} Command
@findex heal
@cindex @code{heal} command

@example
heal columns|@{columns along x|y@}
@end example
The @code{heal} command heals over gaps in either columnar or gridded
data.  This is done by linear interpolation across the missing-value
gaps.

@itemize @bullet
@item @code{heal columns}
@noindent
Fill in missing values in x, y, z, ... columns, by linear interpolation
to neighboring valid data.  All gaps in the data will get replaced
by a linear function of index which matches the data at the indices just
before and just after the gap.  For example, if the y data were
like
@example
111
3
-9
-9
-9
7
333
@end example
@noindent
where @code{-9} is the missing-value code, then they would get
replace by
@example
111
3
4
5
6
7
333
@end example
@noindent
Notes: (1) This is done @emph{independently} for all existing columns.
(2) Gaps at the start and end of the columns are not filled in.
@item @code{heal grid along x}
@noindent
Scan in the x direction, filling in missing values by linear
interpolation.  Since this uses the the x-grid, you must first have done
@code{read grid x} or @code{set x grid}.
@item @code{heal grid along y}
@noindent
Scan in the y direction, filling in missing values by linear
interpolation.  Since this uses the the y-grid, you must first have done
@code{read grid y} or @code{set y grid}.
@end itemize


@c HTML <!-- newfile Help.html "Gri: `help' command" "Gri Commands" -->

@node   Help, If, Heal, Commands
@comment  node-name,  next,  previous,  up
@section The @code{help} Command
@findex help
@cindex @code{help} command
@example
`help [*|command_name|@{- topic@}]'
@end example
@noindent
Give help on a command or topic.
@itemize @bullet
@item @code{help}
Print a general help message.
@item @code{help *}
Prints complete help info.
@item @code{help command_name}
Prints help on the command whose name begins with the
string @code{command_name}.  The string may be several words long; e.g.
@code{help set} or @code{help set x axis}.
@item @code{help - topic_name}
The minus sign tells Gri that the string to follow it is a topic, not a
command.  Topics Gri knows about are listed by the one-word @code{help}
request.
@end itemize



@c HTML <!-- newfile If.html "Gri: `if' command" "Gri Commands" -->

@node   If, Ignore, Help, Commands
@comment  node-name,  next,  previous,  up
@section The @code{if} Command
@cindex if statements
@findex if
@cindex @code{if} command
(@emph{See also} @pxref{If Statements}.)
@example
`if @{[!] .flag.@}|\flag|@{@{"string1" == "string2"@}@}'
@end example
@noindent
Control program flow.  The @code{if} block is ended with a line
containing @code{end if}.  Optional @code{else} and @code{else if}
blocks are allowed.  Note that rpn expressions are allowed, and a
special form of string comparison is allowed, as in the examples below.
@example     
if .flag.
  # List of Gri commands to be done if .flag. is 1.
  # This list may extend across any number of lines.
end if
@end example
@noindent
If the variable @code{.flag.} is not equal to 0, do the code between the
@code{if} line and the @code{end if} line.

@example
if .flag.
  # Commands done if .flag. is 1
else
  # Commands done if .flag. is 0
end if
@end example
@noindent
If the variable @code{.flag.} is not equal to 0, do the code between the
@code{if} line and the @code{else} line.  If @code{.flag.} is equal to
0, do the code between the @code{else} line and the @code{end if} line.

@example
if ! .flag.
  # Commands done if .flag. is 0
end if
@end example
@noindent
If the variable @code{.flag.} is equal to 0, do the code between the
@code{if} line and the @code{end if} line.


@example
if @{rpn .flag. 10 <@}
  # Commands done if 10 is less than .flag.
end if
@end example
@noindent
If the variable @code{.flag.} is less than 10, do the code between the
@code{if} line and the @code{end if} line.

@example
if \smooth
  # Commands done if \smooth is 1
else
  # Commands done if \smooth is 0
end if
@end example
@noindent
If the number stored in the synonym @code{\smooth} is not equal to 0, do
the code between the @code{if} line and the @code{else} line.  If the
synonym stores a representation of a number not equal to zero, do the
@code{else} part.  If the synonym contains text that does not decode to
a number, generate error message.

@example
if @{"\item" == "Temperature"@}
  # Commands done if the synonym \item is equal to the
  # indicated text string.
end if
@end example
@noindent
If the synonym @code{\item} has the value @code{Temperature} stored in
it, do the indicated code.

@example
if @{rpn "\item" "Temperature" ==@}
  # Commands done if the synonym \item
  # equals indicated text string.
end if
@end example
@noindent
As above, but using the @code{rpn} calculator 
(@pxref{rpn Mathematics}).   

@example
if @{rpn "\item" "Temperature" !=@}
  # ...
end if
@end example
@noindent
As above, but do the indicated code if @code{\item} is @emph{not} equal
to @code{Temperature}.



@c HTML <!-- newfile Ignore.html "Gri: `ignore' command" "Gri Commands" -->

@node   Ignore, Input, If, Commands
@comment  node-name,  next,  previous,  up
@section The @code{ignore} Command
@findex ignore
@cindex @code{ignore} command
@example
`ignore last .n.'
@end example
@noindent
Ignores last @code{.n.} lines read by @code{read columns}.


@c HTML <!-- newfile Input.html "Gri: `input' command" "Gri Commands" -->

@node   Input, Insert, Ignore, Commands
@comment  node-name,  next,  previous,  up
@section The @code{input} Command
@findex input
@cindex @code{input} command
@example
`input \ps_filename \
  [.xcm. .ycm. \
    [.xmag. .ymag. \
      [.rot_deg.]]]'
@end example
@noindent
Input the named PostScript file directly into the Gri output PostScript
file.  (If the filename has punctuation, insert it in double quotes,
e.g. @code{input "../thefile"}.)  If no options are specified, the file
is input at normal scale, with normal margins.  (Aside to PostScript
programmers: the named file is sandwiched between @code{gsave} and
@code{grestore} commands.)  If @code{.xcm.} and @code{.ycm.} are
specified, then the origin is moved to the named location first.  If, in
addition, @code{.xmag.} and @code{.ymag.} are specified, then these are
used as scale factors after translation.  Finally, if @code{.rot_deg.}
is specified in addition, then the indicated counterclockwise rotation
is applied after translation and scaling.  Hint: if the results look
wrong, the first thing to do is to think carefully about the order of
the (translation, scaling, rotation) operations.



@c HTML <!-- newfile Insert.html "Gri: `insert' command" "Gri Commands" -->

@node   Insert, Interpolate, Input, Commands
@comment  node-name,  next,  previous,  up
@section The @code{insert} Command
@findex insert
@cindex @code{insert} command
@example
`insert \filename'
@end example
@noindent
Insert instructions in named file into current file.  This is useful as
a way of sharing global information between several Gri programs.  On
unix systems, if a full filename is specified (i.e., a filename
beginning with slash or period), then that particular file will be used.
For filenames beginning with a letter or number, though, Gri will search
for the file in the list of directories stored in your @code{GRIINPUTS}
unix environment variable, or in the list (@file{.},
@file{/usr/local/lib/gri}) if that environment variable is not set.



@c HTML <!-- newfile Interpolate.html "Gri: `interpolate' command" "Gri Commands" -->

@node   Interpolate, List, Insert, Commands
@comment  node-name,  next,  previous,  up
@section The @code{interpolate} Command
@findex interpolate
@cindex @code{interpolate} command
@cindex contouring
@cindex grid
@example
interpolate x grid to .left. .right. .inc.|@{/.cols.@}'
interpolate y grid to .bottom. .top. .inc.|@{/.rows.@}'
@end example
@noindent
Transform grid by interpolating between existing grid data, according to
a new x or y grid specified in the manner of @code{set x grid} and
@code{set y grid}.  Note that the new grid is neccessarily regular,
while the first grid needn't have been.  The data of the new grid are
constructed by interpolation, using the same interpolation algorithm as
the @code{convert grid to image} command.



@c HTML <!-- newfile List.html "Gri: `list' command" "Gri Commands" -->

@node   List, Ls, Interpolate, Commands
@comment  node-name,  next,  previous,  up
@section The @code{list} Command
@findex list
@cindex @code{list} command
@example
`list \command-syntax'
@end example
@noindent
List the source of a gri command.  Often this is just the name of a C
function internal to gri (try @code{list list} for an example), but when
the command is written in the gri programming language the source will
be more understandable (try @code{list create function}).


@c HTML <!-- newfile Ls.html "Gri: `ls' command" "Gri Commands" -->

@node   Ls, Mask, List, Commands
@comment  node-name,  next,  previous,  up
@section The @code{ls} Command
@cindex files, listing
@cindex directory listing
@findex ls
@cindex @code{ls} command
@example
`ls [\file_specification]'
@end example
@noindent
List files in current directory.  (The current directory can be printed
by the gri command @code{pwd} and can be set by the gri command
@code{cd}.)  @code{ls \file_specification} lists files in current
directory which match the file specification.  Normal unix file
specification options are understood.


@c HTML <!-- newfile Mask.html "Gri: `mask' command" "Gri Commands" -->

@node   Mask, New, Ls, Commands
@comment  node-name,  next,  previous,  up
@section The @code{mask} Command
@cindex masking image
@cindex image, masking
@findex mask
@cindex @code{mask} command
@example
`mask the image [to @{uservalue .u.@}|@{imagevalue .i.@}]'
@end example
@noindent
Examine both the image and the mask pixel by pixel.  For any pixels
which have a mask value of 1 (which indicates an invalid region of the
image), change the image value.  If no @code{to} phrase is present,
change the image value to 0 in pixel units.  If the 
@code{to uservalue .u.} phrase is present, change the pixel to hold the
imagevalue that 
corresponds to this uservalue (see @code{set image range} command for
a discussion of this correspondance).  If the @code{to imagevalue .i.},
change the pixel to hold that imagevalue (in range 0 to 255 inclusive
for 8-bit images).


@c HTML <!-- newfile New.html "Gri: `new' command" "Gri Commands" -->

@node   New, Newpage, Mask, Commands
@comment  node-name,  next,  previous,  up
@section The @code{new} Command
@findex new
@cindex @code{new} command
@cindex synonyms, multiple copies of
@cindex synonyms, making local versions
@cindex variables, making local versions
@cindex variables, multiple copies of
@example
new .variable_name. | \synonym_name \
  [.variable_name. | \synonym_name \
    [...]]
@end example
@noindent
Set aside storage for new version of the named variable(s) and/or
synonym(s).  Any number of variables and synonyms may be specified.  If
a given variable/synonym already exists, this will create a new version
of it, and future assignments will be stored in this new version
@emph{without} affecting the pre-existing version.  If the
variable/synonym is @code{delete}ed, the new version is deleted, making
the old, unaltered, version accessible again.

This command is used mostly for temporary use, to prevent clashing with
existing values.  Suppose you want to change the font size inside a new
command or an if block.  Then you might do the following, where the
variable @code{.tmp.} is used to store the old font size.  Note that the
use of the @code{new/delete} statements prevents the assignment to the
local version of the variable @code{.tmp.} from affecting the value
known outside the @code{if} block, if in fact @code{.tmp.} happened to
exist outside the block.
@example
set font size 10
draw label "This is in fontsize 10" at 10 2 cm
if .want_title.
  new .tmp.
  .tmp. = ..fontsize..
  set font size 22
  draw label "This is 22 font" at 10 5 cm
  set font size .tmp.
  delete .tmp.
end if
draw label "This is 10 font" at 10 8 cm
@end example



@c HTML <!-- newfile Newpage.html "Gri: `newpage' command" "Gri Commands" -->

@node   Newpage, Open, New, Commands
@comment  node-name,  next,  previous,  up
@section The @code{new page} Command
@cindex page breaks
@findex new page
@cindex @code{new page} command
@example
`new page'
@end example
@noindent
Finish the present page, and start a new page.  All settings (of
linewidth, axes, landscape/portrait, etc) are retained on the new page.
Among these settings is the flag that tells gri whether you need axes
plotted along with your data.


@c HTML <!-- newfile Open.html "Gri: `open' command" "Gri Commands" -->

@node   Open, Postscript, Newpage, Commands
@comment  node-name,  next,  previous,  up
@section The @code{open} Command
@findex open
@cindex @code{open} command
@cindex netCDF files, opening
@cindex operating system, filtering datafiles
@cindex system commands acting as datafiles
@cindex data files, opening
@cindex opening data files
Possibilities are:
@example
`open \filename'

`open \filename binary \
    [uchar|8bit|int|float|double|16bit]'

`open \filename netCDF'

`open "SYS-CMD |" \
    [binary [uchar|8bit|int|float|double|16bit]]'
@end example
@noindent
The first three forms work on data files.  Use double-quotes around
filenames with punctuation in them (e.g. @code{open "../data"}).  Files
may be ascii (the default), binary or -- on systems with the
@code{netCDF} libraries installed -- in the @code{netCDF} format.

For more information on netCDF format, see
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html}
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@c HTML here </a>.

The @code{SYSTEM-COMMAND} form is used to work on a temporary file
created by a system command.  An overview of useful system commands is
provided elsewhere in this manual @xref{Overview of System Tools}.

Several binary file types are allowed.  The keywords @code{uchar}, etc,
can be used to specify the type of data in the file.  If no keyword is
given, Gri assumes that images use @code{unsigned char} (8 bits),
columns use @code{float} (32 bits), and that grids use @code{float} (32
bits).


@cindex pipes, opening files through them
@cindex opening files through pipes
In the @code{SYSTEM-COMMAND} form, the indicated system command is
performed, with the output being inserted into a temporary file.  Future
@code{read}, @code{close}, etc, commands apply to to this temporary
file.  (The temporary file is automatically deleted by Gri, but if Gri
aborts the file will not be deleted, so you should scan @file{/usr/tmp/}
for files that you own.)  For example
@example
open "cat a.dat | \.awk. '@{$1, $2 * 22@}' |"
read columns x y
@end example
@noindent
gets awk to multiply the y column by 22.  (Note the use of
@code{\.awk.}, a builtin synonym naming the awk program on your system.)
The ability to use system commands in @code{open} statements lets you
use familiar system tools like @code{head}, @code{sed}, @code{awk},
@code{perl}, etc, to work on your data.  For example, if you store your
data in compressed form, and do not wish to have temporary files sitting
around, you might wish to do something like
@cindex compressed data
@cindex reading compressed data
@cindex zcat, using to uncompress data
@example
open "zcat myfile.dat.Z | "
@end example

@cindex files, opening remote WWW files
@cindex WWW data files, opening
@cindex world-wide web data files, opening
Files may be opened across the WWW (world-wide web).  Below is a
replacement for example1.gri @xref{Simple Example}.
@example
open "lynx -dump \
  http://www.phys.ocean.dal.ca/~kelley\
/gri/examples/example1.dat \
  | tail +2 |"
read columns x y
draw curve
draw title "Example 1"
@end example
Note: the @code{tail +2} removes the initial blank line that lynx
generates.

For complicated data manipulation, a system tool like @file{awk} or
@file{perl} is ideal.

Here are a couple of examples.


@enumerate
@item
For example, suppose x and y data are stored in Hour.minutesecond
format, e.g. 12.2133 means hour 12, minute 21, second 33.  Gri doesn't
read HMS format, but gawk can be told to:

@cindex geography, converting hour-minute-second to decimal hour
@cindex maps, converting hour-minute-second to decimal hour
@cindex conversion, hour-minute-second to decimal hour
@cindex hms format
@cindex hour, minute, second data
@cindex gawk, using to convert files from HMS to decimal
@example
open "cat datafile.HMS |        \
    \.awk. '@{                   \
    split($1, hms, \".\");      \
    h = hms[1];                 \
    m = int(hms[2] / 100);      \
    s = hms[2] - 100 * m;       \
    x = h + m / 60 + s / 3600;  \
    split($2, hms, \".\");      \
    h = hms[1];                 \
    m = int(hms[2] / 100);      \
    s = hms[2] - 100 * m;       \
    y = h + m / 60 + s / 3600;  \
    print(x,y)                  \
    @}' | "
    read columns x y
@end example
@item
Suppose we have timeseries data in the form
@example
Tue_Jul_25_11:07:51 0.62
Tue_Jul_25_11:22:51 0.59
Tue_Jul_25_11:37:51 0.56    
@end example
@noindent
(stored in a file called @file{a.dat} day) and we want a graph of the
y-variable (0.62, 0.59, 0.56) versus x-variable, time expressed say as
seconds in the day.  Then here is how that could be done:
@example
open "cat a |\
    sed -e 's/_/ /g' -e 's/:/ /g' |\
    awk '@{print ($4*3600+$5*60+$6, $7)@}' |"
read columns x y
draw curve
@end example
Note that the actual day information is skipped in this example;
seasoned @code{awk} users could easily fill in the code to handle
datasets spanning several days.
@end enumerate

@c HTML <!-- newfile PostScript.html "Gri: `postscript' command" "Gri Commands" -->

@node   Postscript, Pwd, Open, Commands
@comment  node-name,  next,  previous,  up
@section The @code{postscript} Command
@cindex write PostScript commands directly to output file
@cindex postScript file, write to
@findex postscript
@cindex @code{postscript} command
@example
`postscript \string'
@end example
@noindent
Write the indicated string to the PostScript output file, after
substitution of synonyms if there are any.  Example:
@example
\a = "45"  # angle
\w = "8.5" # page width
postscript gsave \w 72 mul 0 translate \a rotate
# ... other code to do stuff
postscript grestore
@end example

Here is how to draw an image palette vertically instead of horizontally:
@example
\X = "3"	# cm
\Y = "10"	# cm
\a = "90"       # degrees counterclockwise
postscript gsave \X 28.35 mul \Y 28.35 mul translate \a rotate
# Palette is at user's origin
draw image palette box 0 0 10 1
postscript grestore
@end example

NOTE: the @code{postscript} command is @emph{very} dangerous, and should
normally only be used by developers.  Most of the code concerning this
is in the file @file{doline.cc}; look for the string
@code{postscriptCmd} to find the relevant code.


@c HTML <!-- newfile Pwd.html "Gri: `pwd' command" "Gri Commands" -->

@node   Pwd, Query, Postscript, Commands
@comment  node-name,  next,  previous,  up
@section The @code{pwd} Command
@cindex directory, how to find out
@findex pwd
@cindex @code{pwd} command
@example
`pwd'
@end example
@noindent
Print current directory (which can be set by @code{cd}).



@c HTML <!-- newfile Query.html "Gri: `query' command" "Gri Commands" -->

@node   Query, Quit, Pwd, Commands
@comment  node-name,  next,  previous,  up
@section The @code{query} Command
@findex query
@cindex @code{query} command
@cindex user interaction, @code{query} command
@cindex interaction with user, @code{query} command
@example
`query \synonym|.variable. \
  ["\prompt" [("\default"|.default)]]'
@end example
@noindent
Ask the user for the value of a variable (number) or synonym (text
string).  Gri recognizes the type of the item being asked for, either a
variable or synonym, by the presence of a dot or backslash in the second
word of the command line.  If a prompt string is given (in quotes), then
this string is shown to the user.  If a default is given (in
parentheses), then it will be displayed also, and if the user types
carriage-return, then that item will be assigned to the variable or
synonym.  If the default has more than one item, then Gri considers this
a restrictive list of possibilities, and will demand that the answer be
in that list, going into an infinite query loop until an item from the
list (or carriage-return, meaning take first item) is found.  The items
in the list are to be separated by spaces, not commas or any other
non-whitespace characters.

NOTE: The @code{-y} command-line option bypasses all query commands,
fooling Gri into thinking that the user typed a carriage-return to all
questions.  Thus the defaults, if they exist, are selected.


@c HTML <!-- newfile Quit.html "Gri: `quit' command" "Gri Commands" -->

@node   Quit, Read, Query, Commands
@comment  node-name,  next,  previous,  up
@section The @code{quit} Command
@cindex quiting Gri
@cindex stopping Gri
@findex quit
@cindex @code{quit} command
@example
`quit [.exit_status.]'
@end example
@noindent
Exits the gri program.  If an exit status (@code{.exit_status.}) is
specified, then Gri returns this value, rounded to the nearest integer,
as the ``exit status'' (a concept meaningful mostly in the unix
environment, where it designates an error).
 

@c HTML <!-- newfile Read.html "Gri: Read commands" "Gri Commands" -->

@node   Read, Read Colornames, Quit, Commands
@comment  node-name,  next,  previous,  up
@section The @code{read} Command
There are several varieties of @code{read} command.
@menu
* Read Colornames::             Read colornames
* Read Columns::                Read (x,y,...) columnar data
* Read Grid::                   Read grid for contouring
* Read Image Colorscale::       Read colormap for color image
* Read Image Grayscale::        Read colormap for gray image
* Read Image Mask::             Read mask for image
* Read Image::                  Read image
* Read From::                   Change which open file looked at
* Read Synonym or Variable::    Read a synonym or variable
* Read Line::                   Read a synonym as whole line
@end menu


@node   Read Colornames, Read Columns, Read, Read
@comment  node-name,  next,  previous,  up
@section The @code{read colornames} Command
@findex read colornames
@cindex @code{read} command
@cindex @code{read colornames} command
@cindex Colors, reading from X11 database
@cindex X11 colors, reading
@example
`read colornames from RGB "\filename"'
@end example
@noindent
Read colornames from named file, which is in the X11 format.  This
format has 4 or more columns, the first three giving the red, green and
blue values in the range 0 to 255, and the last columns giving the
colorname (which may have more than one word).  You can create colors
yourself or read an X11 color file.  In many cases you will want to
@code{read colornames from RGB "/usr/lib/X11/rgb.txt"}.  Full filenames
must be used; the '~' syntax is not permitted.  Once you have read in a
colorname table, the named colors may be used as builtin colors
@xref{Set Color}.  To view the colors available on your particular
system, use the Unix command @code{xcolors} or @code{excolors}; to see
the RGB values of all colors on your X11 system, use the @code{showrgb}
unix command..  To view the names and RGB values of the colors Gri
knows, including builtin ones and ones from @code{read colornames}, use
@code{show colornames}.


@node   Read Columns, Read Grid, Read Colornames, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read columns} @dots{} Command
@findex read columns
@cindex @code{read columns} command
@example
`read columns ...'
@end example

Read numbers into columns.  These columns have predefined
meanings and names.  For example, @code{read columns x y} instructs Gri
to read data into columns called @code{x} and @code{y}; it is these data
that Gri will use if you tell it to @code{draw curve}.  Other columns
are: @code{z}, used for contouring a function @code{z=z(x,y)};
@code{weight}, used for weighting data points; @code{u} and @code{v},
used for arrow (vector) plots; @code{r} and @code{theta}, polar
coordinates.

If the keyword @code{appending} is given as the last word on the
@code{read columns} line, then the new data will be appended to any
existing columnar data; otherwise they will overwrite any existing data.

As a special case, if the @code{x} column is not indicated
(e.g. @code{read columns y}) then Gri creates x-values automatically, in
the sequence 0, 1, 2, etc.

@itemize @bullet
@item @code{read columns x y}
Read @code{x} in column 1, @code{y} in column 2 until blank-line found.
Only the first tow numbers on each line will be read; any extra numbers
(or words) on the line will be ignored.
@item @code{read columns * y * * x}
Read @code{x} in column 5, @code{y} in column 2.  The @code{*} character
is a spacer.  It instructs Gri to skip the first, third, and fourth
words on the data line.  These words need not be numbers.  This example
illustrates a general mechanism of using the @code{*} character to skip
over unwanted items in the data file.  Note that there is no need to
supply @code{*} characters for trailing extraneous words; Gri will skip
them anywary.  Finally, note that any order of @code{x} and @code{y}
(and the other columns; see below) is allowed.
@item @code{read columns y=2 x=5} or @code{read columns x=5 y=2}
As above; read @code{x} in column 5 and @code{y} in column 2.  The
column number may be specified in this manner for all the named column
variables.  No spaces are allowed before or after the @code{=} sign.
The first column is called column 1.  Whether this format is used or the
@code{*} format is a matter of choice, except that numbered format also
permits using a given number to fill several variables (for example
@code{read columns x=1 y=2 u=1 v=2}).

@cindex netCDF files, reading columns
@item @code{read columns x="netCDF_name" ...}
If the file is a @code{netCDF} file, opened
by e.g. @code{open myfile.nc netCDF}, then the @code{netCDF} variables
for the columns, e.g. 
@example
open latlon.nc netCDF
read columns x="longitude" y="latitude"
@end example
@noindent
Note: the data @emph{must} be stored as the @code{netCDF} ``float''
type.

For more information on netCDF format, see
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html}
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@c HTML here </a>.
@item @code{read columns * y z * x}
Read @code{x} in column 5, @code{y} in column 2, and @code{z} in column
3.  The @code{z} column is used for contouring.
@item @code{read columns x y u v}
@cindex directin field, how to read
@cindex vector field, how to read
@cindex arrows, how to read direction field
Read @code{x} and @code{y} in first two columns, and the ``arrow'' data
@code{u} and @code{v} as third and fourth columns.
@item @code{read columns .rows. x y}
Read @code{.rows.} rows of column data.
@item @code{read columns r theta}
Read polar coordinates, @code{r} in column 1, @code{theta} (in radians)
in column 2.
@end itemize

@cindex column data, x in one file and y in another

Sometimes you'll have @code{x} in one file and @code{y} in another.  In
that case, use the operating system or an editor to put the columns in
one file.  In unix, the easy way is
@example
open "paste file_with_x file_with_y |"
read columns x y
@end example


NOTE FOR BINARY FILES: For ascii files, Gri will proceed to a new line
after it has read the items requested; it skips any words appearing on
the data line after the last object of interest.  Thus 
@code{read columns x y} will read the first two columns and ignore any other
columns that might be present.  But for binary files, Gri has no way of
knowing how to "skip" to the next line (see @code{skip} command), so you
will have to flesh out the @code{read columns} command with as many
spacers as are present in your data.  For example, if you have four
numbers in each data record and want to interpret the first two as
@code{x} and @code{y}, you would use @code{read columns x y * *} to read
the data.


RETURN VALUE:
@cindex @code{\.return_value.}, from @code{read columns}
Sets @code{\.return_value} to 
@code{N rows N non-missing N inside-clip-region}  


@node   Read Grid, Read Image Colorscale, Read Columns, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read grid} @dots{} Command
@findex read grid
@cindex reading grid data
@cindex grid, reading
@cindex @code{read grid} command

@code{read grid} commands read grid characteristics.  (The ``grid'' is
the object that is contoured.)

For normal ascii or binary files, the commands to read the grid's
x-locations, y-locations and data are:
@example
`read grid x [.rows.]'
`read grid y [.rows.]'
`read grid data [spacers] \
  [.rows. .cols.] [spacers] [bycolumns]'
@end example

@cindex netCDF files, reading grid data
For @code{netCDF} files, the commands are as follows (note that it is
not possible to specify the number of data to read, nor to read the grid
by columns).
@example
`read grid x = "variable_name"'
`read grid y = "variable_name"'
`read grid data = "variable_name"'
@end example
@noindent
The ordering of the y-grid data is the same as if they were read from a
normal file: the first number is considered to be at the top of the
plot.

For more information on netCDF format, see
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html}
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@c HTML here </a>.


Details of the non-netCDF commands:
@itemize @bullet
@item @code{read grid x [.cols.]}
Read the @code{x} locations of the grid points, one number per line.
If @code{.cols.} is supplied, then that many values will be read;
otherwise, reading will stop at end-of-file or blank-line.
@item @code{read grid y [.rows.]}
As above, but for y grid;  @code{.rows.} is the number of rows.  The
first number to be read corresponds to the location of the @emph{top}
edge of the grid.  Thus, if you were to view the column of numbers with
a text editor, they would be oriented the same way as the corresponding
elements will appear on the page.
@item @code{read grid data [.rows. .cols.]}
Read data for a grid having @code{.rows.} and @code{.cols.} columns.
(If @code{.rows.} and @code{.cols.} are not supplied, but the grid
already exists, then those pre-existing values are used.  If they are
specified here, then they are checked for consistency with the
pre-existing values if they exist.) Gri will read @code{.rows.} lines,
each containing @code{.cols.} numbers.  (Extra information in the file
can be skipped; see discussion of the @code{*} keyword below.)  Gri
will interpret the first line it reads as the grid data corresponding
to a value of y equal to @code{y[.rows.]}.  Thus, file should be
arranged like this:
@example
f(x[1], y[.rows.])  ...  f(x[.cols.], y[.rows.])
        .
        .
        .
f(x[1], y[3])       ...  f(x[.cols], y[3])
f(x[1], y[2])       ...  f(x[.cols], y[2])
f(x[1], y[1])       ...  f(x[.cols], y[1])
@end example
 
@item @code{read grid data [.rows. .cols.] bycolumns}
As above, but the @code{bycolumns} keyword tells Gri to read the data
one column at a time, instead of one row at a time.  Each line is
expected to contain @code{.rows.} numbers (as opposed to @code{.cols.}
numbers, as in the format where the @code{bycolumns} keyword is not
present).  (Extra information in the file can be skipped; see
discussion of the @code{*} keyword below).  The first line of the data
file contains the first column of the gridded data, corresponding to x
equal to @code{x[1]}).  The file should look like this:
@example
f(x[1], y[1])     ...     f(x[1], y[.cols.])
f(x[2], y[1])     ...     f(x[2], y[.cols.])
f(x[3], y[1])     ...     f(x[3], y[.cols.])
        .
        .
        .
f(x[.rows.],y[1]) ...  f(x[.rows.], y[.cols.])
@end example
@item @code{read grid data * * [.rows. .cols.]}
As @code{read grid data .rows. .cols.} except that the first two words
on each line are skipped.  As usual, trailing extraneous numbers are
also skipped.
@end itemize

@emph{See also} @code{set x grid}, @code{set y grid}


@noindent
RETURN VALUE:
@cindex @code{\.return_value.}, from @code{read grid ...}

@code{read grid x} sets @code{\.return_value} to @code{N cols}

@code{read grid y} sets @code{\.return_value} to @code{N rows}

@code{read grid data} sets @code{\.return_value} to @code{N rows N cols}


@node   Read Image Colorscale, Read Image Grayscale, Read Grid, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read image colorscale|grayscale} Command
@findex read image colorscale
@cindex @code{read image colorscale} command
@cindex image colorscale, reading
@cindex colorscale of image, reading from file

@example
`read image colorscale [rgb|hsb]'
@end example
@noindent
Read colorscale for image, from 256 lines each containing values for
Red, Green, and Blue (or Hue, Saturation and Brightness), separated by
whitespace.  The values are expected to be in the range 0 to 1, and are
clipped to these limits if not.  

For hints on how to create such an input file, 
@xref{Read Image Grayscale}.  If the example given there has the
following code instead, 
@example
open "\.awk. 'BEGIN @{            \
     for(i=0;i<256;i++) @{        \
       print((i - 50)/50, 1, 1)  \
     @}                           \
   @}' |"
read image colorscale hsb
@end example
@noindent
then a linear full-color spectrum running from red at 10C to magenta at
15C is achieved.


@node   Read Image Grayscale, Read Image Mask, Read Image Colorscale, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read image grayscale} Command
@findex read image grayscale
@findex read image greyscale
@cindex @code{read image grayscale} command
@cindex @code{read image greyscale} command
@cindex image grayscale, reading
@cindex grayscale of image, reading from file
@example
`read image grayscale'
@end example
@noindent
Read grayscale for image for image, from 256 lines each containing a
single value.  The values are expected to be in the range 0 to 1, and
are clipped to these limits if not.  For 8-bit images, Gri multiplies
these values by 255, and uses this list for the grayscale mapping.  Such
a list is created by @code{write image grayscale}.

As an example, consider the code fragment @xref{Images}.
@example
set image range 5 30.5
set image grayscale black 10 white 15
@end example
@noindent
is equivalent to
@example
set image range 5 30.5
open "\.awk. 'BEGIN @{\
  for(i=0;i<256;i++) @{\
    print(1-(i-50)/50)\
  @} \
@}' |"
read image grayscale
close
@end example
@noindent
because the image formula is
@quotation
Temperature = 5C + 0.1C * pixelvalue
@end quotation
@noindent
where the pixelvalue ranges from 0 to 255.  Therefore, a temperature of
10C is a pixelvalue of 50, and 15C is 100.  To get a grayscale ranging
between these values, therefore, we create a linear function which maps
the 50th pixelvalue into grayvalue 1, and the 100th pixelvalue into
grayvalue 0.  That is what the awk line does; to see the actual numbers,
you could insert the line@code{write image grayscale to TMP} and look at
the file @file{TMP} (bear in mind that Gri will clip the values to the
range 0 to 1).

Sometimes you will have a file, say named @file{map.dat}, with RGB
numbers in the range 0-255, rather than 0-1 as Gri requires.  To read
them, use the operating system to convert the numbers for you
@xref{Open}.
@example
open "cat map.dat \
  | \.awk. '@{print(($1+$2+$3)/3/255)@}' |"
read image grayscale
close
@end example


@node   Read Image Mask, Read Image, Read Image Grayscale, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read image mask} @dots{} Command
@findex read image mask
@cindex @code{read image mask} command
@cindex mask for image, reading
@cindex image mask, reading
@example
`read image mask rasterfile|@{.rows. .cols.@}'
@end example
@noindent
Read image mask.  The mask is associated with the image read in by the
@code{read image} command in the following way.  When computing image
histograms, Gri ignores any pixels in the image for which the
corresponding pixel in the mask is set to @code{1}.

@itemize @bullet
@item @code{read image mask rasterfile}
The image size is specified in the rasterfile file itself, so 
it is not specified.
@item @code{read image mask .rows. .cols.}
The file must contain @code{.rows.*.cols.} binary data.  Pixel 
order is the same as for images.
@end itemize


@node   Read Image, Read From, Read Image Mask, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read image} @dots{} Command
@findex read image
@cindex @code{read image} command
@cindex images, reading
@noindent
There are several types of @code{read image} commands, depending on the
file format.  If the file is "raw", with no embedded information about
things like the width and height, then we need to specify everything, as
in the first format given below.  The other formats make use of the
header information in, e.g. PGM files.

@emph{Headerless images}
@example
`read image .rows. .cols. \
  [box .ll_x. .ll_y. .ur_x. .ur_y.] \
  [bycolumns]'
@end example
@noindent
With no options specified (@code{read image .rows. .cols.}), read binary
data defining an @code{image}.  The image range must have previously
have been set by @code{set image range}.  The data are as written as
"unsigned char" format in C.

When the @code{box} option is specified, the geometry of the image, in
user coordinates, is specified in terms of the cartesian coordinates of
the lower-left corner (@code{.ll_x.}, @code{.ll_y.}) and upper-right
corner (@code{.ur_x.}, @code{.ur_y.}).  If the @code{box} option is not
specified, this geometry can be specified with either @code{read x grid}
or @code{set x grid}, plus either @code{read y grid} or 
@code{set y grid}.

With the @code{bycolumns} keyword present, the image is read sweeping
from top-to-bottom, then left-to-right, instead of the user order.


@emph{Sun rasterfile images}
@example
`read image rasterfile [box .ll_x. .ll_y. .ur_x. .ur_y.]'
@end example
@noindent
Read image in Sun rasterfile format.  Image geometry is inferred from
the header, so @code{.rows.} and @code{.cols} parameters are not given.

@emph{PGM images}
@example
`read image pgm [box .ll_x. .ll_y. .ur_x. .ur_y.]'
@end example
@noindent
Read image in PGM (Portable Gray Map) format.  Image geometry is
inferred from the header, so @code{.rows.} and @code{.cols} parameters
are not given.  Both ascii and binary PGM formats are supported (that
is, files with magic characters of P2 and P5).

@emph{NOTE} that there are many image formats and Gri doesn't try to
deal with them all.  The idea is to use another program to convert
images to a file format that Gri understands.  In the future Gri may
support PNG and other popular formats, especially in the Linux versions,
for which libraries exist to ease the input.



@node   Read From, Read Synonym or Variable, Read Image, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read from \filename} Command
@findex read from
@cindex @code{read from} command
@cindex file, selecting between open files
@example
`read from \filename'
@end example
@noindent
Cause future @code{read} commands to read from the indicated file.  If
that file is not open, an error message will result.  Use 
@code{read from \filename} to shuffle reading between several open files.


@node   Read Synonym or Variable, Read Line, Read From, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read} @dots{} (synonym or variable) command
@findex read ...
@cindex @code{read ...} command
@cindex variables, reading
@cindex synonyms, reading
@cindex reading variables
@cindex reading synonyms
@example
`read [* [*...]] \synonym|@{.variable. [.variable. ...]@}'
@end example
@noindent
Read whitespace-separated words from datafile, assigning to any number
of synonyms or variables as indicated.  The token @code{*} indicates
that the word in the datafile should be skipped.  As usual, the datafile
may be embedded in the commandfile.

@cindex reading attributes in NetCDF files
@cindex netCDF files, reading attributes, units, etc

If the input file is in the netCDF format, the
indicated item will be read.  For example, 
@code{read \time:_MissingValue} reads the missing value for the variable
called @code{time}.  This conveniently allows your data file to dictate
axes names, units, missing values, etc.  Example:

@example
# Plot profile of TU81N (age-corrected tritium)
open profile.nc netCDF
read columns x="TU81N" y="z"
read \@{z:_FillValue@}		# assume same for all
read \@{z:long_name@}
read \@{z:units@}
read \@{TU81N:long_name@}
read \@{TU81N:units@}
close
set missing value \@{z:_FillValue@}
set x name "\@{TU81N:long_name@} (\@{TU81N:units)@}"
set y name "\@{z:long_name@} (\@{z:units)@}"
set y axis decreasing
draw curve
@end example

For more information on netCDF format, see
@code{http://www.unidata.ucar.edu/packages/netcdf/index.html}
@c HTML <a href="http://www.unidata.ucar.edu/packages/netcdf/index.html">
@c HTML here </a>.



@node   Read Line, Regress, Read Synonym or Variable, Read
@comment  node-name,  next,  previous,  up
@subsection The @code{read line} Command
@findex read line
@cindex @code{read line} command
@cindex lines in data files, parsing
@cindex parsing headers in data files
@cindex variables, reading
@cindex synonyms, reading
@cindex reading variables
@cindex reading synonyms
@example
`read line \synonym
@end example
@noindent
Store the next line of datafile into the named synonym.


@c HTML <!-- newfile Regress.html "Gri: `regress' command" "Gri Commands" -->

@node   Regress, Reorder, Read Line, Commands
@comment  node-name,  next,  previous,  up
@section The @code{regress} Command
@cindex statistics, performing regression
@cindex linear regression
@cindex regression, linear
@findex regress
@cindex @code{regress} command
@example
`regress @{y vs x [linear]@}|@{x vs y [linear]@}'
@end example     
@noindent
Perform linear regression of @code{y} as a function of @code{x} or @code{x} as
a function of @code{y}.

@itemize @bullet
@item @code{regress y vs x}
Linear regression of y vs x.  Several quantities are reported and also
saved into builtin variables.  The intercept is defined as
@code{..coeff0..}, it's 95 percent confidence limit is defined as
@code{..coeff0_sig..}.  Thus the confidence range is
@code{..coeff0..-..coeff0_sig..} to @code{..coeff0..+..coeff0_sig..}.
Similarly the slope and confidence limit are stored in @code{..coeff1..}
and @code{..coeff1_sig..}

The squared correlation coefficient is stored in @code{..R2..}.

@emph{Historical note} prior to version 2.1.15, a different meaning was
attached to @code{..coeff0_sig..} and @code{..coeff1_sig..}; they used
be defined as standard errors, without having been multiplied by the
appropriate student-t coefficient.
@item @code{regress x vs y}
Linear regression of x vs y; for notation see above.
@item @code{regress y vs x linear}
Linear regression of y vs x; for notation see above.
@item @code{regress x vs y linear}
Linear regression of x vs y; for notation see above.
@end itemize
@noindent

@c HTML <!-- newfile Reorder.html "Gri: `reorder' command" "Gri Commands" -->

@node   Reorder, Rescale, Regress, Commands
@comment  node-name,  next,  previous,  up
@section The @code{reorder} Command
@cindex columns, reordering
@cindex reordering Columns
@findex reorder
@cindex @code{reorder} command
@example
`reorder columns randomly \
  |@{ascending in x|y|z@} \
  |@{descending in x|y|z@}'
@end example
@noindent

Reorder the columns in various ways.  

In the @code{randomly} style, the column data are shuffled randomly by
index, retaining the correspondance between a given x and y.  This is
useful with @code{draw symbol} using colored dots -- it prevents the
overpainting of one dot on another from biasing the color field to
values that happened to occur near the end of the column data.  If you
prefer the overpainting to be done in random order, use this command to
reorder the columns randomly.  The random number is selected using the
system @code{rand} call, with the seed being provided by the PID
(process ID) of the job.

The @code{ascending} and @code{descending} styles do what you'd expect.



@c HTML <!-- newfile Rescale.html "Gri: `rescale' command" "Gri Commands" -->

@node   Rescale, Resize, Reorder, Commands
@comment  node-name,  next,  previous,  up
@section The @code{rescale} Command
@cindex axes, forcing rescaling
@cindex rescaling axes
@cindex math on columns, rescaling after
@findex rescale
@cindex @code{rescale} command
@example
`rescale'
@end example     
@noindent
Re-determine the scales for the x and y axes.  Typically used after a
column math operation, when you want the new data to be auto-scaled.
(Note: normally, if the axes have already been drawn, Gri won't rescale
automatically just because you modify the column data.  This is designed
so that you can add offsets to curves, etc, while staying in save axes.
But if the axes have not been drawn yet when you modify the column data,
then Gri will automatically rescale the axes it is planning to draw.)



@c HTML <!-- newfile Resize.html "Gri: `resize' command" "Gri Commands" -->

@node   Resize, Return, Rescale, Commands
@comment  node-name,  next,  previous,  up
@section The @code{resize} Command
@cindex maps, scales
@findex resize x
@cindex @code{resize x} command
@example
`resize @{x for maps@}|@{y for maps@}'
@end example
@noindent
Resize the axes frame region in such a way that geographical objects
appear in correct proportions.  This assumes that y is degrees latitude
and x is degrees latitude.

@itemize @bullet
@item @code{resize x for maps}
Resize the plot width for maps, assuming that x represents longitude and
y represents latitude.  Before using this, you must have defined scales
for both x and y, and a size for y (ie, you must have done 
@code{set x axis ...}, @code{set y axis ...} and @code{set y size});
this command 
sets the x size, thus eliminating @code{set x size.} The result is that,
at the central latitude (y), a centimetre on the page will correspond to
an equal distance on the earth, in both the north-south and east-west
directions.
@item @code{resize y for maps}
Resize the plot height for maps, assuming that x represents longitude
and y represents latitude.  Before using this, you must have defined
scales for both x and y, and a size for x (ie, you must have done
@code{set x axis ...}, @code{set y axis ...} and @code{set x size});
this command sets the y size, thus eliminating @code{set y size.} The
result is that, at the central latitude (y), a centimetre on the page
will correspond to an equal distance on the earth, in both the
north-south and east-west directions.  

@emph{See also} @code{resize x for maps}.
@end itemize


@c HTML <!-- newfile Return.html "Gri: `return' command" "Gri Commands" -->

@node   Return, Rewind, Resize, Commands
@comment  node-name,  next,  previous,  up
@section The @code{return} Command
@findex return
@cindex @code{return} command
@example
`return'
@end example
@noindent
Return early from a user-defined function or an @code{insert} file.  Or,
in the main gri program, do the same thing as @code{quit}.


@c HTML <!-- newfile Rewind.html "Gri: `rewind' command" "Gri Commands" -->

@node   Rewind, Rpnfunction, Return, Commands
@comment  node-name,  next,  previous,  up
@section The @code{rewind} Command
@findex rewind
@cindex @code{rewind} command
@example
`rewind'
@end example
@noindent
Rewind data-file to the beginning.



@c HTML <!-- newfile Rpnfunction.html "Gri: `rpnfunction' command" "Gri Commands" -->

@node  Rpnfunction, Set, Rewind, Commands
@comment  node-name,  next,  previous,  up
@section The @code{rpnfunction} Command
@cindex rpn functions
@cindex defining rpn functions
@cindex functions in rpn expressions
@findex rpnfunction
@cindex @code{rpnfunction} command
@example
`rpnfunction name replacement-words'
@end example
@noindent
Create a new keyword for use in rpn expressions.  Inside any RPN
expression which follows this line, the word @code{name} will be
substituted with the indicated replacement words.  

For example,
the following shows the definition and use of a function which computes
the sine of twice an angle, by multiplying whatever is on the stack by
@code{2}, and then taking the sine of the result.

@example
rpnfunction sin2 2 * sin
show "expect the number 1 to follow: " @{rpn 45 sin2@}
@end example

The replacement words will have any synonyms in them translated first,
unless they start with an underscore followed by a double backslash.
Similarly, variables are substituted unless they start with an
underscore.  These exceptions are to allow the use of the @code{defined}
operator; @xref{rpn Mathematics}.

Note: The mathematical constants @code{e} and @code{pi} are stored using
@code{rpnfunctions}.  Also, two @code{rpnfunctions} are provided for
finding the slope and intercept of a line joining two points, e.g.
@cindex linear interpolation
@cindex @code{linear_slope} rpn operator
@cindex @code{linear_intercept} rpn operator
@cindex rpn operator @code{linear_slope}
@cindex rpn operator @code{linear_intercept}
@example
# Expect answers 1 and 10 ...
show "slope=" @{rpn 0 1 1 11 linear_slope@}
show "inter=" @{rpn 0 1 1 11 linear_intercept@}
@end example
These are useful in @code{set grid missing above .intercept. .slope.}
and @code{set z missing above .intercept. .slope.}.


@c HTML <!-- newfile Set.html "Gri: Set commands" "Gri Commands" -->

@node   Set, Set Axes Style, Rpnfunction, Commands
@comment  node-name,  next,  previous,  up
@section The @code{set} Command
@findex set
@cindex @code{set} command
Set various flags and parameters which Gri will use in later commands.
@menu
* Set Axes Style::              Set type of axes
* Set Arrow Size::              Set size for arrow heads
* Set Arrow Type::              Set type of arrow heads
* Set Beep::                    Set error beeping on or off
* Set Bounding Box::            Set PostScript bounding box
* Set Clip::                    Set clipping region
* Set Color::                   Set color of pen
* Set Contour Format::          Set format for numbers on contours
* Set Contour Label For::       Set existence of contour labels
* Set Contour Label Position::  Set spacing of contour labels
* Set Contour Labels::          Control various things about contour lables
* Set Dash::                    Set style of dashed lines
* Set Environment::             (Developer cmd)
* Set Error Action::            Set error behavior
* Set Flag::                    Set flag to control Gri (developer cmd)
* Set Font Color::              Set color of pen used for text
* Set Font Encoding::           Set font encoding vector
* Set Font Size::               Set size of text
* Set Font To::                 Set font for text
* Set Graylevel::               Set graylevel of pen
* Set Grid Missing::            Set missing region of grid
* Set Ignore Initial Newline::  Set to ignore initial blank line
* Set Ignore Error Eof::        Set ability to tolerate EOF on files
* Set Image Colorscale::        Set colorscale mapping for image
* Set Image Grayscale::         Set grayscale mapping for image
* Set Image Missing Value Color::  Set missing value color in image
* Set Image Range::             Set range of data that image can hold
* Set Input Data Window::       Set data window for reading columns
* Set Input Data Separator::    Set separator between data items
* Set Line Cap::                Set line end (cap) type
* Set Line Join::               Set method for intersections of line segments
* Set Line Width::              Set width of lines
* Set Missing Value::           Set "missing" value
* Set Page::                    Set page style to portrait or landscape
* Set Panel::                   Establish geometry for a panel of multipanel plot
* Set Panels::                  Prepare for multipanel plot
* Set Postscript Filename::     Set name of PostScript file
* Set Symbol Size::             Set size of symbols
* Set Tic Size::                Set size of tics on axes
* Set Trace::                   Set printout of statements as executed
* Set U Scale::                 Set scale for u (i.e. x) component of arrows
* Set V Scale::                 Set scale for v (i.e. y) component of arrows
* Set X Axis::                  Set range of x axis
* Set X Format::                Set format for numbers on x axis
* Set X Grid::                  Set x mesh of contour grid
* Set X Margin::                Set margin to left of x axis
* Set X Name::                  Set name of x axis
* Set X Size::                  Set length of x axis
* Set X Type::                  Set type of x axis (log/linear)
* Set Y Axis::                  Set range of y axis
* Set Y Format::                Set format for numbers on y axis
* Set Y Grid::                  Set y mesh of contour grid
* Set Y Margin::                Set margin below y axis
* Set Y Name::                  Set name of y axis
* Set Y Size::                  Set length of y axis
* Set Y Type::                  Set type of y axis (log/linear)
* Set Z Missing::               Set missing region of z column
@end menu

@node   Set Axes Style, Set Arrow Size, Set, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set axes style} @dots{} Command
@findex set axes style
@cindex @code{set axes style} command
@example
set axes style .style.     \
  | @{offset [.dist_cm.]@} \
  | rectangular|polar|none|default
@end example
@noindent
Tell Gri how you want axes to look.

@itemize @bullet
@item @code{set axes style 0}
Set axes to be rectangular, with an x-y axes frame labelled at the left
and bottom.
@item @code{set axes style 1}
Set axes to be rectangular, with an x-y frame will be without tics at
the top right.
@item @code{set axes style 2}
Set axes to be rectangular, with an x-y frame without tics or numbers on
any side.
@item @code{set axes style offset [.dist_cm.]}
Set axes so that the actual x and y axes will be drawn with a space
separating them from the data area.  The space, if not set by the
@code{.distance_cm.} option, will be equal to the current tic size (see
@code{set tic size}).  This command can be used together with any other
@code{set axes style} command.  It applies to both the @code{draw axes}
command and with any @code{draw x|y axis} command in which the axis
location is not explicitly given.
@item @code{set axes style rectangular}
Set axes to be rectangular, with an x-y axes frame labelled at the left
and bottom.
@item @code{set axes style polar}
Set axes to be polar.  @emph{See also} @code{convert columns to polar}
and @code{read columns r theta} commands.
@item @code{set axes style none}
Tell gri not to bother drawing axes before drawing curves, etc.
@item @code{set axes style default}
Same as @code{set axes style 0}, and with @code{offset} turned off.
@end itemize

@node   Set Arrow Size, Set Arrow Type, Set Axes Style, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set arrow size} @dots{} Command
@findex set arrow size
@cindex @code{set arrow size} command
@cindex arrows, setting size of heads
@example
`set arrow size .size.           \
  | @{as .num. percent of length@} \
  | default'
@end example
@noindent
Set the arrowsize (which is stored in the builtin variable
@code{..arrowsize..}). 

@itemize @bullet
@item @code{set arrow size .size.}
Set the arrow size (ie, half-width of the arrowhead) to @code{.size.}
centimetres.
@item @code{set arrow size as .num. percent of length}
Set the arrow size to be the indicated percentage of arrow length, as in
"HWP" in the singles ads.  (As a flag to this, @code{..arrowsize..} is
set to the negative of the fractional size measured in percent.)
@item @code{set arrow size default}
Set the arrow size to the default of 0.2 cm.
@end itemize

@node   Set Arrow Type, Set Beep, Set Arrow Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set arrow type} @dots{} Command
@findex set arrow type
@cindex @code{set arrow type} command
@cindex arrows
@example
set arrow type .which.
@end example
Set type of arrow, according to the value of @code{.which.}, rounded to
the nearest integer.  A rounded @code{.which.} value of 0 yields the
default arrows, drawn with three line strokes.  Value 1 yields outlined
arrows, sometimes used on definition sketches.  Value 2 yields filled,
swept-back arrow heads.

This command uses the ``line join'' parameters that are presently active
@xref{Set Line Join}.  So, by default, the arrow ends are rounded
(because the default line-join parameter is 1).  To get pointy ends,
first set the line join parameter to 0.



@node   Set Beep, Set Bounding Box, Set Arrow Type, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set beep} @dots{} Command
@findex set beep
@cindex @code{set beep} command
@cindex errors, beeping
@cindex beeping on errors
@example
`set beep on|off'
@end example
@noindent
The command @code{set beep on} makes gri beep on errors and
@code{query}.  @code{set beep off} turns this beeping off.


@node   Set Bounding Box, Set Clip, Set Beep, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set bounding box} @dots{} Command
@findex set bounding box
@cindex @code{set bounding box} command
@cindex bounding box, setting
@example
`set bounding box .ll_x. .ll_y. .ur_x. .ur_y. [pt|cm]'
@end example
@noindent

Set the PostScript bounding box for graph to indicated value.  The
bounding box is used by some programs to determine the region of the
page on which marks have been made.  For example, La@TeX{} uses the
bounding box to decide how to position figures in documents.

Normally, the bounding box is computed automatically unless the
@code{-no_bounding_box} commandline option has been specified;
@xref{Options On Command Line}.  But if @code{set bounding box} is
done, the automatically computed value is ignored and the given box is
used instead.  Use this if Gri makes mistakes in its automatic selection
of bounding box.

The coordinates of the bounding box may be specified in (1) user
coordinates, as defined @emph{at the moment} the command is executed, or
(2) in points on the page, measured from an origin at the lower-left
(72 point per inch), or (3) in centimeters on the page.  Which coordinate
system is used depends on the last keyword -- use @code{pt} for points,
@code{cm} for centimeters, and nothing at all for user-units.

The most common use is in points, since that is how many other
application packages, e.g. La@TeX{} and dvips, specify the bounding box.

If the box is specified in the user units, the user units in effect
@emph{at the moment} of executing the @code{set bounding box} command
are used.  This must be born in mind if the coordinate system is
changing during the execution of the program, e.g.  if margins are
changing or the x and y axes are changing.  For this reason it often
makes sense to put this command at the end of the commandfile.


@node   Set Clip, Set Color, Set Bounding Box, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set clip} @dots{} Command
@findex set clip
@cindex @code{set clip} command
@example
`set clip [postscript] \
  @{on [.xleft. .xright. .ybottom. .ytop.]@} \
  | off'
@end example
@noindent
Control clipping of following drawing commands.
@itemize @bullet
@item @code{set clip on}
Don't plot data outside axes.
@item @code{set clip on .xleft. .xright. .ybottom. .ytop.}
Don't plot data outside indicated box.
@item @code{set clip off}
Plot all data, whether in axes or not.
@item @code{set clip postscript on .xleft. .xright. .ybottom. .ytop.}
Turn PostScript clipping on.  This will prevent @emph{any} drawing
outside the named box.  Note that it will also prevent axis drawing, so
the recommended procedure is something like
@example
draw axes
set postscript clip on 10 20 0 1
draw curve
set postscript clip off
@end example
@item @code{set clip postscript off}
Turn PostScript clipping off.
@emph{See also} @code{set input data window}.
@cindex data, clipping using @code{set input clip}
@cindex clipping data using @code{set input clip}
@cindex color
@end itemize


@node   Set Color, Set Contour Format, Set Clip, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set color} @dots{} Command
@findex set color
@findex set colour
@cindex @code{set color} command
@cindex @code{set colour} command
@example
`set color \name               | \
    @{rgb .red. .green. .blue.@} | \
@{hsb .hue. .saturation. .brightness.@}'
@end example
@noindent
Set the color of the ``pen'' used for drawing lines and text.  Normally
lines and text are drawn in the same color, but the text color can be
specified independently if desired @xref{Set Font Color}.  This might be
useful to get contour lines of one color and labels of another.

In the @code{set colour \name} style, set the drawing color to the
indicated name, either from the builtin list (@code{white},
@code{LightGray}, @code{darkslategray}, @code{black}, @code{red},
@code{brown}, @code{tan}, @code{orange}, @code{yellow}, @code{green},
@code{ForestGreen}, @code{cyan}, @code{blue}, @code{skyblue},
@code{magenta}), or from a list created by @code{read colornames}.  In
the latter case, if the colorname has more than one word in it, use
quotes, e.g. @code{set color "ghost white"}.
     
In the @code{set colour rgb ...} style, set the individual color
components as indicated.  The numbers @code{.red.}, @code{.green.} and
@code{.blue.} range from 0 (for no contribution of that color component
to the final color) to 1 (for maximal contribution).  Values less than 0
are clipped to 0; values greater than 1 are clipped to 1.  EXAMPLES:
@example
set color rgb 0   0   0 # black
set color rgb 1   1   1 # white
set color rgb 1   0   0 # bright red
set color rgb 0.5 0   0 # dark red (only 50 percent)
set color rgb 0   1   0 # pure green
set color rgb 1   1   0 # yellow: red + green
@end example

In the @code{set colour hsb ...} style, set the individual color
components as indicated.  The numbers @code{.hue.}, @code{.saturation.}
and @code{.brightness.} range from 0 to 1.  The color, represented by
.hue., ranges from 0 for pure red, through 1/3 for pure green, and 2/3
for pure blue, and back to 1 again for pure red. The purity of the
color, represented by .saturation., ranges from 0 (none of the hue is
visible) to 1 (the maximal amount is present).  The brightness of the
color, represented by @code{.brightness.}, ranges from 0 (black) to 1
(maximal brigntness).  Values less than 0 are clipped to 0; values
greater than 1 are clipped to 1.  EXAMPLES:
@example
set color hsb 0    1   1 # pure, bright red
set color hsb 0    1 0.5 # half black, half red
set color hsb .333 1   1 # pure, bright green
@end example




@node   Set Contour Format, Set Contour Label For, Set Color, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set contour format} @dots{} Command
@findex set contour format
@cindex @code{set contour format} command
@example
`set contour format \style|default'
@end example
@noindent
Normally, Gri draws the numeric labels of contour using a format code
called @code{%g} in the "C" language.  You may specify any other "long"
format using this command.  For example, @code{set contour format %.1f}
tells Gri to use one decimal place in the numbers, and also to prefer
the "float" notation to the exponential notation.  @code{set contour
format default} resets to the default @code{%f} format.  You may use
quotes around the format if you need to, to make the item be a single
word (e.g. @code{set contour format "%.1f m/s"}).



@node Set Contour Label For, Set Contour Label Position, Set Contour Format, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set contour label for} @dots{} Command
@findex set contour label for
@cindex @code{set contour label for} command
@example
`set contour label for lines exceeding .x. cm'
@end example
@noindent
Make it so contour lines shorter than @code{.x.} centimeters will not be
labelled. 



@node   Set Contour Label Position, Set Contour Labels, Set Contour Label For, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set contour label position} @dots{} Command
@findex set contour label position
@cindex @code{set contour label position} command
@cindex contours, spacing of labels on
@cindex labels, on contours
@example
`set contour label position \
  @{.start_cm. .between_cm.@} \
  | centered \
  | default'
@end example
@noindent
By default, contour labels are drawn at the location 1 cm into the
contour curve, measured from the startpoint of the contour (e.g., for
contours crossing the axes frames, the label will be 1 cm from the
frame), and then at a uniform distance along the contour.  By default,
this uniform distance is the average dimension of the plotting area
inside the axes.  If @code{.start_cm.} and @code{.between_cm.} are
specified, the first label is drawn at a distance @code{.start_cm.} from
the start of the contour, and thereafter at a separation of
@code{.between_cm.}.

If the @code{centered} option is used, then the contour labels are
centered along the length of the line.



@node   Set Contour Labels, Set Dash, Set Contour Label Position, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set contour labels rotated|horizontal|whiteunder|nowhiteunder} Command
@findex set contour labels
@cindex @code{set contour labels} command
@cindex contours, orientation of labels
@cindex contours, whiting/nowhiting under the labels
@cindex labels on contour lines, controlling orientation and white-under
@example
set contour labels rotated \
  | horizontal \
  | whiteunder \
  | nowhiteunder
@end example
@noindent
The first two options control whether contour labels are rotated to line
up with the contour lines, or whether they are horizontal (the default).

The second two options control whether the region under contour labels
is whited out before drawing the label.  The default is
@code{whiteunder}, which has the visual effect of the label having been
drawn on a piece of paper and then pasted on.  This can look jarring
when the material under the contour is an image.  When
@code{nowhiteunder} is specified, the contour line is broken to make
space for the text, but no whiting out is done.

@node   Set Dash, Set Environment, Set Contour Labels, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set dash} @dots{} Command
@findex set dash
@cindex @code{set dash} command
@cindex dashed lines
@cindex lines, dashed
@vindex @code{..length_dash..}, length/cm of dashes
@vindex @code{..length_blank..}, length/cm of blanks
@example
`set dash [.n.|@{.dash_cm. .blank_cm. ...@}|off]'
@end example
@noindent
Control dash-style for following @code{draw curve} and @code{draw line}
commands. 

@itemize @bullet
@item @code{set dash}
Set to dashed line (0.4cm dashes, 0.1cm blanks).
@item @code{set dash .n.}
Set to indicated pre-defined dashed line, according to table:
@example
.n. dash/cm blank/cm
 0        -        -   ... (Solid line)
 1      0.2      0.1
 2      0.4      0.1
 3      0.6      0.1
 4      0.8      0.1
 5      1.0      0.1
10      w        w
11      w        2w
12      w        3w
13      w        4w
14      w        5w
15      w        6w
@end example
@noindent
Where @code{w} is written, it indicates the current linewidth.  Thus,
types 10 through 15 give square-dotted lines.
     
@item @code{set dash .dash_cm. .blank_cm. .dash_cm. .blank_cm. ...}
Set to indicated dashed line.  The series of lengths @code{.dash_cm.}
and @code{.blank_cm.} give the lengths of dash and blank portions
(measured in centimeters).  Any number of dash/blank lengths may be
given.  For example, @code{set dash 0.5 0.1 0.1 0.1} looks good.
     
@item @code{set dash off}
Turn dashing off, setting to a solid line.
@end itemize

@node   Set Environment, Set Error Action, Set Dash, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set environment} Command
@findex set environment
@cindex @code{set environment} command
@cindex developer command @code{set environment}
@example
`set environment'
@end example
@noindent
Set environment (graylevel, axis length, etc) so that following plotting
commands will make use of anything set by either a @code{set} command or
by direct manipulation of builtin variables like @code{..xsize..}, etc.
NOTE: this should @emph{only} be done by developers.


@node   Set Error Action, Set Flag, Set Environment, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set error} Command
@findex set error
@cindex @code{set error} command
@cindex Handling errors with @code{set error} command
@example
`set error action to core dump'
@end example
@noindent
Make Gri dump core when any error is found, to facilitate debugging.

@node   Set Flag, Set Font Color, Set Error Action, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set flag} Command
@findex set flag
@cindex @code{set flag} command
@cindex developer command @code{set flag}
@example
`set flag \name [off]'
@end example
@noindent
Set the indicated flag to YES.  The name of the flag is contained in a
single word, e.g. @code{set flag dan_28sep_test}.  The action of the
flags may change with time and is undocumented.  This command is
provided to enable selected users (e.g., the developer himself) to use
test features of Gri before they are frozen into a fixed syntax and
action.  The keyword @code{off} turns the indicated flag off.  NOTE:
this should @emph{only} be done by developers.

@example
FLAG         DATE     ACTION

jinyu1       29sep94  'convert columns to grid'
                       outputs (x,y,z,z_predicted)

emulate_gre   9jun97  'E' format on axes yields
                      scientific notation

kelley1      17jun97  for kelley only - quit contour
                      trace if hit nonlegit

kelley2      17jun97  for kelley only: print
                      info while contour tracing
@end example


@node   Set Font Color, Set Font Encoding, Set Flag, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set font color} @dots{} Command
@findex set font color
@findex set font colour
@cindex font, setting color of
@cindex text, color used for
@cindex color, for text
@cindex @code{set font color} command
@cindex @code{set font colour} command
@example
set font color \name           | \
    @{rgb .red. .green. .blue.@} | \
@{hsb .hue. .saturation. .brightness.@}
@end example
@noindent
The syntax is the same as @code{set color}, except that this applies to
text only.  By default, text is drawn in the same color as lines, so
text color is changed as line color is changed (e.g. by using the
@code{set color} or @code{set graylevel} commands)).  However, once
@code{set font color} is used in a Gri program, the font thereafter
maintains a separate color from the lines.


@node   Set Font Encoding, Set Font Size, Set Font Color, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set font encoding} @dots{} Command
@findex set font encoding
@cindex font, setting encoding vector of
@cindex text, encoding vector of
@cindex font encoding
@cindex @code{set font encoding} command
@cindex Postscript-standard font encoding
@cindex ISO latin 1 font encoding

@example
set font encoding PostscriptStandard | isolatin1
@end example
@noindent
Permits one to control the so-called ``font encoding'' used in text.
The default encoding, @code{isolatin1}, for the ISO-Latin-1 encoding, is
preferred for almost all applications.  It permits Gri to handle both
English text and various European-based languages which use accents.

The default font encoding is ISO-Latin-1.  This is ideal for English and
other European languages.  To learn how to enter accents in a text
editor, and for a very brief overview of font encodings,
@xref{Non-English Text}.

If the so-called ``standard'' font encoding is required, this command
permits changing the encoding.

Note: very few users will ever need this command.  If you don't even
know what ``font encoding'' is about, ignore this command!



@node   Set Font Size, Set Font To, Set Font Encoding, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set font size} @dots{} Command
@findex set font size
@cindex @code{set font size} command
@cindex font size
@example
`set font size @{.size. [cm]@}|default'
@end example
@noindent
Set the size of the font for drawing of text.

@itemize @bullet
@item @code{set font size .size.}
Set font size to @code{.size.} points.  (A point is 1/72 of an inch,
or 1/28 of a centimetre.)
@item @code{set font size .size. cm}
Set font size to @code{.size.} centimetres.
@item @code{set font size default}
Set font size to default = 12 pts.
@end itemize

@cindex American Geophysical Union, recommended font size

If your figure is to be reproduced by a journal, you should check with
them about the range of font size they need.  This will, of course,
depend on whether your figure is reduced or enlarged during
reproduction.  For example, American Geophysical Union (publishers of
J. Geophysical Res.) recommends that one use fonts no smaller than 8
points.  They also recommend that the range in fontsize in a given
figure not exceed 2.



@node   Set Font To, Set Graylevel, Set Font Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set font to} @dots{} Command
@findex set font to
@cindex @code{set font to} command
@example
`set font to \fontname'
@end example
@noindent
Set font to named style.  Note that the backslash is @emph{not} to be
written, but here merely means that this word has several alternatives.
For example, one might say @code{set font to Courier}.  The allowed
fontnames are: 
@code{Courier}, a typewriter font (and the only monospaced font in Gri);
@code{Helvetica} (the default), a sans-serif font commonly used in drafting scientific graphs;
@code{HelveticaBold}, a bold version of Helvetica;
@code{Times} (also called @code{TimesRoman}), a font used in most newspapers;
@code{TimesBold}, a bold version of Times;
@code{Palatino} (also called @code{PalatinoRoman}), similar to Times;
@code{Symbol}, included for completeness, is a
mathematical font in which "a" becomes $\alpha$ of the math mode, etc.
For reference on these fonts see any book on PostScript.  The default
font is @code{Helvetica}.


@node   Set Graylevel, Set Grid Missing, Set Font To, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set graylevel} @dots{} Command
@findex set graylevel
@findex set greylevel
@cindex @code{set graylevel} command
@cindex @code{set greylevel} command
@cindex graylevel, command
@cindex lines, gray, command
@example
`set graylevel .brightness.|white|black'
@end example
@noindent
Set graylevel for lines to indicated numerical value between 0=black and
1=white, or to the named color.

@cindex American Geophysical Union, recommended gray levels

Note: if your diagram is to be reproduced by a journal, it is unlikely
that the reproduction will be able to distinguish between any two
graylevels which differ by less than 0.2.  Also, graylevels less than
0.2 may appear as pure black, while those of 0.8 or more may appear as
pure white.  These guidelines are as specified by American Geophysical
Union (publishers of J. Geophysical Res.), as of 1998.



@node   Set Grid Missing, Set Ignore Initial Newline, Set Graylevel, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set grid missing} @dots{} Command
@findex set grid missing
@cindex @code{set grid missing} command
@cindex grid, missing values
@cindex contouring, clipping out invalid areas

General format is
@example
`set grid missing \
  @{above|below .intercept. .slope@} \
  | @{inside curve@}'
@end example
The style
@example
`set grid missing above|below .intercept. .slope'
@end example
@noindent
sets grid to missing value for all points above/below the line defined
by
@tex
$y = {\rm .intercept.} + {\rm .slope.} x$
@end tex
@ifinfo
y = .intercept. + .slope. * x
@end ifinfo

The style
@example
`set grid missing inside curve'
@end example
@noindent
sets the grid to the missing value throughout an area described
by the curve last read in with @code{read columns}.  This is
useful for e.g. excluding land areas while contouring ocean
properties.  The curve may contain several "islands," each
tracing (clockwise) a region inside of which the grid is to
considered missing.  If the first point in an island doesn't
match the last, then an imaginary line is assumed which connects
them.  Multiple islands may be separated by missing-value codes.

@emph{See also} @code{Set Z Missing}.

@node   Set Ignore Initial Newline, Set Ignore Error Eof, Set Grid Missing, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set ignore initial newline} @dots{} Command
@findex set ignore initial newline
@cindex @code{set ignore initial newline} command
@example
`set ignore initial newline [off]'
@end example
@noindent
Make Gri ignore a newline if it occurs as the first character of the
next data file.  This is used for files made by FORTRAN programs on
VAX/VMS computers.


@node   Set Ignore Error Eof, Set Image Colorscale, Set Ignore Initial Newline, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set ignore error eof} Command
@findex set ignore error eof
@cindex @code{set ignore error eof} command
@cindex files, testing for eof
@cindex eof on files
@cindex testing for end of file
@cindex testing for file eof
@example
`set ignore error eof'
@end example
@noindent
Stop Gri from considering that to encounter an end of file in future
@code{read} commands consitutes an error; Gri will simply warn about
future EOFs.




@node   Set Image Colorscale, Set Image Grayscale, Set Ignore Error Eof, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set image colorscale} @dots{} Command
@findex set image colorscale
@findex set image colourscale
@cindex @code{set image colorscale} command
@cindex @code{set image colourscale} command
@cindex colorscale, setting for images
@cindex image plots, setting colorscale
@example
set image colorscale hsb .h. .s. .b. .im_value. \
    hsb .h. .s. .b. .im_value. [increment .im_value.]
set image colorscale rgb .r. .g. .b. .im_value. \
    rgb .r. .g. .b. .im_value. [increment .im_value.]
set image colorscale \
  \name .im_value. \
  \name .im_value. \
  [increment .im_value.]
@end example
@noindent
Set colorscale mapping for image, using HSB (hue, saturation,
brightness) specification, RGB (red, green, blue) color specification,
or named colors.  The image range must have previously have been set by
@code{set image range}, so that the @code{.im_value.} values will have
meaning.  Two pairs of (color, image-value) are given, and possibly an
increment.  Normally the colors are smoothly blended between the
endpoints, but if an increment is supplied, the colors are quantized.
The HSB method allows creation of spectral palettes, while the other two
methods create simple blending between the two endpoints.

EG: To get a spectrum ranging between pure red (H=0) for image value of
-10.0, and pure blue (H=2/3) for image value of 10.0, do this:
@example
set image colorscale hsb 0 1 1 -10 hsb .666 1 1 10
@end example

EG: To get a scale running from pure red (at image-value 10.0) into pure
blue (at image-value 25.1), but with the colors blending intuitively in
between (i.e., blending as paint might), use @code{rgb} color
specification, as follows:
@example
set image colorscale rgb 1 0 0 10 rgb  0 0 1 25.1
@end example

EG: To get a quantized blend between the X11 colors @code{skyblue} at
image value of 0 and @code{tan} at image value of 20, and with steps at
image values incrementing by 5, do this:
@example
set image colorscale skyblue 0 tan 20 increment 5
@end example
@noindent
Note that the traversal is through RGB space, so it is
intuitive, not spectral.  See @code{set color} for a list of X11 colors
known to Gri.

See also @code{read image colorscale} @xref{Read Image Colorscale}.

@node   Set Image Grayscale, Set Image Missing Value Color, Set Image Colorscale, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set image grayscale} @dots{} Command
@findex set image grayscale
@findex set image greyscale
@findex set image grayscale using histogram
@findex set image greyscale using histogram
@cindex @code{set image grayscale} command
@cindex @code{set image greyscale} command
@cindex @code{set image grayscale using histogram} command
@cindex @code{set image greyscale using histogram} command
@cindex grayscale, setting for images
@cindex image plots, setting grayscale
@example
`set image grayscale using histogram \
  [black .bl. white .wh.]'

`set image grayscale \
  [black .bl. white .wh. [increment .inc.]]'
@end example
@noindent
Set up a grayscale mapping for images.  The image range must have
previously have been set by @code{set image range}.

@example
`set image grayscale using histogram [black .bl. white .wh.]'
@end example
@noindent
Create a grayscale mapping using linearized cumulative histogram
enhancement.  The image range must have previously have been set by
@code{set image range}.

This creates maximal contrast in each range of graylevels,
and is useful for tracing subtle features between different images (for
example, it makes it easier to trace fronts between successive satellite
images).  The entire histogram is expanded, from the smallest value in
the image to the largest.

With no options specified, the histogram is done from 0 in the image to
255 in the image.  If the black/white options are specified, the
histogram is done between these values.

@example
`set image grayscale \
  [black .bl. white .wh. [increment .inc.]]'
@end example
@noindent
With no optional parameters, create a grayscale mapping for the current
image, scaling it from black for the mininum value in the image to white
for the maximum value.  The image range must have previously have been
set by @code{set image range}.

The optional parameters @code{.wh.} and @code{.bl.} specify the values
to be drawn in white and black in the image, with smooth linear blending
in between.

Normally the blending from white to black is smooth (linear), but if the
additional optional parameter @code{.inc.} is specified, the blending is
quantized, jumping to darker values at (@code{.wh.} + @code{.inc.}),
(@code{.wh.} + 2* @code{.inc.}), etc.  (The sign of @code{.inc.} will be
altered, if necessary, to ensure that (@code{.wh.} + @code{.inc.}) is
between @code{.wh.} and @code{.inc.}.)  The colour switches to pure
white at the value @code{.wh.}, and remains pure white everywhere on the
"white" side of this value.  Similarly, the transition to pure black
occurs at the value @code{.bl.}.  In other words, neither pure white nor
pure black is present inside the interval from @code{.wh.} to
@code{.bl.}.  Therefore, when using the @code{draw image palette}
command, you might want to extend the range by one increment so as to
get an example of both pure white and pure black.
@example
.w. = 0
.b. = 1
.i. = 0.2
set image grayscale white .w. black .b. increment .i.
draw image palette left \
  @{rpn .w. .i. -@} \
  right @{rpn .b. .i. +@} \
  increment .i.
@end example


@node   Set Image Missing Value Color, Set Image Range, Set Image Grayscale, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set image missing value color} @dots{} Command
@findex set image missing value color
@findex set image missing value colour
@cindex @code{set image missing value color} command
@cindex @code{set image missing value colour} command
@example
set image missing value color to white|black|\
    @{graylevel .brightness.@}|@{rgb .r. .g. .b.@}
@end example
@noindent
Set the color of ``missing'' pixels (white by default).  The image range
must have previously have been set by @code{set image range}.  Pixels
with missing values can result from creating images from grids which
have missing values; see the @code{convert grid to image} command.  The
@code{.brightness.} parameter in the @code{graylevel} style ranges from
0 for black to 1 for white.  The @code{rgb} parameters allow setting to
full color.


@node   Set Image Range, Set Input Data Window, Set Image Missing Value Color, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set image range} Command
@findex set image range
@cindex @code{set image range} command
@example
set image range .0value. .255value.
@end example
Specify maximum possible range of values that images can hold, in user
units.  Gri needs to know this because it stores images in a limited
format capable of holding only 256 distinct values.  Unlike some other
programs, Gri encourages (forces) the user to specify things in terms of
user-units, not image-units.  This has the advantage of working
regardless of the number of bits per pixel.  Thus, for example,
@code{set image grayscale}, @code{set image colorscale}, 
@code{draw image grayscale}, etc, all use @emph{user} units.

When an image is created by @code{convert grid to image}, values outside
the range spanned by @code{.0value.} and @code{.255value.} are clipped.
(There is no need, however, for @code{.0value.} to be less than
@code{.255value.}.)  This clipping discards information, so make sure
the range you give is larger than the range of data in the grid.

EXAMPLE: consider a satellite image in which an internal value of 0 is
meant to correspond to 0 degrees Celsius, and an internal value of 255
corresponds to 25.5 degrees.  (This is a common scale.)  Then Gri
command @code{set image range 0 25.5} would establish the required
range.  If this range were combined with a linear grayscale mapping (see
@code{set image grayscale}), the resultant granularity in the internal
representation of the user values would be (25.5-0)/255 or 0.1 degrees
Celsius; temperature variations from pixel to pixel which were less than
0.1 degrees would be lost.

All other image commands @emph{require} that the range has been set.
Thus, all these commands fail unless @code{set image range} has been
done: @code{draw image}, @code{draw image palette}, @code{read image},
@code{convert grid to image}, @code{set image grayscale}, and 
@code{set image colorscale}.

NOTE: If a range already exists when @code{set image range} is used,
then the settings are altered.  Thoughtless usage can therefore lead to
confusing results.  (The situation is like setting an axis scale,
plotting a curve with no axes, then altering the scale and plotting the
new axes.  It's legal but not necessarily smart.)




@node   Set Input Data Window, Set Input Data Separator, Set Image Range, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set input data window} Command
@findex set input data window
@cindex @code{set input data window} command
@example
`set input data window x|y @{.min. .max.@}|off'
@end example
@noindent
Create a data window for following @code{read} statements.

@itemize @bullet
@item @code{set input data window x .min. .max.}
For future reading commands, ignore all data with x less than
@code{.min.} or x greater than @code{.max.} The data not in the interval
will not be read in at all.  This will hold until 
@code{set data window x off} is done, in which case all data will be read in.
@item @code{set input data window x off}
Return to normal conditions, in which all data are read in.
@item @code{set input data window y .min. .max.}
Analgous to command for x.
@item @code{set input data window y off}
Analagous to command for x.
@end itemize

EXAMPLE: To set the input data window as the current x axis plus a
border of 5 centimetres to left and right, do the following:
@example
set input data window x \
  @{rpn ..xleft..  xusertocm 5 - xcmtouser@} \
  @{rpn ..xright.. xusertocm 5 + xcmtouser@}
@end example

@emph{See also} @code{set clip}
@cindex input data window
@cindex data, clipping using @code{set input data window}
@cindex clipping data using @code{set input data window}



@node   Set Input Data Separator, Set Line Cap, Set Input Data Window, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set input data separator} Command
@findex set input data window
@cindex @code{set input data separator} command
@example
`set input data separator TAB|default'
@end example
@noindent
Set the separator between data items.  The @code{default} method is to
assume that data items are separated by one or more spaces or tabs, and
also to ignore any spaces or tabs at the start of a data line.

In the @code{TAB} method the data are assumed to be separated by a
SINGLE tab character.  (Multiple tabs will result in null values being
assigned to items -- almost certainly not what you want!)  Also, initial
spaces and tabs on lines are NOT skipped.

Use the @code{TAB} method only after thinking carefully about the above,
since the assignment of null values is problematic.



@node   Set Line Cap, Set Line Join, Set Input Data Separator, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set line cap} @dots{} Command
@findex set line cap
@cindex @code{set line cap} command
@cindex setting line cap type
@cindex line cap
@example
`set line cap .type.'
@end example
@noindent
Set the type of ends (caps) of lines.  Use @code{.type.} of value 0 for
square ends, cut off precisely at the end of line, or 1 for round ends
which overhang half the line width, or 2 for square ends which overhang
half the line width.  The selected style is used for the ends of line
segments, as well as at corners.  In PostScript parlance, therefore,
this command sets both the linecap and the linejoin parameters.

This command only applies to lines drawn with @code{draw curve},
@code{draw line} and @code{draw polygon}.  Axes are always drawn with a
line cap of 0.



@node   Set Line Join, Set Line Width, Set Line Cap, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set line join} @dots{} Command
@findex set line join
@cindex @code{set line join} command
@cindex setting line join type
@cindex line join
@example
`set line join .type.'
@end example
@noindent

Set the type of intersection of lines.  Use @code{.type.} of value 0 for
mitered joins (pointy ends that may extend beyond the data points), a
value of 1 for rounded ends (the default), or a value of 2 for bevelled
(squared-off) ends.  See the @code{setlinejoin} command in any text on
the PostScript language for more information.

This command only applies to lines drawn with @code{draw curve},
@code{draw line} and @code{draw polygon}.  Axes are always drawn with a
line join of 0.



@node   Set Line Width, Set Missing Value, Set Line Join, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set line width} @dots{} Command
@findex set line width
@cindex @code{set line width} command
@cindex setting line width
@cindex line width
@example
`set line width \
  [axis|symbol|all] \
  .width_pt. \
  | @{rapidograph \name@} \
  | default'
@end example
@noindent
Set the width of lines used to draw curves (default), axes, symbols, or
all of the above.  The width may be set to a value specified in points
(conversion: 72 pt = 1 inch), to a named rapidograph width, or to the
default value.  The initial default values are: 0.709pt (or rapidograph
3x0) for curves; 0.369pt (or rapidograph 6x0) for axes; 0.369pt (or
rapidograph 6x0) for symbols.

@cindex American Geophysical Union, recommended line thickness

If your figure is to be reproduced by a journal, you should check with
them about the range of line thicknesses they recommend.  This will, of
course, depend on whether your figure is reduced or enlarged during
reproduction.  For example, American Geophysical Union (publishers of
J. Geophysical Res.) recommends that one use line thicknesses no less
than 0.5 points and no more than 4 points.



@cindex rapidograph scaling for line width
@cindex slides, suggested line widths
@cindex overhead projection images, suggested line widths
@cindex projected images, suggested line widths

The rapidograph settings match the standard set of widths used in
technical fountain pens.  The table below gives width names along with
the width in points and centimetres, as given in the specifications
supplied with Rapidograph technical fountain pens.  Names marked by the
symbol @code{*} are in sequence increasing by the factor root(2).  Texts
on technical drawing often suggest using linewidths in the ratio of 2 or
root(2).  On many printers, the variation in width from root(2) increase
is too subtle to see, so the factor-of-2 rule may be preferable.  To get
sizes in a sequence doubling in width, pick from the list (@code{6x0},
@code{3x0}, @code{1}, @code{3.5} @code{7}).  To get a sequence
increasing in width by root(2), pick from the list (@code{6x0},
@code{4x0}, @code{3x0}, @code{0}, @code{1}, @code{2.5}, @code{3.5},
@code{6}, @code{7}).  The eye can distinguish curves with linewidths
differing by a factor of root(2) if the image is of high quality, but a
factor of 2 is usually better.  Similarly, for overhead projections and
projected slides, one would do well to use linewidths differing by a
factor of 4.


This is the list of @code{rapidograph} linewidths:
@example
  Name      pt    cm
  ====    =====  =====
*  6x0    0.369  0.013
*  4x0    0.510  0.018
*  3x0    0.709  0.025
    00    0.850  0.03
*    0    0.992  0.035
*    1    1.417  0.05
     2    1.701  0.06
*    2.5  1.984  0.07
     3    2.268  0.08
*    3.5  2.835  0.1
     4    3.402  0.12
*    6    3.969  0.14
*    7    5.669  0.2
@end example




@node   Set Missing Value, Set Page, Set Line Width, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set missing value} @dots{} Command
@findex set missing value
@cindex @code{set missing value} command
@cindex missing values
@example
`set missing value .value.'
@end example
@noindent
Set missing-value code (stored in the builtin variable
@code{..missingvalue..} and builtin synonym @code{\.missingvalue..}) to
@code{.value.}, which mean that data within 0.1 percent of this value are
ignored.  The initial default is 1.0e22.



@node   Set Page, Set Panel, Set Missing Value, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set page} @dots{} Command
@findex set page
@cindex @code{set page} command
@example
`set page portrait \
  | landscape \
  | @{factor .mag.@} \
  | @{translate .xcm. .ycm.@}'
@end example
@noindent
Control orientation or scaling of what is drawn on the paper.

@cindex portrait orientation of page
@cindex orientation of page, portrait
@cindex page orientation, portrait
@itemize @bullet
@item @code{set page portrait}
Print graph normally (default).

@cindex landscape orientation of page
@cindex orientation of page, landscape
@cindex page orientation, landscape
@item @code{set page landscape}
Print graph sideways.
@item @code{set page factor .mag.}
Scale everything to be drawn on the paper by the indicated magnification
factor.  This @emph{must} be called before any drawing commands.
@item @code{set page translate .xcm. .ycm.}
Translate everything to be drawn on the paper by the indicated x/y
distances.  This @emph{must} be called before any drawing commands.
@end itemize     

@emph{Note}: The order of the factor/translate commands matters, so you
may need to experiment.  For example,
@example
set page translate 2 1
set page factor 0.5
@end example
@noindent
moves anything that would have been drawn at the lower-left corner of
the paper onto the point 2cm from the left side and 1cm from the bottom
side of the paper, and then applies the multiplication factor.
Reversing the order gives quite different results.  PostScript gurus
should note that the following two commands are inserted into the
PostScript file:
@example
56.900000 28.450000 translate
0.500000 0.500000 scale
@end example


@node   Set Panel, Set Panels, Set Page, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set panel} Command
@findex set panel
@cindex @code{set panel} command
@cindex Multi-panel plots
@cindex Window-pane plots
@example
set panel .row. .col.
@end example
Establish geometry for the panel in the indicated row and column.  The
bottom row has @code{.row.} = 1, and the leftmost column has
@code{.col.} = 1.  This must be used only after using 
@code{Panels .row. .col. .dx_cm. .dy_cm.}.


@node   Set Panels, Set Postscript Filename, Set Panel, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set panels} Command
@findex set panels
@cindex @code{set panels} command
@cindex Multi-panel plots
@cindex Window-pane plots
@example
set panels .rows. .cols. [.dx_cm. .dy_cm.]
@end example
Set up for multipanel plots, with spacing @code{.dx_cm.} between the
columns and @code{.dy_cm.} between the rows.  If the spacings are not
supplied, 2cm is used.  The panels fill the rectangle which would
otherwise contain the single axis frame, as set by @code{set x size} and
@code{set x margin}, etc.

The global variables @code{.panel_dx.}, @code{.panel_dy.},
@code{.panel_xmargin.}, @code{.panel_ymargin.}, @code{.panel_xsize.},
and @code{.panel_ysize} are created, to be used by later calls to
@code{set panel}.

EXAMPLE 
@example
  # Draw 2 panels across, 3 up the page.

  # The Panel interiors will be in region cornered
  # by (2,2), (12,22) cm
  set x margin 2
  set y margin 2
  set x size 10
  set y size 20
  set panels 2 3

  # Create dummy scale
  set x axis 0 1
  set y axis 0 1

  # Draw blank axes
  set panel 1 1
  draw axes
  set panel 1 2
  draw axes
  set panel 1 3
  draw axes
  set panel 2 1
  draw axes
  set panel 2 2
  draw axes
  set panel 2 3
  draw axes
@end example

@emph{See also} @code{set panel .row. .col.}



@node   Set Postscript Filename, Set Symbol Size, Set Panels, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set postscript filename} Command
@findex set postscript filename
@cindex @code{set postscript filename} command
@cindex name, of PostScript file
@cindex postScript filename
@example
`set postscript filename "\name"'
@end example
Set name of PostScript file, over-riding the present name.


@node   Set Symbol Size, Set Tic Size, Set Postscript Filename, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set symbol size} @dots{} Command
@findex set symbol size
@cindex @code{set symbol size} command
@cindex setting symbol size
@cindex symbols, setting size
@example
`set symbol size .diameter_cm.|default'
@end example
@noindent
Control the diameter of symbols drawn by @code{draw symbol} command.

@itemize @bullet
@item @code{set symbol size .diameter_cm.}
Make symbol size be @code{.diameter_cm.} centimeters in diameter.
@item @code{set symbol size default}
Set to default diameter of 0.1 cm.
@end itemize


@node   Set Tic Size, Set Trace, Set Symbol Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set tic size} @dots{} Command
@cindex axes, setting tic size
@cindex tic size, setting
@findex set tic size
@cindex @code{set tic size} command
@example
`set tic size .size.|default'
@end example
@noindent
Control size of tics on axes.
@itemize @bullet
@item @code{set tic size .size.}
Set tic size to @code{.size.} centimetres.
@item @code{set tic size default}
Set tic size to default of 0.2 cm.
@item @code{set tics in|out}
Make axis tics point inward or outward.  The default is outward.
@end itemize


@node   Set Trace, Set U Scale, Set Tic Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set trace} @dots{} Command
@findex set trace
@cindex @code{set trace} command
@example
`set trace [on|off]'
@end example
@noindent
Control printing of command lines as they are processed.

@itemize @bullet
@item @code{set trace}
Make Gri print command lines as they are processed.
@item @code{set trace on}
Same as @code{set trace}.
@item @code{set trace off}
Prevent printing command lines (default).
@end itemize


@node   Set U Scale, Set V Scale, Set Trace, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set u scale} @dots{} Command
@findex set u scale
@cindex @code{set u scale} command
@example
`set u scale .cm_per_unit.|@{as x@}'
@end example
@noindent
Set scale for x-component of arrows.

@itemize @bullet
@item @code{set u scale .cm_per_unit.}
Set scale for @code{u} component of arrows.  
@item @code{set u scale as x}
Set scale for u component of arrows to be the same as the x-scale.
Equivalent to 
@code{set u scale as @{rpn ..xsize.. ..xright.. ..xleft.. - /@}}.
@end itemize

NOTE: this only works if the x-scale is LINEAR (see @code{set x type}).



@node   Set V Scale, Set X Axis, Set U Scale, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set v scale} @dots{} Command
@findex set v scale
@cindex @code{set v scale} command
@example
`set v scale .cm_per_unit.|@{as y@}'
@end example
@noindent
Set scale for y-component of arrows.

@itemize @bullet
@item @code{set v scale .cm_per_unit.}
Set scale for @code{v} component of arrows.
@item @code{set v scale as y}
Set scale for v component of arrows to be the same as the y-scale.
Equivalent to 
@code{set v scale as @{rpn ..ysize.. ..ytop.. ..ybottom.. - /@}}.
@end itemize

NOTE: this only works if the y-scale is LINEAR (see @code{set y type}).


@node   Set X Axis, Set X Format, Set V Scale, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x axis} @dots{} Command
@findex set x axis
@cindex @code{set x axis} command
@example
`set x axis top | \
    bottom      | \
    increasing  | \
    decreasing  | \
    unknown     | \
@{.left. .right. [.incBig. [.incSml.]]@}'
@end example
@noindent
Control various things about the x axis.

@itemize @bullet
@item @code{set x axis top}
Make next x-axis to be drawn have labels above the axis.
@item @code{set x axis bottom}
Make next x-axis to be drawn have labels below the axis.
@item @code{set x axis increasing}
Make next x-axis to be drawn have numeric labels increasing to the
right.  This applies only if autoscaling is done; otherwise, the
supplied values (@code{.left. .right. [.incBig.  [.incSml.]]}) are used.
@item @code{set x axis decreasing}
Make next x-axis to be drawn have numeric labels decreasing to the
right.  This applies only if autoscaling is done; otherwise, the
supplied values (@code{.left. .right. [.incBig.  [.incSml.]]}) are used.
@item @code{set x axis unknown}
Make Gri forget any existing scale for the x axis, whether set by
another @code{set x axis} command or automatically, during reading of
data.  This is essentially a synonym for @code{delete x scale}.
@item @code{set x axis .left. .right.}
Make x-axis range from @code{.left.} to @code{.right.}
@item @code{set x axis .left. .right. .incBig.}
Make x-axis range from @code{.left.} to @code{.right.}, with labelled
increments at @code{.incBig.} Note: In the case of log axes, and
provided that @code{set x type log} has been called previously, the
@code{.incBig.} parameter has a different meaning: it is the interval,
in decades, between numbered labels; the default is 1.
@item @code{set x axis .left .right. .incBig. .incSml.}
Make x-axis range from @code{.left.} to @code{.right.}, with labelled
increments at @code{.incBig.}, and small tics at @code{.incSml.}  NOTE:
if the axis is logarithmic, the value of @code{.incSml.} takes on a
special meaning: if it is positive then small tics are put at values 2,
3, 4, etc. between the decades, but if @code{.incSml.} is negative then
no such small tics are used.
@end itemize


@node   Set X Format, Set X Grid, Set X Axis, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x format} Command
@findex set x format
@cindex @code{set x format} command
@example
`set x format \format|off
@end example
@noindent
Set format for numbers on x axis.  The format is specified in the manner
of the "C" programming language.  The C formats (i.e., @code{%f},
@code{%e} and @code{%g}) are permitted.  
For example, @code{set x format %.1f} tells Gri to use 1 decimal place,
and to prefer the "float" notation to the exponential notation.  The
form @code{set x format off} tells Gri not to write numbers on the axis.
To get spaces in your format, enclose the format string in
double-quotes, e.g., you might use @code{set x format "%.0f$\circ$ W"}
for a map, or @code{set x format "%f "} to make the numbers appear to
the left of their normal location. 


@node   Set X Grid, Set X Margin, Set X Format, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x grid} @dots{} Command
@findex set x grid
@cindex @code{set x grid} command
@example
`set x grid .left. .right. .inc.|@{/.cols.@}'
@end example
@noindent
Create x-grid for contour or image.  If a grid already exists, an error
will be declared; the way to interpolate from an existing grid to a new
one is with the @code{interpolate x grid} command.

@itemize @bullet
@item @code{set x grid .left. .right. .inc.}
Create x-grid ranging from the value @code{.left.} at the left to
@code{.right.} at the right, stepping by an increment of @code{.inc.}. 
@item @code{set x grid .left. .right. /.cols.}
Create x-grid with @code{.cols.} points, ranging from the value
@code{.left.} at the left to @code{.right.} at the right.
@end itemize


@node   Set X Margin, Set X Name, Set X Grid, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x margin} @dots{} Command
@findex set x margin
@cindex @code{set x margin} command
@example
`set x margin @{[bigger|smaller] .size.@}|default'
@end example
@noindent
Control x margin, that is, the space between the left-hand side of the
page and the left-hand side of the plotting area.  (Note that axis
labels are drawn inside the margin; the margin extends to the axis line,
not to the labels.)

@itemize @bullet
@item @code{set x margin .size.}
Set left margin to @code{.size.} cm.  It is permissible to have negative
margins, with the expected effect.
@item @code{set x margin bigger .size.}
Increases left margin by @code{.size.} cm.
@item @code{set x margin smaller .size.}
Decreases left margin by @code{.size.} cm.
@item @code{set x margin default}
Set left margin to default = 6 cm.
@end itemize



@node   Set X Name, Set X Size, Set X Margin, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x name} @dots{} Command
@findex set x name
@cindex @code{set x name} command
@example
set x name "\string"
@end example
@noindent
Set name of x-axis to indicated string.  The empty string 
(@code{set x name ""}) can be used to make the x axis be unlabelled.



@node   Set X Size, Set X Type, Set X Name, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x size} @dots{} Command
@findex set x size
@cindex @code{set x size} command
@example
`set x size .width_cm.|default'
@end example
@noindent
Set the width of the plotting area.  This does not include axis labels,
only the interior part of the plot.


@itemize @bullet
@item @code{set x size .width_cm.}
Set width of x-axis in centimeters.
@item @code{set x size default}
Set width of x-axis to default = 10 cm.
@end itemize


@node   Set X Type, Set Y Axis, Set X Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set x type} @dots{} Command
@findex set x type
@cindex @code{set x type} command
@example
set x type linear|log|@{map E|W|N|S@}
@end example
@noindent
Control transformation function mapping user units to centimetres on the
page.  


@itemize @bullet
@item @code{set x type linear}
Set to linear axis.
@item @code{set x type log}
Set to log axis.  To avoid clashes in the linear to log transform, this
command should precede the creation of an axis scale, either explicitly
through the @code{set x axis .left. .right. ...} command or implicitly
through the @code{read columns} command.
@item @code{set x type map E|W|N|S}
@cindex maps, format of x axis
Set to be a map.  This means that whole numbers on the axis will have a
degree sign written after them (and then the letter @code{E}, etc) and
that numbers which are multiples of 1/60 will be written in
degree-minute format, and that similarly numbers which are divisible by
1/3600 will be in degree-minute-second format.  If none of these things
apply, the axis labels will be written in decimal degrees.  Note that
this command overrides any format set by @code{set x format}.

BUG: this only has an effect if the axis is not already of type
@code{log}. 
@end itemize



@node   Set Y Axis, Set Y Format, Set X Type, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y axis} @dots{} Command
@findex set y axis
@cindex @code{set y axis} command
@example
`set y axis label horizontal|vertical'
`set y axis left | \
    right        | \
    increasing   | \
    decreasing   | \
    @{.bottom. .top. [.incBig. [.incSml.]]@}'
@end example
@noindent
Control various things about the y axis.

@itemize @bullet
@item @code{set y axis label horizontal}
Make y label be horizontal.
@item @code{set y axis label vertical}
Make y label be vertical (default).
@item @code{set y axis left}
Make next y-axis to be drawn have labels to the left of the axis.
@item @code{set y axis right}
Make next y-axis to be drawn have labels to the right of the axis.
@item @code{set y axis increasing}
Make next y-axis to be drawn have numeric labels increasing up the page.
This applies only if autoscaling is done; otherwise, the supplied values
(@code{.left. .right. [.incBig.  [.incSml.]]}) are used.
@item @code{set y axis decreasing}
Make next y-axis to be drawn have numeric labels decreasing up the page.
This applies only if autoscaling is done; otherwise, the supplied values
(@code{.left. .right. [.incBig.  [.incSml.]]}) are used.
@item @code{set y axis unknown}
Make Gri forget any existing scale for the y axis, whether set by
another @code{set y axis} command or automatically, during reading of
data.  This is essentially a synonym for @code{delete y scale}.
@item @code{set y axis .bottom. .top.}
Make y-axis range from @code{.bottom.} to @code{.top.}
@item @code{set y axis .bottom. .top. .incBig.}
Make y-axis range from @code{.bottom.} to @code{.top.}, with labelled
increments at @code{.incBig.}
@item @code{set y axis .bottom. .top. .incBig. .incSml.}
Make y-axis range from @code{.bottom.} to @code{.top.}, with labelled
increments at @code{.incBig.}, and small tics at @code{.incSml.}  NOTE:
if the axis is logarithmic, the value of @code{.incSml.} takes on a
special meaning: if it is positive then small tics are put at values 2,
3, 4, etc. between the decades, but if @code{.incSml.} is negative then
no such small tics are used.
@end itemize




@node   Set Y Format, Set Y Grid, Set Y Axis, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y format} Command
@findex set y format
@cindex @code{set y format} command
@example
`set y format \format|off'
@end example
@noindent
Set format for numbers on y axis.  The format is specified in the manner
of the "C" programming language.  The C formats (i.e., @code{%f},
@code{%e} and @code{%lg}) are permitted.  For example, 
@code{set y format %.1f} tells Gri to use 1 decimal place, and to prefer
the "float" notation to the exponential notation.  
The form @code{set y format off} 
tells Gri not to write numbers on the axis.  To get spaces in your
format, enclose the format string in double-quotes, e.g., you might use
@code{set y format "%.0f$\circ$ N"} for a map, or 
@code{set y format "%f"} to make the numbers appear to the right of
their normal location.


@node   Set Y Grid, Set Y Margin, Set Y Format, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y grid} @dots{} Command
@findex set y grid
@cindex @code{set y grid} command
@example
`set y grid .bottom. .top. .inc.|@{/.rows.@}'
@end example
@noindent
Create y-grid for contour or image.  If a grid already exists, an error
will be declared; the way to interpolate from an existing grid to a new
one is with the @code{interpolate x grid} command.

@itemize @bullet
@item @code{set y grid .bottom. .top. .inc.}
Create y-grid ranging from the value @code{.bottom.} at the bottom to
@code{.top.} at the top, stepping by an increment of @code{.inc.}.
@item @code{set y grid .bottom. .top. /.rows.}
Create y-grid with @code{.rows.} points, ranging from the value
@code{.bottom.} at the bottom to @code{.top.} at the top.
@end itemize



@node   Set Y Margin, Set Y Name, Set Y Grid, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y margin} @dots{} Command
@findex set y margin
@cindex @code{set y margin} command
@example
`set y margin @{[bigger|smaller] .size.@}|default'
@end example
@noindent
Control y margin, that is, the space between the bottom side of the page
and the bottom of the plotting area.  (Note that axis labels are drawn
inside the margin; the margin extends to the axis line, not to the
labels.)

@itemize @bullet
@item @code{set y margin .size.}
Set bottom margin to @code{.size.} centimeters.  It is permissible to
have negative margins, with the expected effect.
@item @code{set y margin bigger .size.}
Increases bottom margin by @code{.size.} centimeters.
@item @code{set y margin smaller .size.}
Decreases bottom margin by @code{.size.} centimeters.
@item @code{set y margin default}
Set bottom margin to default = 6 cm.
@end itemize



@node   Set Y Name, Set Y Size, Set Y Margin, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y name} @dots{} Command
@findex set y name
@cindex @code{set y name} command
@example
set y name "\string"
@end example
@noindent
Set name of y-axis to indicated string.  The empty string 
(@code{set y name ""}) can be used to make the y axis be unlabelled.



@node   Set Y Size, Set Y Type, Set Y Name, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y size} @dots{} Command
@findex set y size
@cindex @code{set y size} command
@example
`set y size .height_cm.|default'
@end example
@noindent
Set the width of the plotting area.  This does not include axis labels,
only the interior part of the plot.

@itemize @bullet
@item @code{set y size .height_cm.}
Set height of y-axis in centimeters.
@item @code{set y size default}
Set width of y-axis to default = 10 cm.
@end itemize



@node   Set Y Type,  Set Z Missing, Set Y Size, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set y type} @dots{} Command
@findex set y type
@cindex @code{set y type} command
@example
set y type linear|log|@{map N|S|E|W@}
@end example
@noindent
Control transformation function mapping user units to centimetres on the
page.  

@itemize @bullet
@item @code{set y type linear}
Set to linear axis.
@item @code{set y type log}
Set to log axis.  To avoid clashes in the linear to log transform, this
command should precede the creation of an axis scale, either explicitly
through the @code{set y axis .left. .right. ...} command or implicitly
through the @code{read columns} command.
@item @code{set y type map N|S|E|W}
@cindex maps, format of y axis
Set to be a map.  This means that whole numbers on the axis will have a
degree sign written after them (and then the letter @code{N}, etc), and
that numbers which are multiples of 1/60 will be written in
degree-minute format, and that similarly numbers which are divisible by
1/3600 will be in degree-minute-second format.  If none of these things
apply, the axis labels will be written in decimal degrees.  Note that
this command overrides any format set by @code{set y format}.

BUG: this only has an effect if the axis is not already of type
@code{log}. 
@end itemize

@node   Set Z Missing, Show, Set Y Type, Set
@comment  node-name,  next,  previous,  up
@subsection The @code{set z missing} @dots{} Command
@findex set z missing
@cindex @code{set z missing} command
@example
set z missing above|below .intercept. .slope.
@end example
@noindent
Set @code{z} column to be missing whenever the associated @code{y} and
@code{x} columns are above/below the line defined by
@tex
$y = {\rm .intercept.} + {\rm .slope.} x$
@end tex
@ifinfo
y = .intercept. + .slope. * x
@end ifinfo


@c HTML <!-- newfile Show.html "Gri: `show' command" "Gri Commands" -->

@node   Show, Skip, Set Z Missing, Commands
@comment  node-name,  next,  previous,  up
@section The @code{show} Command
@findex show
@cindex @code{show} command
@example
`show ...'
@end example
Show some information by printing it to standard output.

@itemize @bullet
@item @code{show all}
Show lots of information about plot.
@item @code{show axes}
@cindex axes, displaying information about
Show information about axes.
@item @code{show color}
Show the current pen color used for lines and text.  This is not to be
confused with image color, which is independent.
@item @code{show colornames}
@cindex RGB values of known colors
@cindex color, displaying names and RGB values of
Show all colors known by name, as defined by @code{read colornames}
command and also the builtin colors defined automatically
(e.g. @code{white}, @code{black}, @code{red}, etc),
@xref{Read Colornames}.
@item @code{show columns}
Show x, y, z, u, v column data.
@item @code{show columns statistics}
@cindex statistics of column data
@cindex column, displaying statistics of
Show means, std devs, etc for columns.
@item @code{show flags}
Show values of all flags. (Developers only.)
@item @code{show grid}
@cindex grid data, displaying
Show an indication of the grid data (used for contouring).
@item @code{show grid mask}
@cindex grid mask, displaying
Show 1 if grid data are valid or 0 if contours wil not extend into this
region.
@item @code{show hint of the day}
@cindex hint of the day, displaying
Show a Gri hint for today, picked at random from hints stored on the web
at 
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/HINTS.html">
@file{www.phys.ocean.dal.ca/~kelley/gri/HINTS.html}
@c HTML </A>
These will be downloaded at most once per day.  Since the download might
take a couple of seconds, the hint is only downloaded once per day,
being cached for later uses in the given day, in a user file called
@file{~/.gri-hint-cache}.  This command will 
produce warning if the system program @code{lynx} is not available for
downloading.
@item @code{show image}
@cindex image, displaying histogram of
Show information about image, such as a histogram of values, and, if the
image is small enough, the actual data.
@item @code{show license}
Show the license for Gri, which outlines how users are allowed to share
it freely.
@item @code{show misc}
Show miscellaneous information about the plot, the data, etc.
@item @code{show next line}
Show next line of data-file.
@item @code{show synonyms}
@cindex synonyms, displaying list of
Show values of all synonyms, whether built-in or user-defined.

@cindex timing things
@cindex stopwatch, for timing things
@cindex @code{show stopwatch} command
@item @code{show stopwatch}
Show elapsed time since first call to this command in the given Gri program.
@item @code{show time}
Show the current time.
@item @code{show traceback}
@cindex traceback
Show traceback (i.e., the tree of commands being done at this instant).
@item @code{show variables}
@cindex variables, displaying list of
Show values of all variables, whether built-in or user-defined.
@item @code{show .value.}
Show value of indicated variable.
@item @code{show @{rpn ...@}}
Show result of computing indicated expression.
@item @code{show "some text"}
Print the indicated string.  Certain control codes are allowed:
@code{\n} means newline; @code{\t} means tab.
@item @code{show "time=" .time. "; depth=" .depth.}
Print strings and values as indicated.  If the last item is ellipses
(three dots with no spaces between them), then no newline is printed;
this makes the next @code{show} statement print on the same line.
@end itemize


@c HTML <!-- newfile Skip.html "Gri: `skip' command" "Gri Commands" -->

@node   Skip, Smooth, Show, Commands
@comment  node-name,  next,  previous,  up
@section The @code{skip} Command
@findex skip
@cindex @code{skip} command
@cindex data files, positioning within
@cindex files, positioning within
@example
`skip [forward|backward] [.n.]'
@end example


@itemize @bullet
@item @code{skip}
For ascii files, skip forward 1 line in the data file.  For binary
files, skip forward 1 byte.
@item @code{skip backward}
For ascii files, skip backward 1 line in the data file.  For binary
files, skip backward 1 byte.
@item @code{skip .n.} or @code{forward .n.}
For ascii files, skip forward @code{.n.} lines in the data file.  For
binary files, skip forward @code{.n.} bytes.
@item @code{skip backward .n.}
For ascii files, skip backward @code{.n.} lines in the data file.  For
binary files, skip backward @code{.n.} bytes.
@end itemize


@c HTML <!-- newfile Smooth.html "Gri: `smooth' command" "Gri Commands" -->

@node   Smooth, Sprintf, Skip, Commands
@comment  node-name,  next,  previous,  up
@section The @code{smooth} Command
@cindex columns, filtering
@cindex smoothing column data
@findex smooth
@cindex @code{smooth} command
All these smoothing commands ignore the @emph{location} of the data.  For
equispaced data these algorithms have the standard interpretation in
terms of digital filters.  For non-equispaced data, the interpretation
is up to the user.

@example
`smooth @{x [.n.]@} \
  | @{y [.n.]@} \
  | @{grid data [.f.|@{along x|y@}]@}'
@end example

The @code{smooth x} command does smoothing by the following formula
@example
x[i-1]   x[i]   x[i+1]
------ + ---- + ------
  4       2       4
@end example

The @code{smooth x .n.} command does boxcar smoothing using centred
boxcars @code{.n.} points wide.
      
The @code{smooth y} command does the same as @code{smooth x}, but on the
@code{y} column.

@cindex grid data, smoothing
@cindex smoothing grid data
@cindex contours, smoothing grid data
@findex smooth grid data
@cindex @code{smooth grid data} command
There are several methods of smoothing grid data.  Note that isolated
missing values are filled in by each method.  (Let the author know if
you'd like that `feature' to be an option.)

The @code{smooth grid data} command smooths gridded data, by weighted
average in a plus-shaped window about each gridpoint.  The smoothing
algorithm replaces each interior gridpoint value @code{z[i][j]} by
@example
z[i][j]   z[i-1][j] + z[i+1][j] + z[i][j-1] + z[i][j+1]
------- + ---------------------------------------------
   2                          8
@end example     
@noindent
Points along the edges are smoothed by the same formula, after
inventing image points outside the domain by planar extrapolation.

The @code{smooth grid data .f.} command performs partial smoothing.  A
temporary fully-smoothed grid @code{zSMOOTH[i][h]} is constructed as
above, and a linear combination of this grid and the original grid is
used as the replacement grid:
@example
z[i][j] = (1-f) * z[i][j] + f * zSMOOTH[i][j]
@end example
@noindent
where @code{f} is the value indicated on the command line.  
Thus, @code{smooth grid data 0} performs no smoothing at all, while
@code{smooth grid data 1} is equivalent to @code{smooth grid data}.

The @code{smooth grid data along x} command smooths the grid data
across @code{x} (i.e., horizontally), by replacing each value
@code{z[i][j]} with the value
@example
z[i][j]   z[i-1][j] + z[i+1][j]
------- + ---------------------
   2                4
@end example
@noindent
Points along the edges are smoothed by the same formula, after
inventing image points outside the domain by linear extrapolation.

The @code{smooth grid data along y} command does the same thing as
@code{smooth grid data along x}, but the smoothing is along @code{y}.


@emph{See also} @xref{Filter}, a generalization of @code{smooth x|y}
which allows for more sophisticated filters.




@c HTML <!-- newfile Sprintf.html "Gri: `sprintf' command" "Gri Commands" -->

@node   Sprintf, State, Smooth, Commands
@comment  node-name,  next,  previous,  up
@section The @code{sprintf} Command
@findex sprintf
@cindex @code{sprintf} command
@cindex variables, storing values within synonyms (strings)
@cindex strings, storing variable values within
@cindex synonyms, storing variable values within
@example
`sprintf \synonym "format" .variable. [.variable. [...]]'
@end example
@noindent
Write numbers into a synonym (text string).  This is useful for
labelling plots.

@noindent
@code{sprintf \out "a = %lf b = %.2f" .a. .b.} - Create a synonym
called @code{\out}, and print the values of the variables @code{.a.} and
@code{.b.} into it.  If @code{.a.} = 1 and @code{.b.} = 0.112, then
@code{\out} will be @code{"a = 1 b = 0.11"}

Formatting codes are as in the C programming language, eg:
@example
%.2f  -- Use floating point with 2 decimal places.
%9.2f -- As above, but number takes 9 characters.
%e    -- Use exponential notation.
@end example
@noindent
@emph{CAUTION}: Variables are stored in the @emph{floating point} in
Gri, so you must use a format like @code{"%f"},
@emph{not} an integer code like @code{"%d"}.
@cindex format, for sprintf command


@c HTML <!-- newfile State.html "Gri: `state' command" "Gri Commands" -->

@node   State, Superuser, Sprintf, Commands
@comment  node-name,  next,  previous,  up
@section The @code{state} Command: saving/restoring Graphics state
@cindex saving graphics state
@cindex restoring graphics state
@cindex graphics state, saving and restoring
@findex @code{state} command
@example
`state save|restore|display'
@end example
@noindent
The @code{save} operation pushes a record of the graphics state (pen and
font characteristics, margins, axis lengths, min/max/inc values on axes,
etc) onto a stack.  The @code{restore} operation replaces the present
state with whatever is on top of the stack, and then pops the stack.
Use @code{display} to see some of the state properties.

The @code{state} command is useful for temporary changes of axis
properties, etc.

BUG: only line characteristics (width, color) and font characteristics
(font, size, color) are saved so far.  In fact, the full list of what
should be saved has not yet been finalized by the author.


@c HTML <!-- newfile Superuser.html "Gri: `superuser' command" "Gri Commands" -->

@node   Superuser, System, State, Commands
@comment  node-name,  next,  previous,  up
@section The @code{superuser} Command
@cindex debugging using superuser flags
@cindex superuser flags
@findex superuser
@cindex @code{superuser} command
@example
`superuser'
@end example
@noindent
Allow extra debugging information and commands.  Normally, this command
and the corresponding commandline flag -superuser are only used by
programmers altering the Gri source.

These are the flags and their meanings:
@itemize @bullet
@item @emph{1} Print cmdline before/after substituting synonyms
@item @emph{2} Print cmdline before/after substituting rpn expressions
@item @emph{4} Print all new commands as they are being defined
@item @emph{8} Print system commands and @code{open "...|"} commands
@item @emph{128} Changeable; as of Mar 1997, print before/after doing gri.cmd
@item @emph{256} Changeable; as of Mar 1997, no function
before they are passed to the system
@end itemize
Note that all flags are equal to 2 raised to an integer power.  Since
the flag values are detected by a bitwise OR, you can combine flags by
adding; thus specifying a flag of 5 yields flags 1 and 4 together;
specifying 15 yields flags 1, 2, 4 and 8.


@c HTML <!-- newfile System.html "Gri: `system' command" "Gri Commands" -->

@node   System, While, Superuser, Commands   
@comment  node-name,  next,  previous,  up
@section The @code{system} Command
@cindex gawk, sample of use
@cindex operating system commands, printing results of
@cindex system commands, printing results of
@cindex operating system commands, assigned to synonyms
@cindex system commands, assigned to synonyms
@findex system
@cindex @code{system} command
@example
`system \system-command'
@end example
@noindent
Tell the operating system to perform the indicated action.  Whatever
string follows the word @code{system} is passed directly to the
operating system, @emph{after} substitution of synonyms if any exist.

@cindex comments, and system commands
@cindex quoting in system commands
If your system command contains double-slashes, you must protect them
from Gri (which will interpret them as comments) by enclosing in
double-quotes, e.g. @code{system cat A | sed -e "s/foo#g" | cat > B}.
(In the particular case of the @code{sed} command you could also do
@code{system cat A | sed -e "s:foo::g" | cat > B}.

Note that @code{rpn} expressions are not evaluated, and variable values
are not substituted before passing the string to the operating system.
The exit status is stored in the builtin variable
@code{..exit_status..}. 

There are two ways to use the system:
@itemize @bullet
@item
@emph{Assign output to synonym}: The form @code{\synonym = system ...}
does the system command and then inserts the output from that command
into the indicated synonym.)
@item @emph{Just run a command}: The command @code{system ls} will list
the files in the current directory.
@end itemize

For long commands, there are two approaches, the second preferred:
@itemize @bullet
@item
@emph{Use continuation lines}: String a lot of information onto one
effective system line, using the @code{\} line-continuation character
at the ends of lines.  The problem is that it's very easy to lose one of
these backslashes.  The next method is better.
@item
@emph{Here-is syntax} The here-is syntax of many unix shells is also
provided.  If the system command contains the characters @code{<<}
followed by a word (with no space between!) then Gri will issue a system
command which includes not only this line but also all succeeding lines,
until a line is found which matches the indicated word precisely (with
no leading space allowed).  The @code{<< "WORD"} syntax is also
supported, meaning that the operating system is being told not to mess
with the dollar-signs -- needed in perl.

@emph{Note:} Be careful using this inside a new-command.  Gri
Recognizes the end of the body of a new-command by a line with @code{@}}
in the @emph{first column}, and no non-white characters thereafter.  
If you system command happens to use a line with a curly brace (as in a
loop in perl, for example), you must put whitespace before the brace.
This won't affect the system command, but it will let Gri correctly
realize that this is @emph{not} the end of the new-command.  For more
information on new-commands @xref{Parsing}.

@emph{Caution:} Before sending the string to the system, Gri first
translates any synonyms present.  Be careful with this, since system
commands calling awk, etc, very often use backslashes for the newline
character @code{\n} within strings.  If you have a synonym whose name
starts with @code{\n}, you can get a conflict.  For example, the awk
command @code{print "foo\nbar";} should print a line with @code{foo} on
it, followed by a line with @code{bar} on it, but it will instead print
a single line with @code{fooMISTAKE}, if you had previously defined a
synonym as @code{\nbar = "MISTAKE"}.  One way to avoid this mistake is
to make sure any @code{\n} characters appear at the end of strings, and
then simply avoid having a synonym named @code{\n}.

Here is a Perl example.
@example
\m = "Foo bar"
system perl <<"EOF"
$a = 100;
print "foo bar is \m, and a is $a\n";
print "BETTER: foo bar is \m, and a is $a\n";
print "Q: was a 100?\n";
EOF
@end example
@noindent
which, written more safely (partially avoiding the string @code{\n}), is
@example
\message = "Foo bar"
system perl <<"EOF"
$a = 100;
print "foo bar is \message, and a is $a\n";
print "Q: was a 100?\n";
EOF
@end example


Here is an Awk example.  Note that the commandline flags @code{-f -} are
required to force awk to take commands from standard input.  Note also
the absence of a final newline in the string; Awk does not require one,
while Perl does.  (Finally, as usual, note that the synonym
@code{\.awk.} is being used instead of @code{awk}, to ensure
portability.) 
@example
\m = "Foo bar"
system \.awk. -f - <<"EOF"
BEGIN@{
a = 100;
print "foobar is \m, and a=", a, "\n";
@}
EOF
@end example
@noindent
which, written more safely (avoiding the string @code{\n}), is
@example
\message = "Foo bar"
system \.awk. -f - <<"EOF"
BEGIN@{
a = 100;
print "foobar is \message, and a=", a;
@}
EOF
@end example

To get the awkscript to read it's input from a named file, do e.g.
@example
system \.awk. -f - tst.dat <<"EOF"
@{print $1;@}
EOF
@end example
@noindent
where the file @file{tst.dat} contains lines the first item of which
will be printed to the screen by this awkscript. 
@end itemize


@emph{Some more examples}:
@itemize @bullet
@item
To get the first 10 lines of a file called @file{foo.dat} inserted into
another file called @file{bar.dat}, you might do the following.  Only
the first method works; the second will fail because @code{.n.} will not
be translated before passing to the operating system.
@example
\num = "-10"
system head \num foo.dat > bar.dat
# Following fails since .num. 
# will not be translated
.num. = -10
system head .num. foo.dat > bar.dat
@end example
@item
Issue a unix command to get a listing of files in the current
working directory, and pipe them into the @code{more} system command.
@example
system ls -l *c | more
@end example
@item
Store the date and time into a synonym, and use it in a
title:
@example
\time = system date
...
draw title "Plotted at time \time"
@end example
@item
Use @code{awk} to prepare a two-column table of x, ranging
from 0 to 1 in steps of 0.1, and sin(x).  The table is stored in a file
whose suffix is the process ID of the Gri job.  This file is then
opened, and the data plotted.  Finally, a system command is issued to
remove the temporary file.
@example
system \.awk. 'BEGIN @{ \
    for (x=0; x<1; x+=0.1) @{ \
      printf("%f %f\n", x, sin(x)) \
    @} \
  @}'  > tmp.\.pid.
open tmp.\.pid.
read columns x y
close
system rm tmp.\.pid.
draw curve
quit
@end example
@noindent
(Note the use of @code{\.awk.}, a builtin synonym naming the awk program
on your system.)

NOTE Under unix, this command calls the Bourne shell, not the C-shell
that is often used interactively.  For many simple uses, the only
difference from normal interactive use will be that @code{~} is not
expanded to the home directory.  For example, you'd do
@example
system \.awk. -f $HOME/foo/bar/cmd.gawk
@end example
@noindent
instead of the
@example
system \.awk. -f ~/foo/bar/cmd.gawk
@end example
@noindent
that you might expect from interactive C-shell usage.  (Note the use of
@code{\.awk.}, a builtin synonym naming the awk program on your system.)

@noindent
RETURN VALUE:
@cindex @code{\.return_value.}, from @code{system ...}
Sets @code{\.return_value} to system status,
@code{N status}
@end itemize


@c HTML <!-- newfile While.html "Gri: `while' command" "Gri Commands" -->

@node   While, Write, System, Commands
@comment  node-name,  next,  previous,  up
@section The @code{while} Command
@cindex loops
@findex while
@cindex @code{while} command
@example
`while .test.|@{rpn ...@}'
@end example
@noindent
Perform statements in loop while the value of @code{.test.} or the RPN
expression is nonzero.  The end of the loop designated by a line
containing the words @code{end while}.  The value @code{.test.} may be
an rpn expression.  To leave the loop prematurely, use a @code{break}
statement.  Upon encountering a @code{break} statement, Gri jumps to the
line immediately following the loop.  If the @code{-chatty} option is
nonzero, a notification is printed every 1000 passes through the loop,
as a debugging measure to catch unintended infinite loops.

@noindent
@emph{Examples}:

@itemize @bullet
@item
Loop forever, printing a message over and over.
@example
while 1
  show "This loops forever. Need to 'break'"
end while
@end example
@item
Repeatedly read two numbers, and plot a bullet at the indicated
location.  If (or, hopefully, ``when'') the end of the file is
encountered, break out of the loop; otherwise continue plotting forever.
@example
while 1
  read .x. .y.
  if ..eof..
    break
  end if
  draw symbol bullet at .x. .y.
end while
@end example
@item
Loop 10 times, printing the values of @code{.i.} as they range 0, 1,
@dots{}, 9.  After exiting from the loop, @code{.i.} will equal 10.  Be
@emph{careful} to use the correct rpn greater-than test to avoid an
infinite loop.
@example
.i. = 0
while @{rpn .i. 10 >@}
  show .i.
  .i. += 1
end while
@end example
@end itemize



@c HTML <!-- newfile Write.html "Gri: Write commands" "Gri Commands" -->

@node   Write, Extras, While, Commands
@comment  node-name,  next,  previous,  up
@section The @code{write} Command
@findex write
@cindex @code{write} command
@cindex file, saving results into
@cindex save results in a file
@example
`write ... to \filename'
@end example
@noindent
Write some information to the indicate file, appending after any
existing contents of that file.  If the filename is @file{stdout}, the
information is written to the standard output device (ie, the screen);
if it is @file{stderr}, the information is written to the standard error
device (ie, the screen).


@itemize @bullet
@item @code{write columns to \filename}
@cindex column data, write to file

Append data columns to the end of the indicated file.
@item @code{write contour .value. to \filename}
@cindex contours, write to file

As corresponding @code{draw contour} command, but don't actually draw
the contours; instead, write to the indicated file, starting at the EOF
of the file if it is nonempty (thus, appending to the file).  The first
line of output is a header line, containing two numbers: the contour
value and the missing value.  Then the xy pairs are written a line at a
time, with missing values being used to indicate ends of segments.  A
blank line is written after the last data pair.  For example, if the
contour contained two closed regions, Gri would output a pair of missing
values as one of the xy pairs, to denote the separation of the two
curves.  You could read and plot the output as in this example
@example
write contour 10 to contour.out
write contour 20 to contour.out
open contour.out
read .contour_value. .missing.
set missing value .missing.
read columns x y
draw curve
@end example
@item @code{write grid to grid.dat [bycolumns]}
@cindex grid data, write to file
Append grid to the end of the named file.  Storage is in @code{%f}
format, and is in normal image order.  If the keyword @code{bycolumns}
is present, then the grid is transposed first, in such a way that
@code{read grid data bycolumns} performed on that file will read back
the original grid data.
@item @code{write image to image.dat}
@cindex image data, write to file
Append image to the end of the named file.  Storage is by unsigned-char,
and is in normal image order.  There is no header.
@item @code{write image rasterfile to image.dat}
Append image to the end of the named file, in Sun Rasterfile format.
@item @code{write image pgm to mask.dat}
Append image mask to the end of the named file, in PGM 'rawbits' format.
@item @code{write image mask to mask.dat}
@cindex image mask data, write to file
Append image mask to the end of the named file. Storage is by
unsigned-char, and is in normal image order.
@item @code{write image mask rasterfile to mask.dat}
Append image mask to the end of the named file, in Sun Rasterfile
format.
@item @code{write image mask pgm to mask.dat}
Append image mask to the end of the named file, in PGM 'rawbits' format.
@item @code{write image colorscale to colorscale.dat}
@cindex image palette data, write to file
Append image colorscale transform to the end of the named file.  Storage
is a series of 256 lines, each containing 3 numbers (for Red, Green and
Blue) in the range 0 to 1.  The file is suitable for reading with the
@code{read image colorscale} command.
@item @code{write image grayscale to grayscale.dat}
Append image grayscale transform to the end of the named file.  Storage
is a series of 256 lines, each containing a number in the range 0 to 1.
The file is suitable for reading with the @code{read image grayscale}
command.
@end itemize


@c HTML <!-- newfile Extras.html "Gri: extra programs that work with Gri" "Gri Extras" -->

@node   Extras, gri_indent, Write, Top
@comment  node-name,  next,  previous,  up
@chapter Extra things provided with Gri
@menu
* gri_indent::                  Indenting Gri code
* gri_merge::                   Merge files to one page
* gri_unpage::                  Separate multipage doc into separate files
* gri_curve::                   Extract data from Gri PostScript file
* Updating Program::            Converts old Gri code to new
* Emacs Editing Mode::          Editing Gri code inside Emacs
* Fig To Gri Translator::       Translate Fig output to Gri
* Extractor Of Images::         Program to extract image from PostScript
@end menu



@node   gri_indent, gri_merge, Extras, Extras
@comment  node-name,  next,  previous,  up
@section Indentation program
@cindex gri code, indenting
@cindex indenting Gri code

A Perl program called @code{grindent} is provided with Gri, installed in
the same directory as Gri.  

@cindex FTP site

@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">
@file{ftp://ftp.phys.ocean.dal.ca/users/kelley/gri}
@c HTML </A>
<P>

@itemize @bullet
@item
@code{Grindent} can work as a filter, transforming standard input into
standard output, as in @code{cat a.gri | grindent}.  On a Sun
openwindows system, you can therefore make the textedit tool do gri
indentation on the contents of the window by adding the following line
to your @file{~/.text_extras_menu} file:
@example
"Pretty-print Gri"	/local/bin/grindent
@end example
@item
@code{Grindent} can work on a specified Gri command file inplace, as in
@code{grindent cmd.gri}.  Before modifying the @file{cmd.gri} file, it
first makes a copy in @file{cmd.gri.BAK}.
@item
@code{Grindent} indents code within @code{if} blocks, @code{while}
blocks, and new commands.  The indentation level is 4 spaces by default.
The @code{-i} commandline option lets you change this, e.g.,
@code{grindent -i2 cmd.gri} specifies 2 spaces.
@item
@code{Grindent} tries to line up right-trailing inline comments and continuation
backslashes, to a default column of 32.  The commandline option
@code{-c} lets you change this column, e.g. @code{grindent -c40 cmd.gri}
specifies the 40th column.
@item
@code{Grindent} makes assignment statements have precisely 1 space before and after
the equal sign.
@item
@code{Grindent} transforms all TAB characters into single spaces.
@item
@code{Grindent} leaves the help for new commands unaltered.
@item
@code{Grindent} does some simple syntax checking, for things like unclosed @code{if}
statements within @code{while} loops or within the whole program.  When
Grindent gives a warning, you will know that either the line it quotes
is wrong or some line above it; use the indentation to track the error
down.
@end itemize


@node   gri_merge, gri_unpage, gri_indent, Extras
@comment  node-name,  next,  previous,  up
@section gri_merge, combine PostScript files into one page
@cindex gri_merge
Merge separate PostScript files, created by Gri, into one page.


@node   gri_unpage, gri_curve, gri_merge, Extras
@comment  node-name,  next,  previous,  up
@section gri_unpage, create multiple PostScript files for multipage input
@cindex gri_unpage
Given a multipage PostScript file, @code{gri_unpage} creates several new
PostScript files, one for each page.


@node   gri_curve, Updating Program, gri_unpage, Extras
@comment  node-name,  next,  previous,  up
@section gri_curve, extract data from Gri PostScript file
@cindex gri_curve

@code{gri_curve} is a Perl script that extract information from
PostScript files, in user units.  It is mostly used by the author; see
comments in the script.


@node   Updating Program, Emacs Editing Mode, gri_curve, Extras
@comment  node-name,  next,  previous,  up
@section Updating Program
@cindex updating Gri
A perlscript called @code{gri_update} is provided with Gri.  

This perlscript edits Gri command files, translating old syntax into new
syntax.  The editing is done in-place, after copying to a file with
suffix @file{.BAK}.  @code{gri_update} cannot handle all
incompatibilities but it will translate the things
illustrated in the following before/after comparison.


@itemize @bullet
@item
@code{@{rpn width("hello")@}} -> @code{@{rpn "hello" width@}}
@item
@code{@{rpn ascent("hello")@}} -> @code{@{rpn "hello" ascent@}}
@item
@code{@{rpn descent("hello")@}} -> @code{@{rpn "hello" descent@}}
@item
@code{convert columns to grid planar} 
-> @code{convert columns to grid boxcar}
@end itemize


@c HTML <!-- newfile Emacs.html "Gri: Emacs editing mode" "Gri Extras" -->

@node   Emacs Editing Mode,  Fig To Gri Translator, Updating Program, Extras
@comment  node-name,  next,  previous,  up
@section Editing Gri Files in GNU Emacs

@cindex gri code, editing
@cindex editing Gri code with Emacs
@cindex emacs, editing mode for Gri
@cindex gri-mode, editing in emacs

If you use the GNU Emacs text editor, writing Gri command files is made
easier by using the Gri editing mode.

The Emacs gri-mode was written by Peter S. Galbraith
@c HTML <A HREF="mailto:psg@debian.org">
(at email address @code{psg@@debian.org}.
@c HTML </A>

Here is an overview of the gri-mode features:
@itemize @bullet
@item
It @emph{indents} if statements, loops, and so on
(@code{gri-indent-line}, @key{TAB}).
@item
It can @emph{complete} partially typed commands (@code{gri-complete},
@key{M-TAB}) and help you edit the syntax that was thus inserted for you
(@code{gri-option-select}, @key{C-C C-o}).
@item
It can provide a short help synopsis (@code{gri-help-this-command},
@key{C-C C-h}), or load the info manual at the location where the command
is described (@code{gri-info-this-command}, @key{C-C C-i}), or help regarding
any command (@code{gri-help}, @key{C-C M-h}) and provide completion
of command name at the prompt (@key{TAB}), or help you
find an unknown command by listing all containing a given word
(@code{gri-help-apropos}, @key{C-C C-a}).
@item
It can let you run Gri and view its output without leaving the editor 
(@code{gri-run}, @key{C-C C-r}).  If an error is encountered, Emacs will 
rearrange the buffer so the cursor is on the bad line of the Gri command-file.
@item
If you've already run Gri, and therefore have a PostScript output file,
the mode will let you view that file (@code{gri-view}, @key{C-C C-v})
even if that file is compressed.
@end itemize

@noindent
Thus one never has to leave Emacs; type @key{C-C C-r} to run Gri, and if
there is no error, the graph comes up automatically.  If there was an error,
gri-mode will move editing point to the line with the error and display
the error message. Given that the mode can complete partially typed commands, 
this means a substantial saving in development time.

@cindex emacs-mode FTP site

@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">Click here
@c HTML to get to Gri FTP site, where the mode is stored as
@c HTML gri-mode.el</A> <P>  


To install gri-mode in your emacs, the only emacs variable you @emph{need}
to set in your .emacs file (and this only if your gri installation departs 
from default parameters) is @emph{gri*directory-tree} or @emph{gri*path}.  

@itemize @bullet
@item
If your @code{gri} and @file{gri.cmd} reside in the @emph{same}
directory (this is the standard Gri installation scheme before version
2.040), then you need to set the variable @code{gri*path} before you
load @code{gri-mode.el}.  For example, if both files are in
@file{/usr/local/bin}, you add the following to your @file{~/.emacs}
file:
@example
(setq gri*path "/usr/local/bin/")
@end example
@item
If you use a gri directory tree (as is the standard since Gri version
2.040), then do not set @code{gri*path}.  Instead, set
@code{gri*directory-tree} to the root of this tree.  For example, if
your gri files reside in directories like named
@file{/usr/bin/gri}
and 
@file{/usr/share/gri/gri.cmd},
then you'd use:
@example
(setq gri*directory-tree "/usr/share/gri")
@end example
@end itemize

To access the Gri editing mode, put the file @file{gri-mode.el} in the
appropriate place (e.g., @file{/usr/local/share/emacs/19.31/site-lisp}
or some other file named in your Emacs ``load-path''), and then put
lines like the following in your @file{~/.emacs} file:
@example
(setq gri*WWW-page "file:/usr/doc/gri-@value{GRI-VERSION}/html/index.html")
(setq gri*directory-tree "/usr/share/gri")
(autoload 'gri-mode "gri-mode" "Enter Gri-mode." t)
(setq auto-mode-alist 
   (cons '("\\.gri$" . gri-mode) auto-mode-alist))
@end example

If you have multiple versions of Gri on your system, the
directory-tree line will look more like the following

@example
 (setq gri*directory-tree '("/usr/lib/gri/" "/opt/gri/"))
@end example


The mode controls indentation in much the same way as other modes do.
Emacs will enter the Gri mode whenever you edit a file ending in the
characters @file{.gri}, or if you run the command @code{gri-mode}.

Inside Gri mode, type @kbd{C-h m} for help on the mode.


@c HTML <!-- newfile Fig2Gri.html "Gri: Fig To Gri Translator" "Gri Extras" -->

@node   Fig To Gri Translator, Extractor Of Images, Emacs Editing Mode, Extras
@comment  node-name,  next,  previous,  up
@section Fig to Gri Translator
@cindex fig translator
@cindex drawing programs
@cindex @code{fig2gri} translator
A translator called @code{fig2gri} converts output from the @code{xfig}
drawing program into Gri format.  @code{fig2gri} is under development
and presently does only text and polyline items.  I welcome additions to
@code{fig2gri}.


@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">Click here
@c HTML to get to Gri FTP site.</A>



@c HTML <!-- newfile ImageExt.html "Gri: Image Extractor" "Gri Extras" -->
@node   Extractor Of Images, Evolution, Fig To Gri Translator, Extras
@comment  node-name,  next,  previous,  up
@section Image extractor
@cindex images, extracting from PostScript
@cindex postscript file, images embedded within
@cindex PostScript file, images embedded within
When Gri draws an image with @code{draw image}, it embeds special
comments in the PostScript to allow removal of the data by an extractor
program; for details @xref{Image PostScript Output}.  The extractor
program is included along with the source distribution, in the C file
called @code{gri_extract_image.c}.  After compiling it manually (since
there is no Makefile for it), use it as a filter, e.g.
@example
gri_extract_image < file.ps > file.pgm
@end example
@noindent
The result is an image in the pgm format.  ("pgm" stands for portable
graymap; see unix manpage on @code{pgm}.)  Standard converters are
available to convert pgm into most other formats.  

Note that just the image is output, not the axes or any other part of
your drawing.  If you want to make your entire page into an image
(perhaps for incorporation into a web-page), try using the FSF @code{gs}
program.  For example, if the PostScript filename is @file{foo.ps}, do
this:
@example
$ gs foo.ps
GS> (pstoppm.ps)run
GS> (foo) ppm1run
GS> quit
@end example




@c HTML <!-- newfile Evolution.html "Gri: Evolution of Gri" "Evolution of Gri" -->

@node   Evolution, Distribution versions, Extractor Of Images, Top
@comment  node-name,  next,  previous,  up
@chapter Evolution of Gri

Gri, like other complex programs, sometimes changes in such a way as to
break old scripts.  This is less so of changes since about 1998 or so,
since the syntax became pretty firm about that time.  

Still, disk costs are so cheap that you would be well advised to keep a
backup version of Gri, whenever you update.  This is pretty simple.  You
need to copy the executable (normally called @file{/usr/bin/gri}) and
the startup file (normally called @file{/usr/share/gri/gri.cmd}) to some
location.  Let's say, for convenience, that this location is the
directory @file{/usr/OLD_GRI/@value{GRI-VERSION}}.  Then, just
create a shellscript named @code{/usr/bin/gri-@value{GRI-VERSION}} that
reads
@example
/usr/OLD_GRI/@value{GRI-VERSION}/gri -directory /usr/OLD_GRI/@value{GRI-VERSION}
@end example

The next sections outline the changes made in Gri.

@menu
* Distribution versions::          The stable, distribution stream
* Plans::                          Plans, and the development version
@end menu

@node   Distribution versions, Version 2.4, Evolution, Evolution
@comment  node-name,  next,  previous,  up
@section Distribution versions
@menu
* Version 2.4::
* Version 2.2::
@end menu

@node   Version 2.4, Version 2.2, Distribution versions, Distribution versions
@comment  node-name,  next,  previous,  up
@subsection Version 2.4
@table @emph
@item 2.4.4 [2000-May-07]
Change so that only a warning is printed if mathematical operations are
requested on empty arrays (e.g. @code{y += 10}).  Previously, an error
was reported and Gri exited with an error condition, which is bothersome
in scripts that rely on successful completion of the Gri job.

Port to the BeOS operating system.

@item 2.4.3 [2000-Apr-01]
Change location of all files, to be consistent with Redhat convention.
Previously, things were in @code{/opt/gri}; now they are in more
standard locations.
@item 2.4.2 [2000-Mar-25]
Remove bug in which @code{convert grid to image} produced incorrect
images, visible as a patchy appearance with coarse grids.
@item 2.4.1 [2000-Jan-31]
Remove bug in which @code{convert image to grid} failed to take note of
the gri minimum and maximum, so that contouring of the grid was not
possible for grids created from images.
@item 2.4.0 [2000-Jan-05]
Add @code{set input data separator}.  Make @code{read columns} work with
various input separators. Make @code{read .x.}, etc, work with various
input separators.
@end table


@node   Version 2.2, Plans, Version 2.4, Distribution versions
@comment  node-name,  next,  previous,  up
@subsection Version 2.2
@table @emph
@item 2.2.6 [1999 Nov 25]
Make web-based manual easier to read by putting a light-grey background
under sample code.
@item 2.2.5 [1999 Nov 10]
Fix bug in RPN calculations that prevented using a negative exponent.
@item 2.2.4 [1999 Nov 7]
Add @code{set font encoding}, and also change the encoding to
ISO-Latin-1.  (This doesn't hurt old code since Gri didn't make any
claims to handle characters outside the normal printing-set before
anyway.)

Fix bug in which there were 4 dead links in the HTML version of manual.

Clean up some problems with Debian distribution (thanks, Peter Galbraith!).
@item 2.2.3 [1999 Jun 30]
Fix bug in which word-of-synonym (e.g. @code{\[0]mysyn}) was not
detected correctly (thanks to bug report from Kazuhiko Nakayama in
Japan) @ref{Accessing Individual Words Within Synonyms}.
@item 2.2.2 [-]
Clean a few spelling and cross-reference errors in documentation.
@item 2.2.1 [1999 Mar 31]
For debian, properly locate the @code{netcdf} library, if it is
installed. 

Remove remnants of old commands for polar axes.

Correct error in which the right-most and upper-most pixel of images
created by @code{convert grid to image} may be blank (or not, depending
on roundoff error) under certain conditions of exact matchup between
grid spacing and image spacing.

Don't create PostScript file if the commandfile is non-existent, or if
there were errors on the commandline.
@item 2.2.0 [1999 Mar 25]
First debian release.  Versions exist for intel, alpha, 68K and powerpc.
@end table

@node   Plans, Accessing, Version 2.2, Evolution
@comment  node-name,  next,  previous,  up
@section Development versions
@c FOR NEXT RELEASE:
@c 1) Fix bug in @code{read colorname} that caused it to try to
@c    interpret comments in the X11 color-name file as though
@c    they were actual colors.
@c
@c 2) Fix bug in y-axis where it disobeyed the 'set y format'
@c    if the number was very near zero.  (This was to get 
@c    past some rounding problems ... may have to revisit this.)
@c
@c 3) Improve writing in the @code{read image} section of this manual.
@c
@c 4) Fix bugs in the HTML version of the manual, as reported
@c    by the 'tidy' checking programme.
@c *  add to gri.sourceforge.net



@table @emph
@item 2.5.2 [2000-May-18]
Add new features to @code{gri-mode.el}, bringing it up to version 2.25:
@end table

@enumerate
@item Add a menubar pull-down menu listing all Gri commands,
      allowing the user to get @code{Help} or @code{Info} on any command or
      @code{Insert} it in the current Gri file.
@item Gri info file can have @emph{.info} extension now.
@item Made @code{gri-apropos} an alias for @code{gri-help-apropos}.
@item gri-mode now uses the customize interface (See
      @code{gri-customize}).
@item The @code{~/.gri-syntax} file has changed format.  As a
      side-effect, spaces are used instead of hyphens to display Gri commands,
      and one can now select a command with the mouse in the
      @emph{Completions} buffer.
@end enumerate

@table @emph
@item 2.5.1 [2000-May-10]
Add two new RPN operators, @code{file_exists} and
@code{directory_exists} @xref{Unary Operators}.
@end table

@cindex plans for future versions
@cindex command-line interface
@cindex image formats, other than 8-bit

Some @emph{plans} for future versions are given below.  The list below
is in no particular order.  Please contact me at
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
@value{AUTHOR-EMAIL}
@c HTML </A>
if you particularly need one of these things, or
if you need something else that I've not listed.
@enumerate
@item Rewrite section 15.2.1 (Unix installation) to reflect current usage.
@item Porting to more machines.   (Most Unix platforms are supported, but 
Gri doesn't work at all on Apple platforms, and the Windows support is definitely
not up to scratch.
@item Better command-line interface, with history and editing as in Bash, Emacs, etc.  
(This may be built on the GNU Readline library.)
@item Support for image types other than 8-bit. 
(This may be build upon the PNG library.)
@item Rewrite manual section on the versions, breaking it up into "stable" 
and "unstable" releases instead of "compatible" and "incompatible" changes.
@end enumerate



@c HTML <!-- newfile Access.html "Gri: accessing/installing Gri" "Installing Gri" -->

@node   Accessing, Unix-install, Plans, Top
@comment  node-name,  next,  previous,  up
@chapter Accessing and Installing Gri

@section Accessing
@cindex accessing gri

No special setup is required, except for optionally creating a resource
file @xref{Resource File}, or defining the @code{GRIINPUTS} environment
variable @xref{Options On Command Line}.


@section Installation
@cindex installing Gri
Most users get Gri from the anonymous ftp site
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">
@code{ftp.phys.ocean.dal.ca/pub/users/kelley/gri}
@c HTML </A>
<P>


@menu
* Unix-install::                
* Msdos-install::               
* OS2-install::
* Mac-install::               
@end menu

@node   Unix-install, Precompiled Unix, Accessing, Accessing
@comment  node-name,  next,  previous,  up
@subsection Unix Installation
@cindex directory structure of Gri installation
The directory structure for Gri is as follows, where in this example the
most up-to-date version is @value{GRI-VERSION}, and @code{OLD} is meant
to represent an older numbered version.

@example
                          /opt/gri/
                             |
                             |
                             |
src/   lib/   bin/         @value{GRI-VERSION}/              OLD/
 |      |      |             |                   |
 |      |      |             |                   |
 |      |      |             |                   |
...  gri.cmd  gri    src/   lib/  bin/     src/  lib/  bin/
                      |      |     |        |     |     |
                      |      |     |        |     |     |
                      |      |     |        |     |     |
                     ...  gri.cmd gri      ... gri.cmd gri
@end example

On some systems, the base directory is @file{/usr/local/lib/} or
something similar, instead of @file{/opt/gri/}; this can be set during
the compilation of Gri; @xref{Uncompiled Unix}.

The subdirectory with the highest number holds the current version of
Gri.  During installation, this is linked in two stages, all the way
back to a file installed in the PATH of all users.

First, the relevant @emph{numbered} executable and library files are
linked back to @emph{unnumbered} directories.  For example,
@file{/opt/gri/@value{GRI-VERSION}/bin/gri} is linked to
@file{/opt/gri/bin/gri} and @file{gri.cmd} is handled similarly.  Thus
the unnumbered directories always contain the most up-to-date versions
of Gri, while various numbered directories may contain old copies, if
the system manager has elected to not delete them.

Second, @file{/opt/gri/bin/gri} is in turn linked to a file in the
system path, normally @file{/usr/local/bin/gri}.  At the same time, a
duplicate link is made, to a numbered executable
(e.g. @file{/usr/local/bin/gri-NNNN}, where @file{NNNN} is the version
number) inserted in the system path.  Thus the current version of Gri
can be accessed by users by typing either @code{gri} or
e.g. @code{gri-NNNN} where @file{NNNN} is the version number.  Any
older versions of Gri which were not removed by the person doing the
installation will also be available, e.g. by typing @code{gri-2.039}.
Each of these numbered versions knows to look for it's library file in
the appropriately named library file, e.g.  @code{gri-2.039} will use
@file{/opt/gri/2.039/lib/gri.cmd}.  Therefore, older library files
should be kept if older executables are kept.  The default installation
is to keep all old executables and library files.

Note: The library file @file{/opt/gri/lib/gri.cmd} is not actually used
by Gri.  It uses @emph{numbered} files like
@file{/opt/gri/@value{GRI-VERSION}/lib/gri.cmd}.  The unnumbered library
files are provided for use by the Emacs gri-mode, when it tries to
``complete'' partially typed commands @xref{Emacs Editing Mode}.



Here are details for installation on unix computers:
@menu
* Precompiled Unix::            Installing precompiled versions
* Linux::                       Installing on linux
* Uncompiled Unix::             Compiling and installing
@end menu


@node   Precompiled Unix, Linux, Unix-install, Unix-install
@comment  node-name,  next,  previous,  up
@subsection Pre-compiled unix versions
Pre-compiled versions of Gri exist for various computers, e.g. SPARC
(both sunOS and solaris), IBM-RS, Sequent, and Linux.  The following
instructions, which assume a version number @value{GRI-VERSION}, and a
SPARC solaris machine, show how to install these.

The compressed tar file, with a name like
@file{gri-binary-SunOS5-@value{GRI-VERSION}.tar.gz} (in this example a
Sun OS 5 binary is assumed, with gri version number @value{GRI-VERSION})
contains a directory which holds the executable Gri file, @file{gri},
the library file @file{gri.cmd}, an instructions file, @file{README},
and a Makefile to install Gri.

Here's how to install Gri, starting with this tar file:

@enumerate
@item
First, uncompress (unzip) the file, and un-tar it, by doing
@example
gunzip -c gri-binary-SunOS5-@value{GRI-VERSION}.tar.gz | tar xvf -
@end example
@noindent
or
@example
zcat gri-binary-SunOS5-@value{GRI-VERSION}.tar.gz | tar xvf -
@end example
@noindent
This will yield a new directory, with a name like
@file{gri-binary-SunOS5-@value{GRI-VERSION}}, which contains the
indicated files.
@item
Follow the instructions in the @file{README} file to install Gri.
@end enumerate



@node   Linux, Uncompiled Unix, Precompiled Unix, Unix-install
@comment  node-name,  next,  previous,  up
@subsection Installation on Linux computers

@cindex linux distributions
@cindex debian
@cindex redhat
@cindex RPM version of installation package
@cindex installation, debian linux
@cindex installation, redhat linux
@cindex installation, linux redhat/debian

Installation is easy on RedHat and Debian flavors of linux.  Versions
are available from the official distributions and also at
@c HTML <A HREF="ftp://ftp.phys.ocean.dal.ca/users/kelley/gri">
@c HTML ftp://ftp.phys.ocean.dal.ca/users/kelley/gri
@c HTML </A>
@example
ftp://ftp.phys.ocean.dal.ca/users/kelley/gri
@end example


The RedHat version supports intel platforms only, while the Debian
version supports intel, alpha, 68K and powerpc.  Installation follows
the normal method for these distributions ... if you have the
distribution, you surely know what to do!

For other linux distributions, follow the compile/install procedure for
other flavors of unix @xref{Uncompiled Unix}.


@node   Uncompiled Unix, Msdos-install, Linux, Unix-install
@comment  node-name,  next,  previous,  up
@subsection Compilation on Unix computers
To compile Gri on unix computers, do the following, starting with the
tarred, compressed distribution file, with a name like
@file{gri-source-@value{GRI-VERSION}.tar.gz} (the number in the filename
is the version number).

@emph{Choice of compilers} you will have best success with the FSF C++
compiler called @file{g++}, version 2.7.x or later (see any Free
Software Foundation site, e.g.  @file{prep.ai.mit.edu}), although any
C++ compiler which handles "templates" properly should work.

@emph{If compilation fails} If the procedure below fails, look in the
@file{PORTS} directory for a file or directory with a name indicating
your computer type, or look in the @file{various_machines} file.

@cindex configure script, how to use to compile gri
@cindex compiling gri
@cindex how to compile gri

@enumerate
@item
Type 
@example
gunzip -c gri-source-@value{GRI-VERSION}.tar.gz | tar xvf -
@end example
or
@example
zcat gri-source-@value{GRI-VERSION}.tar.gz | tar xvf -
@end example
to uncompress and untar the contents.  You should get a new directory,
with a name like @file{gri-source-@value{GRI-VERSION}}, which contains
many files.
@item
Move to this new directory, and type
@example
./configure
@end example
to create a @file{Makefile} for use by the compiler.  The configure
script determines properties of your compiler and operating system, and
adjusts the compilation procedure appropriately.  It determines some of
these properties itself, and asks for advice from you on others (see
below).  If the permission of the @file{configure} file is wrong, you'll
get an error like @code{Permission denied}; if so, 
try typing @code{sh ./configure}.  If that fails, you will have to use
the generic Makefile called @file{Makefile.generic}, and hope for the
best.  Before doing anything, though, you should read the file
@file{PORT-HIST} for a history of porting problems; you might get some
good hints here.

Notes:
@enumerate
@item
The @file{configure} script needs to know where to install the Gri
executable file and library files.  Normally, it will print out a
message explaining the issue, and asking where to put these things.  (A
reasonable default is provided, if you just answer with
carriage-return.)  If you know about this in advance, you can run the
configure script as e.g.
@example
./configure --prefix=/opt/gri
@end example
This says that you want Gri to exist in a directory called
@file{/opt/gri}, which will have subdirectories such as
@file{/opt/gri/bin} and @file{/opt/gri/lib}.
@item
Gri uses a C++ feature called 'templates'.  Unfortunately, templates are
handled in different ways by different compilers.  At least as of Spring
1997, the GNU compiler, vsn 2.7.x (used by many Gri folks) has problems
with templates.  Therefore the configure script will check to see if you
are using the GNU c++ compiler, and if you are it will check whether the
("template repository") compiler flag @code{-frepo} is known on your
machine.  If it is not, an alternative method of templates will be
used.  But if it is, you'll be asked, for confirmation, whether you wish
to use the @code{-frepo} flag.  On many machines (e.g. Solaris) you
should answer @code{n} to this question.  The prompt will explain.
Also, note that you can avoid the prompt by running configure as either
of the two below:
@example
./configure --enable-frepo
./configure --disable-frepo
@end example
(Such switches will be ignored unless you're using the GNU compiler.)
@item
If optional system libraries like the netCDF library, if it exists, are
installed in nonstandard places, you might have to change the
unix environment variable @code{LD_LIBRARY_PATH}.  For example, on my machine
the @code{netcdf} library is not installed in @file{/usr/lib}, as the
@code{configure} script assumes, but rather in @file{/opt/netcdf/lib}.
Therefore I have the following line in one of my startup files:
@example
export LD_LIBRARY_PATH=/usr/lib:/opt/netcdf/lib
@end example
@end enumerate
@item
@cindex developers, how to compile a Gri that debugs storage allocation
@emph{Developers only}: if you wish, you can compile Gri with a
debugging version of the malloc/string libraries.  To do this, edit the
@file{Makefile}, searching for the item that starts with the
following comment fragment:
@example
# <<<--- DEVELOPERS:
@end example
Make the changes as appropriate.
@item
Now compile Gri by typing
@example
make
@end example
@noindent
(or, if the previous step failed, type @code{make -f Makefile.generic}). 
@item
Assuming compilation succeeds, install @file{gri} and the ancillary file
@file{gri.cmd}, by typing
@example
make install
@end example
@noindent
This will try to install them in the installation directories
@file{/opt/gri/bin} and @file{/opt/gri/lib}, with a link for the
executable to a directory in the system path, normally
@file{/usr/local/bin}.
@item
If you wish to install numbered versions of Gri, you should now type
@example
make install-numbered
@end example
@item
Once these things are done, you may type
@example
make clean
@end example
@noindent
to clean up some files.
@end enumerate


@node   Msdos-install,  OS2-install, Uncompiled Unix, Accessing
@comment  node-name,  next,  previous,  up
@subsection Compilation on x86 (PC-style) Computers

Versions exist for MSDOS, windows, and Linux operating systems.
(Actually, the windows version is just the MSDOS version, which can be
run inside an msdos window within windows-95, windows-NT, etc.)

@subsubsection MSDOS Operating System
@cindex compilation under MSDOS
@cindex MSDOS compilation

To compile and install Gri under MSDOS, do this:
@enumerate
@item
To begin, install @code{DJGPP V2}, if it's not on your system already.
It can be found at
@c HTML <A HREF="http://www.delorie.com/djgpp">
http://www.delorie.com/djgpp.
@c HTML </A>
@item
Uncompress and extract from gri source package; @xref{Uncompiled Unix}.
@item
Type @code{make -f Makefile.dj2} to compile.  If it fails, you might
have to edit the file @file{Makefile.dj2} to match the characteristics
of your system.  Please inform the author,
@c HTML <A HREF="mailto:Dan.Kelley@Dal.CA"> 
Dan Kelley
@c HTML </A>
at Dan.Kelley@@Dal.CA, if you think your modifications might be useful
to others.
@item
Type @code{make -f Makefile.dj2 install} to install it (normally on the
@code{C:} drive).
@end enumerate 

If you encounter problems, read the first few lines of the Makefile
(i.e. the file @file{Makefile.dj2}) for hints on things to try.  For
example, in the present version of @file{Makefile.dj2} these hints are
given:
@enumerate
@item
There is a good chance that this Makefile will work as is, so try that
first.
@item
If you have the @file{netcdf} library (used for certain types of
atmospheric and oceanographic datasets), then un-comment and possibly
edit the appropriate @code{NETCDF_...} lines below, as instructed by the
comments preceding these lines.
@item
If you don't want Gri inserted in the directory @file{c:/gri}, edit the
@code{instdir = ...} line below.
@item
If you get error messages about the @file{stdcxx} library, edit the
@code{LIBS} line below, rewriting @file{-lstdcxx} as @file{-lstdcx}.
@item
If you get compilation errors relating to @code{time} or to
@code{ftime}, try putting the token @code{-DHAVE_FTIME=1} in the list of
similar token in the @code{DEFS = ...} line.  For consistency
(basically, so the author can help you if you do this), put it right
after the @code{-D_GRI_=1} token.
@end enumerate


To view the output, use a PostScript viewer such as 
@c HTML <A HREF="http://www.cs.wisc.edu/~ghost/index.html">
GSview.
@c HTML </A>



@subsubsection LINUX Operating System
@cindex compilation under Linux
@cindex linux compilation
@cindex LINUX compilation
Linux is a good emulation of unix, and it's free.  Gri for linux is
compiled and installed according to the normal unix instructions.
The compiled version is with a name like 
@code{gri-binary-solaris-2.1.10.tar.gz}; treat it as in other unix
systems @xref{Uncompiled Unix}.

@node   OS2-install, Mac-install, Msdos-install, Accessing
@comment  node-name,  next,  previous,  up
@subsection Compilation under OS/2
@cindex compilation under OS/2
@cindex OS/2 unix compilation

Gri compiles, using the gcc compiler under OS/2, provided that the
included @code{Makefile.os2} is used.  Be sure to edit the first few
lines to change filenames as required, especially taking care too
account for whether the netCDF library is installed, etc.



@node   Mac-install, Bugs, OS2-install, Accessing
@comment  node-name,  next,  previous,  up
@subsection Compilation under Macintosh Unix
@cindex compilation under Macintosh Unix
@cindex macintosh unix compilation

The MachTen version of unix for Macintosh acts like a normal unix.
Provided that the associated @code{gcc} compiler is sufficiently
up-to-date, Gri can be compiled following the normal unix instructions.



@c HTML <!-- newfile Bugs.html "Gri: bugs" "Gri Bugs" -->

@node   Bugs, Known Bugs, Mac-install, Top
@comment  node-name,  next,  previous,  up
@chapter Bugs
@menu
* Known Bugs::                  Known bugs in current version 
* Reporting Bugs::              How to report bugs
@end menu

@node   Known Bugs, Reporting Bugs, Bugs, Bugs
@comment  node-name,  next,  previous,  up
@section Known bugs
@cindex bugs in Gri
List of known bugs:
@subsection All computers

@itemize @bullet
@item
Polar (r-theta) graphs do not work.
@item
The EPSF bounding-box defaults to an 8.5 by 11 inch page, if
@code{-no_bounding_box} is specified on the commandline 
@xref{Options On Command Line}.  It should probably know about more
paper sizes.
@item
@code{draw contour labels nowhiteunder} does not break the line under
the label, as it should.
@item
@code{reorder columns} is slow because it uses a bubble-sort.
@item
Support for @code{netCDF} binary files is limited, e.g. (1) consistency
of grid x/y/data is not checked as it is in ascii/binary formats; (2)
Gri cannot read image data; (3) @code{set input data window} has no
effect: use @code{set clip} instead; and (4) Gri cannot output to
@code{netCDF} files.
@item
Errors sometimes report inaccurate line numbers.  (E.G.: errors inside
newcommands report wrong line numbers if continued lines are present
before the bad line.)
@item
Images in rasterfile format: only mapless images permitted.
@item
In an @code{insert}ed file, @code{read} commands which expect input from
the commandfile, as opposed to a datafile, do not work.
@item
The string size rpnfunctions @code{ascent("string")} and
@code{descent("string")} are inaccurate.
@item
If statements: Commands in the false part of @code{if} statements are
not checked for proper syntax.  All commands in false parts of @code{if}
statements are simply skipped, except for @code{end if} or @code{else [if]}.
@item
Clipping (lines): Clipped lines should extend as far as the axis frame,
but they don't.  Gri only draws line segments which connect two points
each of is inside the axis frame.  Note, however, that postscript
clipping works correctly, and that it is recommended anyway.
@item
Aesthetics (y-axes): labels are sometimes ugly because they are
right-justified, and the number of decimal points is not necessarily
uniform in all labels.  Workaround: Set the format yourself (example:
@code{set y format %.1f}).
@end itemize


@node   Reporting Bugs, Overview of System Tools, Known Bugs, Bugs
@comment  node-name,  next,  previous,  up
@cindex bugs, how to report
@section Reporting Bugs
Please report any bugs you find in Gri.  Bug reports help make Gri more
reliable and useful for all users.  Here is how to report bugs:

@enumerate
@item
Archive your present version of Gri and
then acquire the most recent version, to see if your bug has already
been solved.  Bugs in the current version are likely to be repaired,
while the probability of my repairing bugs in previous versions is low.
I invest in the future, not the past.
@item
Prepare a command-file to illustrate the bug.  It is very important that
you remove @emph{anything} not related to the bug.  Since you are
familiar with the problem and I am not, you can do this easier than I
can.  Please make the command-file end after the line illustrating the
bug and remove preceding commands that do not affect the bug.  One can
usually reduce the length of the file by a factor of about 2 in this
way.  Clean bug reports lead to early corrections, so your time is well
spent.

If Gri produces an error, it might help to produce an error traceback
stack by inserting the @code{set error action to core dump} command at
the top of the commandfile.
@item
@cindex bug, resulting in bus error
@cindex bug, resulting in segmentation fault
@cindex bus error, what to do
@cindex segmentation fault, what to do
@cindex debugger used with Gri
If Gri dies with a system-level error (e.g., @code{segmentation fault}
or @code{bus error}), you should re-run gri inside the debugger.  I
prefer the @code{gdb} debugger, but if you don't have that, @code{dbx}
will do.  Use the @code{where} command to determine where the system
error occurred.  Put all the debugging output in a file.  The
@code{script/exit} commands provide a convenient way to do this in unix,
e.g.
@example
script
gdb gri
run cmdfile.gri
... answer any query questions that might get asked ...
...
... at this point, Gri has died, so type:
where
quit
exit
@end example
@noindent
which creates a file called @file{typescript}.
@item
If Gri runs to completion, then save the resultant PostScript file.
@item
Write a description of your problem in a file called @file{README}, by
filling in this form:
@example
(1) GRI-VERSION (GET WITH 'gri -v')

(2) TYPE OF COMPUTER AND VERSION OF OPERATING
    SYSTEM.  ON MANY UNIX SYSTEMS THIS
    INFORMATION IS GIVEN BY THE COMMAND
        uname -a

(3) IF THIS WAS NOT A PRECOMPILED VERSION,
   NAME AND VERSION NUMBER OF COMPILER.

(4) SHORT DESCRIPTION OF BUG (10-20 WORDS)

(5) DID THE BUG CAUSE A SYSTEM ERROR
   (E.G., ``segmentation fault'' OR 
   ``bus error'')?

(6) DETAILS OF BUG, EMPHASIZING DIFFERENCE
    BETWEEN EXPECTED BEHAVIOUR AND WHAT
    ACTUALLY HAPPENED.  IF YOU REFER TO
    THE PROGRAM INSERT TAGS IN THE
    PROGRAM, OF THE FORM
        # Tag 1 
@end example
@item
Assemble the @file{README} file, the commandfile, the debugger output or
the PostScript file, and any necessary data files into one package, and
mail it to me, using e.g. the unix command (here written on several
lines to display in web-browswers)

@example
tar -cvhf - ...
 | compress -c
 | uuencode gribug
 | mail @value{AUTHOR-EMAIL}
@end example
@noindent
where ... stands for the list of the files to be enclosed.
@end enumerate

Note: I will extract your bug report using the following unix commands,
which you should also use if I send something back to you:
@example
uudecode extracted_stuff
# assume makes file called 'gribug'
gunzip -c gribug | tar xvf -
@end example





@comment
@comment  APPENDICES FOLLOW
@comment

@c HTML <!-- newfile OverviewSystemTools.html "Gri: Overview of System Tools" "System Tools" -->

@node   Overview of System Tools, Grep, Reporting Bugs, Top
@comment  node-name,  next,  previous,  up
@chapter Overview of System Tools

Using system tools to manipulate your data makes sense for several
reasons.  First, you may be familiar with those tools already.  Second,
learning these tools will help you in all your work.  Each of the
programs listed below is avaiable for Unix.  Some (e.g. Perl and the Awk
variant called Gawk) are available on other operating systems as well.
Each of these tools is fully documented in Unix manpages, so here I'll
just give an indication of a couple of useful techniques you might want
to use.

Bear in mind that these tools can do very similar jobs.  For example,
Perl can do anything Sed and Grep can do, often easier.  If you don't
know Sed or Grep, I suggest you learn Awk instead.

Perl can also do anything Gawk can do, sometimes easier.  Perl can also
do a lot more than Gawk (primarily, it lets you work with multiple files
very easily).  In fact, Perl is the most powerful of this list.  If you
know none of these tools, you might want to learn Perl instead of the
others.  But Perl is more complicated for simple work than Awk is, so
the most reasonable path might be to learn both Awk and Perl.

For simple applications, you will probably want to use these tools in a
piped open command, e.g.
@example
open "awk '@{print $1, $3/$2@}' MyFile |"
@end example
@noindent
which creates a temporary file (automatically erased when Gri finishes)
which contains the output from running the system command that preceeds
the pipe symbol (@code{|}); @xref{Open}.

(Here and in all the examples of this chapter, it is assumed that the
user's input file is named @file{MyFile}.)

For more complicated appplications, you may use the Gri @code{system}
command as follows.
@example
system perl   >tmp  <<"EOF"
open(IN, "MyFile");
while(<IN>) @{
    ($x, $y) = split;
    print "$x", " ", cos($y), "\n";
@}
EOF
open tmp
read columns x y
draw curve
system rm -f tmp
@end example
@noindent
Here a temporary file, named @file{tmp}, has been used to store the
results of the calculation.  Note that this file was specifically
cleaned up by the second @code{system} command.

@menu
* Grep::                        Search files for patterns
* Sed::                         Serial editor
* Awk::                         Search and manipulate data
* Perl::                        Search and manipulate data
@end menu


@node   Grep, Sed, Overview of System Tools, Overview of System Tools
@comment  node-name,  next,  previous,  up
@section Grep

@cindex grep system tool
@cindex overview of grep system tool

The most common application of Grep is to select lines matching a
pattern, or not matching a pattern.  Here is how to skip all lines with
the word "HEADER" in them:
@example
open "grep -v 'HEADER' MyFile |"
...
@end example
@noindent
Note that Gawk and Perl do this just as easily.


@node Sed, Awk, Grep, Overview of System Tools
@comment  node-name,  next,  previous,  up
@section Sed

@cindex sed system tool
@cindex overview of sed system tool

Sed is normally used for simple changes to files.  For example, if you
have columnar data which are separated with comma characters instead of
whitespace, you could make it Gri compatible by 
@example
open "sed -e 's/,/ /g' MyFile |"
@end example

@noindent
Where the @code{-e} flag indicates that the next item is a command to
Sed, in this case a command to switch ("s") the comma character with the
blank character, globally ("g)" across each line of the file.  See also
the overview of Perl.

@node Awk, Perl, Sed, Overview of System Tools
@comment  node-name,  next,  previous,  up
@section Awk

@cindex awk system tool
@cindex gawk system tool
@cindex overview of awk system tool

Awk is great for one-liners.  If your system lacks Awk, you can procure
the GNU version, called Gawk, from the web for free.  For better or
worse, Gawk is not fully compatible with Awk.  The good thing is that
Gawk is pretty much the same on all operating systems, whereas the
installed Awk may not be.  I use Gawk instead of Awk, for this reason
and because it is normally faster.

If you are unsure of whether Gawk or Awk is present on your operating
system, you may use the synonym @code{\.awk.} in your system commands.
Gri will take this to mean Gawk, if that is present, or the variant
called Nawk (New-Awk) if Gawk is not present, or the tried and true Awk
if neither of the above is present.  In the examples below, however,
I'll use @code{awk}.

The main concept in Awk is of "patterns" and "actions."  In the Awk
syntax, actions are written in braces following patterns written with no
braces.  (This will become clear presently.)

Whenever a line in the data file matches the pattern, the action is
done.

The default pattern is to match to every line in the file.  This is done
if no pattern is supplied.

The default action is to print the line, and this is done if no action
is supplied.

Here are a few examples.  To skip first 10 lines of a file:
@example
open "awk 'NR>10' MyFile |"
read ...
@end example
@noindent
Here the pattern was that @code{NR} (a special Awk variable for the
number of the record, starting with 1 for the first line of the file)
exceeded 10.  And the action was, taken by default since nothing was
supplied between braces, was to print this line.

@noindent
To plot the cosine of the second column, against the first column:
@example
open "awk '@{print ($1, cos($2))@}' MyFile |"
read columns x y
draw curve
@end example
@noindent
Here no pattern was supplied, so the action was done for every line.

Combining these two forms, then, and supplying both a pattern and an
action, here is how one might print the first and eighth columns of the
file @file{MyFile}, but only for the first 10 lines of the file:
@example
open "awk NR<=10 @{print ($1, $8)@} MyFile |"
@end example


@node  Perl, Acknowledgments, Awk, Overview of System Tools
@comment  node-name,  next,  previous,  up
@section Perl

@cindex perl system tool
@cindex overview of perl system tool

Perl can do almost @emph{anything} with your data, since it is a full
programming language designed to also emulate several Unix utilities.

In perl, as in other commands, the commandline switch @code{-e}
indicates that a Perl command is given in the next word of the command
line.  The commandline switch @code{-p} indicates to print the line,
after any indicated Perl actions have been done on it.  Here, for
example, is how one would emulate a Sed replacement of comma by blank:
@example
open "perl -pe 's/,/ /g' MyFile |"
@end example

Perl also has a commandline switch @code{-a} indicating that lines
should be "autosplit" into an array called @code{$F}.  The first element
of this array is @code{$F[0]}.  Splitting is normally done on
white-space character(s), although this may be changed if desired.
Here, for example, is how to take the cosine of the second column of a
file, and print this after the first column:
@example
open "perl -pea 'print($F[0], cos($F[1]))' MyFile |"
@end example


@c HTML <!-- newfile Acknowledgments.html "Gri: Acknowledgments" "Acknowledgments" -->

@node   Acknowledgments, License, Perl, Top
@comment  node-name,  next,  previous,  up
@chapter Acknowledgments
@cindex user input to Gri
@cindex acknowledgments
Developing Gri was made easier by suggestions and bug reports from many
users, among whom are:
Ivo Alxneit,
@cindex Ivo Alxneit (contributer)
Karin Bryan,
@cindex Karin Bryan (contributer)
Sara Bennett,
@cindex Sara Bennett (contributer)
Luke Blaikie,
@cindex Luke Blaikie (contributer)
Dave Brickman,
@cindex Dave Brickman (contributer)
Pierre Flament,
@cindex Pierre Flament (contributer)
Peter Galbraith,
@cindex Peter Galbraith (contributer)
Dave Hebert,
@cindex Dave Hebert (contributer)
Steve Matheson,
@cindex Steve Matheson (contributer)
Carl Osterwisch,
@cindex Carl Osterwisch (contributer)
Richard Andrew Miles Outerbridge,
@cindex Richard Andrew Miles Outerbridge (contributer)
Brian May,
@cindex Brian May (contributer)
Jinyu Sheng,
@cindex Jinyu Sheng (contributer)
Toru Suzuki,
@cindex Toru Suzuki (contributer)
Keith Thompson,
@cindex Keith Thompson (contributer)
David Trueman,
@cindex David Trueman (contributer)
and George White.
@cindex George White (contributer)

Some of these folks also suggested detailed improvements to the C++ code
of Gri, not an easy task given the complexity and length of the code.

I'd also like to thank folks who were kind respond to an email query I
made in March 2000, asking for the names of journals that have published
Gri output.  The list, which mainly arrived on Sunday in response to an
email I sent Saturday (don't Gri users take a break?) is below.


@b{Journals in Oceanography, Atmospheric Science, Earth Science, etc.}
@itemize @bullet
@item @emph{Bulletin on Coastal Oceanography} (in Japanese with English
abstract)
@item @emph{Fisheries Oceanography}
@item @emph{Deep-Sea Research}
@item @emph{EOS, Transactions of the American Geophysical Union}
@item @emph{Estuarine, Coastal and Shelf Science}
@item @emph{Geophysical Research Letters}
@item @emph{Journal of Atmospheric and Oceanic Technology}
@item @emph{Journal of Geophysical Research}
@item @emph{Journal of Marine Research}
@item @emph{Journal of Plankton Research}
@item @emph{Journal of Physical Oceanography}
@item @emph{Journal of the Japan Scoiety for Marine Surveys and Technology}
(in Japanese with English abstract)
@item @emph{Limnology and Oceanography}
@item @emph{Marine Biology}
@item @emph{Marine Ecology Progress Series}
@item @emph{Oceanography}
@item @emph{Paleoceanography}
@item @emph{Progress in Oceanography}
@item @emph{Quaternary Research}
@item @emph{Scientia Marina}
@item @emph{South African Journal of Marine Science}
@item @emph{Umi no Kenkyu} (Japanese version for Journal of Oceanography, in
Japanese with English abstract)
@end itemize

@b{Journals in Physics, Chemistry, etc.}
@itemize @bullet
@item @emph{Applied Physics A}
@item @emph{Journal of Fluid Mechanics}
@item @emph{Journal of Physical Chemistry B}
@item @emph{Physica D}
@item @emph{Physics of Fluids}
@item @emph{Physics A}
@item @emph{Physics Letters B}
@item @emph{Physical Review C}
@item @emph{Physical Review Letters}
@item @emph{Research on Chemical Intermediates}
@item @emph{Theoretical Computational Fluid Dynamics}
@end itemize

@b{Other Journals}
@itemize @bullet
@item @emph{Nature}
@end itemize

@b{Books, Monographs, etc.}
@itemize @bullet
@item @emph{The Atlas of Hawai'i} (University of Hawai'i Press)
@item @emph{Differential Equations with Applications to Biology} (American Mathematical Society)
@item @emph{Ocean Drilling Program} publications
@end itemize




@c HTML <!-- newfile License.html  "Gri: License" "License" -->

@node   License, Discussion Group, Acknowledgments, Top
@comment  node-name,  next,  previous,  up
@chapter License
@cindex license
Gri is distributed under the GPL public license, which has been judged
an acceptable Open Source license.  The full text of the GPL license is
given below.
@example
Gri is distributed under the GPL public license,
which has been judged an acceptable Open Source
license.  The full text of the GPL license is
given below.

		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software
     Foundation, Inc.  59 Temple Place, Suite
     330, Boston, MA 02111-1307 USA

 Everyone is permitted to copy and distribute
 verbatim copies of this license document, but
 changing it is not allowed.

			    Preamble

  The licenses for most software are designed to
take away your freedom to share and change it.
By contrast, the GNU General Public License is
intended to guarantee your freedom to share and
change free software--to make sure the software
is free for all its users.  This General Public
License applies to most of the Free Software
Foundation's software and to any other program
whose authors commit to using it.  (Some other
Free Software Foundation software is covered by
the GNU Library General Public License instead.)
You can apply it to your programs, too.

  When we speak of free software, we are
referring to freedom, not price.  Our General
Public Licenses are designed to make sure that
you have the freedom to distribute copies of free
software (and charge for this service if you
wish), that you receive source code or can get it
if you want it, that you can change the software
or use pieces of it in new free programs; and
that you know you can do these things.

  To protect your rights, we need to make
restrictions that forbid anyone to deny you these
rights or to ask you to surrender the rights.
These restrictions translate to certain
responsibilities for you if you distribute copies
of the software, or if you modify it.

  For example, if you distribute copies of such a
program, whether gratis or for a fee, you must
give the recipients all the rights that you have.
You must make sure that they, too, receive or can
get the source code.  And you must show them
these terms so they know their rights.

  We protect your rights with two steps: (1)
copyright the software, and (2) offer you this
license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we
want to make certain that everyone understands
that there is no warranty for this free software.
If the software is modified by someone else and
passed on, we want its recipients to know that
what they have is not the original, so that any
problems introduced by others will not reflect on
the original authors' reputations.

  Finally, any free program is threatened
constantly by software patents.  We wish to avoid
the danger that redistributors of a free program
will individually obtain patent licenses, in
effect making the program proprietary.  To
prevent this, we have made it clear that any
patent must be licensed for everyone's free use
or not licensed at all.

  The precise terms and conditions for copying,
distribution and modification follow.

		    GNU GENERAL PUBLIC LICENSE

   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION
   AND MODIFICATION

  0. This License applies to any program or other
work which contains a notice placed by the
copyright holder saying it may be distributed
under the terms of this General Public License.
The "Program", below, refers to any such program
or work, and a "work based on the Program" means
either the Program or any derivative work under
copyright law: that is to say, a work containing
the Program or a portion of it, either verbatim
or with modifications and/or translated into
another language.  (Hereinafter, translation is
included without limitation in the term
"modification".)  Each licensee is addressed as
"you".

Activities other than copying, distribution and
modification are not covered by this License;
they are outside its scope.  The act of running
the Program is not restricted, and the output
from the Program is covered only if its contents
constitute a work based on the Program
(independent of having been made by running the
Program).  Whether that is true depends on what
the Program does.

  1. You may copy and distribute verbatim copies
of the Program's source code as you receive it,
in any medium, provided that you conspicuously
and appropriately publish on each copy an
appropriate copyright notice and disclaimer of
warranty; keep intact all the notices that refer
to this License and to the absence of any
warranty; and give any other recipients of the
Program a copy of this License along with the
Program.

You may charge a fee for the physical act of
transferring a copy, and you may at your option
offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the
Program or any portion of it, thus forming a work
based on the Program, and copy and distribute
such modifications or work under the terms of
Section 1 above, provided that you also meet all
of these conditions:

    a) You must cause the modified files to carry
    prominent notices stating that you changed
    the files and the date of any change.

    b) You must cause any work that you
    distribute or publish, that in whole or in
    part contains or is derived from the Program
    or any part thereof, to be licensed as a
    whole at no charge to all third parties under
    the terms of this License.

    c) If the modified program normally reads
    commands interactively when run, you must
    cause it, when started running for such
    interactive use in the most ordinary way, to
    print or display an announcement including an
    appropriate copyright notice and a notice
    that there is no warranty (or else, saying
    that you provide a warranty) and that users
    may redistribute the program under these
    conditions, and telling the user how to view
    a copy of this License.  (Exception: if the
    Program itself is interactive but does not
    normally print such an announcement, your
    work based on the Program is not required to
    print an announcement.)

These requirements apply to the modified work as
a whole.  If identifiable sections of that work
are not derived from the Program, and can be
reasonably considered independent and separate
works in themselves, then this License, and its
terms, do not apply to those sections when you
distribute them as separate works.  But when you
distribute the same sections as part of a whole
which is a work based on the Program, the
distribution of the whole must be on the terms of
this License, whose permissions for other
licensees extend to the entire whole, and thus to
each and every part regardless of who wrote it.

Thus, it is not the intent of this section to
claim rights or contest your rights to work
written entirely by you; rather, the intent is to
exercise the right to control the distribution of
derivative or collective works based on the
Program.

In addition, mere aggregation of another work not
based on the Program with the Program (or with a
work based on the Program) on a volume of a
storage or distribution medium does not bring the
other work under the scope of this License.

  3. You may copy and distribute the Program (or
a work based on it, under Section 2) in object
code or executable form under the terms of
Sections 1 and 2 above provided that you also do
one of the following:

    a) Accompany it with the complete
    corresponding machine-readable source code,
    which must be distributed under the terms of
    Sections 1 and 2 above on a medium
    customarily used for software interchange;
    or,

    b) Accompany it with a written offer, valid
    for at least three years, to give any third
    party, for a charge no more than your cost of
    physically performing source distribution, a
    complete machine-readable copy of the
    corresponding source code, to be distributed
    under the terms of Sections 1 and 2 above on
    a medium customarily used for software
    interchange; or,

    c) Accompany it with the information you
    received as to the offer to distribute
    corresponding source code.  (This alternative
    is allowed only for noncommercial
    distribution and only if you received the
    program in object code or executable form
    with such an offer, in accord with Subsection
    b above.)

The source code for a work means the preferred
form of the work for making modifications to it.
For an executable work, complete source code
means all the source code for all modules it
contains, plus any associated interface
definition files, plus the scripts used to
control compilation and installation of the
executable.  However, as a special exception, the
source code distributed need not include anything
that is normally distributed (in either source or
binary form) with the major components (compiler,
kernel, and so on) of the operating system on
which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is
made by offering access to copy from a designated
place, then offering equivalent access to copy
the source code from the same place counts as
distribution of the source code, even though
third parties are not compelled to copy the
source along with the object code.

  4. You may not copy, modify, sublicense, or
distribute the Program except as expressly
provided under this License.  Any attempt
otherwise to copy, modify, sublicense or
distribute the Program is void, and will
automatically terminate your rights under this
License.  However, parties who have received
copies, or rights, from you under this License
will not have their licenses terminated so long
as such parties remain in full compliance.

  5. You are not required to accept this License,
since you have not signed it.  However, nothing
else grants you permission to modify or
distribute the Program or its derivative works.
These actions are prohibited by law if you do not
accept this License.  Therefore, by modifying or
distributing the Program (or any work based on
the Program), you indicate your acceptance of
this License to do so, and all its terms and
conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or
any work based on the Program), the recipient
automatically receives a license from the
original licensor to copy, distribute or modify
the Program subject to these terms and
conditions.  You may not impose any further
restrictions on the recipients' exercise of the
rights granted herein.  You are not responsible
for enforcing compliance by third parties to this
License.

  7. If, as a consequence of a court judgment or
allegation of patent infringement or for any
other reason (not limited to patent issues),
conditions are imposed on you (whether by court
order, agreement or otherwise) that contradict
the conditions of this License, they do not
excuse you from the conditions of this License.
If you cannot distribute so as to satisfy
simultaneously your obligations under this
License and any other pertinent obligations, then
as a consequence you may not distribute the
Program at all.  For example, if a patent license
would not permit royalty-free redistribution of
the Program by all those who receive copies
directly or indirectly through you, then the only
way you could satisfy both it and this License
would be to refrain entirely from distribution of
the Program.

If any portion of this section is held invalid or
unenforceable under any particular circumstance,
the balance of the section is intended to apply
and the section as a whole is intended to apply
in other circumstances.

It is not the purpose of this section to induce
you to infringe any patents or other property
right claims or to contest validity of any such
claims; this section has the sole purpose of
protecting the integrity of the free software
distribution system, which is implemented by
public license practices.  Many people have made
generous contributions to the wide range of
software distributed through that system in
reliance on consistent application of that
system; it is up to the author/donor to decide if
he or she is willing to distribute software
through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear
what is believed to be a consequence of the rest
of this License.

  8. If the distribution and/or use of the
Program is restricted in certain countries either
by patents or by copyrighted interfaces, the
original copyright holder who places the Program
under this License may add an explicit
geographical distribution limitation excluding
those countries, so that distribution is
permitted only in or among countries not thus
excluded.  In such case, this License
incorporates the limitation as if written in the
body of this License.

  9. The Free Software Foundation may publish
revised and/or new versions of the General Public
License from time to time.  Such new versions
will be similar in spirit to the present version,
but may differ in detail to address new problems
or concerns.

Each version is given a distinguishing version
number.  If the Program specifies a version
number of this License which applies to it and
"any later version", you have the option of
following the terms and conditions either of that
version or of any later version published by the
Free Software Foundation.  If the Program does
not specify a version number of this License, you
may choose any version ever published by the Free
Software Foundation.

  10. If you wish to incorporate parts of the
Program into other free programs whose
distribution conditions are different, write to
the author to ask for permission.  For software
which is copyrighted by the Free Software
Foundation, write to the Free Software
Foundation; we sometimes make exceptions for
this.  Our decision will be guided by the two
goals of preserving the free status of all
derivatives of our free software and of promoting
the sharing and reuse of software generally.

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF
CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO
THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM
"AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
RISK AS TO THE QUALITY AND PERFORMANCE OF THE
PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
SERVICING, REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE
LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT
HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL,
SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE
PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES
SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF
THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

		     END OF TERMS AND CONDITIONS

	    How to Apply These Terms to Your New
	    Programs

  If you develop a new program, and you want it
to be of the greatest possible use to the public,
the best way to achieve this is to make it free
software which everyone can redistribute and
change under these terms.

  To do so, attach the following notices to the
program.  It is safest to attach them to the
start of each source file to most effectively
convey the exclusion of warranty; and each file
should have at least the "copyright" line and a
pointer to where the full notice is found.

    <one line to give the program's name and a
    brief idea of what it does.> Copyright (C)
    yyyy <name of author>

    This program is free software; you can
    redistribute it and/or modify it under the
    terms of the GNU General Public License as
    published by the Free Software Foundation;
    either version 2 of the License, or (at your
    option) any later version.

    This program is distributed in the hope that
    it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR
    PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU
    General Public License along with this
    program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330,
    Boston, MA 02111-1307 USA


Also add information on how to contact you by
electronic and paper mail.

If the program is interactive, make it output a
short notice like this when it starts in an
interactive mode:

    Gnomovision version 69, Copyright (C) yyyy
    name of author Gnomovision comes with
    ABSOLUTELY NO WARRANTY; for details type
    `show w'.  This is free software, and you are
    welcome to redistribute it under certain
    conditions; type `show c' for details.

The hypothetical commands `show w' and `show c'
should show the appropriate parts of the General
Public License.  Of course, the commands you use
may be called something other than `show w' and
`show c'; they could even be mouse-clicks or menu
items--whatever suits your program.

You should also get your employer (if you work as
a programmer) or your school, if any, to sign a
"copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright
  interest in the program `Gnomovision' (which
  makes passes at compilers) written by James
  Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit
incorporating your program into proprietary
programs.  If your program is a subroutine
library, you may consider it more useful to
permit linking proprietary applications with the
library.  If this is what you want to do, use the
GNU Library General Public License instead of
this License.
@end example


@c HTML <!-- newfile DiscussionGroup.html "Gri: Discussion Group" "Gri Extras" -->

@node   Discussion Group, Index of Commands, License, Top
@comment  node-name,  next,  previous,  up
@chapter Discussion Group
@cindex FAQ
@cindex faq
@cindex discussion Group
@cindex newsgroup
@section FAQ list
Gri has a FAQ (list of answers to Frequently Asked Questions) available
in ascii format at the ftp site @code{ftp.phys.ocean.dal.ca}
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/FAQ"> 
@c HTML (here) </A>
and in HTML format on the world-wide web
@c HTML <A HREF="http://www.phys.ocean.dal.ca/~kelley/gri/FAQ.html"> 
@c HTML (here.)</A>


@section Newsgroup
@subsection Subscribing to Gri newsgroup
Send email to 
@c HTML <a href="mailto:majordomo@phys.ocean.dal.ca">
@code{majordomo@@phys.ocean.dal.ca}
@c HTML </a>
with contents consisting of the single line 
@example
subscribe gri
@end example

@subsection Submitting a message to Gri newsgroup

Send email to 
@c HTML <a href="mailto:gri@phys.ocean.dal.ca">
@code{gri@@phys.ocean.dal.ca}
@c HTML </a>
with contents consisting of the message you'd like to send.  Please
respect the fact that folks on this group are busy people, and won't be
able to respond to very open-ended questions such as "How do I plot
things with gri".

To find out more about this newsgroup, send email to
@c HTML <a href="mailto:gri@phys.ocean.dal.ca">
@code{gri@@phys.ocean.dal.ca}
@c HTML </a>
with contents
@example
info gri
@end example
and the program will respond by sending the FAQ.

@c HTML An archive of posted messages to the newsgroup is <a href="Newsgroup.html">here</a>.



@c HTML <!-- newfile ConceptIndex.html  "Gri: Concept Index" "Concept Index" -->

@node   Index of Commands, Index of Builtins, Discussion Group, Top
@comment node-name, next, previous, up
@unnumbered Index of Commands
@printindex fn

@node   Index of Builtins, Concept Index, Index of Commands, Top
@comment  node-name,  next,  previous,  up
@unnumbered Index of Built-in Variables and Synonyms
@printindex vr

@node   Concept Index, , Index of Builtins, Top
@comment node-name, next, previous, up
@unnumbered Index, general
@printindex cp

@summarycontents
@contents
@bye

